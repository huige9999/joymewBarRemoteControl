This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/api/getLateInstruction.js
src/api/index.js
src/api/indexV2.js
src/api/sendCode.js
src/App.vue
src/assets/constant/globalControlMenu.js
src/assets/constant/host.js
src/assets/constant/index.js
src/assets/constant/pageInteractionMenu.js
src/assets/fonts/iconfont.css
src/assets/fonts/iconfont.ttf
src/assets/headImg.jpg
src/assets/image/3DRoll.png
src/assets/image/blessList.png
src/assets/image/box.png
src/assets/image/chooseSongIcon.png
src/assets/image/diamond.png
src/assets/image/fixedScreenIcon.png
src/assets/image/fullScreen.png
src/assets/image/guessBox-bg.png
src/assets/image/guessBox.png
src/assets/image/hbF.png
src/assets/image/home.png
src/assets/image/leftArrow.png
src/assets/image/listRoll.png
src/assets/image/miniGame.png
src/assets/image/money.png
src/assets/image/music.png
src/assets/image/niuyiniu.png
src/assets/image/QRCode.png
src/assets/image/redPackageRain.png
src/assets/image/rightArrow.png
src/assets/image/scanQRCode.png
src/assets/image/screenRoll.png
src/assets/image/sendGiftIcon.png
src/assets/image/sendGiftIconNew.png
src/assets/image/signBg.png
src/assets/image/signIn.png
src/assets/image/song.png
src/assets/image/toHome.png
src/assets/image/videoPlayIcon.png
src/assets/image/yaoyiyao.png
src/assets/imageV2/arrow-down.png
src/assets/imageV2/danmu_icon.png
src/assets/imageV2/free-gift_icon.png
src/assets/imageV2/fullscreen_icon.png
src/assets/imageV2/gift-rank_icon.png
src/assets/imageV2/photo-fix_icon.png
src/assets/imageV2/qrcode_icon.png
src/assets/imageV2/refresh_icon.png
src/assets/imageV2/video-pause_icon.png
src/assets/imageV2/video-play_icon.png
src/assets/imageV2/voice_icon.png
src/assets/imageV2/voice-pause_icon.png
src/assets/imageV2/xiemu_icon.png
src/assets/imageV2/zf-wall_icon.png
src/assets/imageV2/zfb_icon.png
src/assets/styles/public.css
src/components/funcButton.vue
src/components/gift.vue
src/components/menuBottom.vue
src/components/multiMedia.vue
src/components/myHead.vue
src/main.js
src/mixins/keyboardDetection.js
src/modules/screenMessenger.js
src/modules/screenStatusJudge.js
src/router/helper.js
src/router/index.js
src/store/index.js
src/store/modules/chat/helper.js
src/store/modules/chat/index.js
src/store/modules/game/index.js
src/store/modules/gift/helper.js
src/store/modules/gift/index.js
src/store/modules/instructions/index.js
src/store/modules/live.js
src/store/modules/menu/helper.js
src/store/modules/menu/index.js
src/types/index.d.ts
src/utils/index.js
src/utils/multipleScreenResolve.js
src/utils/request.js
src/utils/requestWWW.js
src/utils/websocket/handleMessage.js
src/utils/websocket/v2/chatHelper.js
src/utils/websocket/v2/index.js
src/utils/websocket/v2/mainHelper.js
src/views/basicFunctions/BasicFunctionsCommon.vue
src/views/chooseSongMain.vue
src/views/home.vue
src/views/lottery/LotteryCommon.vue
src/views/lottery/wheelLottery.vue
src/views/luckyTreasure/GuessRedPacket.vue
src/views/luckyTreasure/LuckyWheel.vue
src/views/luckyTreasure/RaceAgainstTime.vue
src/views/luckyTreasure/SendBlessing.vue
src/views/luckyTreasure/SpinItUp.vue
src/views/luckyTreasure/TwistItUp.vue
src/views/main.vue
src/views/miniGame/components/pokerCard.vue
src/views/miniGame/gestureRiddle.vue
src/views/miniGame/MiniGameCommon.vue
src/views/openTreasure/OpenTreasureBox.vue
src/views/openTreasure/RedPacketWall.vue
src/views/redPacketRain/PeopleRedPacketRain.vue
src/views/redPacketRain/ShakeRedPacket.vue
src/views/redPacketRain/ShoutRedPacket.vue
src/views/redPacketRain/TapRedPacket.vue
src/views/shake/ShakeCommon.vue
src/views/signIn/3DSignIn.vue
src/views/signIn/HandwrittenSignIn.vue
src/views/signIn/SignBook.vue
src/views/signIn/SignWeddingBook.vue
src/views/signIn/StartRite.vue
src/views/swipe/SwipeCommon.vue
src/views/v2/components/FuncButton.vue
src/views/v2/components/multiMedia.vue
src/views/v2/components/PageTitle.vue
src/views/v2/index.vue
src/views/v2/layout/bottom.vue
src/views/v2/layout/components/globalControlMenu.vue
src/views/v2/layout/components/pageInteractionMenu.vue
src/views/v2/layout/top.vue
src/views/v2/modules/commonGame/index.vue
src/views/v2/modules/effectPlayer/index.vue
src/views/v2/modules/giveMark/index.vue
src/views/v2/modules/guessGame/gestureRiddle.vue
src/views/v2/modules/guessGame/index.vue
src/views/v2/modules/guessTextColor/index.vue
src/views/v2/modules/hbWall/index.vue
src/views/v2/modules/hby/index.vue
src/views/v2/modules/home/index.vue
src/views/v2/modules/home/MessageItem.vue
src/views/v2/modules/home/MusicLibPlay.vue
src/views/v2/modules/kbx/index.vue
src/views/v2/modules/lottery/card/index.vue
src/views/v2/modules/lottery/picture/index.vue
src/views/v2/modules/lottery/sheet/index.vue
src/views/v2/modules/lottery/sign/index.vue
src/views/v2/modules/lottery/wheel/index.vue
src/views/v2/modules/orderSong/index.vue
src/views/v2/modules/qaGame/index.vue
src/views/v2/modules/qaMahjong/index.vue
src/views/v2/modules/sendBless/index.vue
src/views/v2/modules/sign/index.vue
src/views/v2/modules/sign/signWeddingBook.vue
src/views/v2/modules/vote/index.vue
src/views/v2/modules/zfdm/index.vue
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/api/getLateInstruction.js">
import store from '@/store/index';
import request from '@/utils/request';

/**
 * 获取最后一次从大屏接收到的指令
 * 用于在遥控器端重新进入后还原状态
 */
const getLateInstruction = () => {
  return request.post('sendMsgController/duxin_late', {
    splid: store.state.liveId,
  });
};
export default getLateInstruction;
</file>

<file path="src/api/index.js">
import store from '@/store/index';
import request from '@/utils/request';
import requestWWW from '@/utils/requestWWW';

export const reqGetRouterList = () => {
  return requestWWW.post('/sheZhi/getSplInfo', {
    token: store.state.token,
    splid: store.state.liveId,
  });
};

// 生成猜红包二维码
export function generateGuessHbQrcode() {
  return requestWWW.post('question/getQrUrl', {
    url: `https://www.hudongmiao.com/hb/method1?splid=${store.state.liveId}`,
    type: 'question',
  });
}
// 获取猜红包充值状态
export function getGuessHbStatus() {
  return requestWWW.post('hb/getPhotoUserInfo', {
    splid: store.state.liveId,
    token: store.state.token,
  });
}
// 设置猜红包模式
export function setGuessHbMod(pObj) {
  return requestWWW.post('hb/setGuessMoney', {
    splid: store.state.liveId,
    token: store.state.token,
    type: pObj.type,
    guess_money: pObj.guessMoney,
  });
}

// 获取h5接口调用token
export function getTokenH5() {
  return requestWWW.post('host/getSiyiToken', {
    token: store.state.token,
  });
}

// 获取礼物列表
export function getGiftList() {
  return request.post('hmGiftController/listGift7', {
    splid: store.state.liveId,
  });
}

// 发礼物广播
export function sendGiftMessage({
  miaoColor = '',
  sendType = '',
  giftId = '',
}) {
  return request.post('sendMsgController/liwuGo6', {
    splid: store.state.liveId,
    liwuId: giftId,
    content: '',
    miaoColor,
    send_type: sendType,
  });
}

// 编辑点歌
export function editMusicStatus({
  sort,
  heartWallId,
}) {
  return request.post('hmGiftController/editMusicStatus', {
    splid: store.state.liveId,
    heartWallId,
    sort,
  });
}

// 获取点歌列表
export function getMusicList() {
  return request.post('hmGiftController/getMusicList', {
    splid: store.state.liveId,
  });
}

/** 获取雀神大赛当前轮次剩余时间 */
export const getMajiangRoundInfo = () => {
  return request.post('newPlay/mjEnterGame', {
    splid: store.state.liveId,
  });
};

/** 获取活动信息
 * @param {String} key 要查询的信息的key
 */
export const reqGetActivityDetail = (key) => requestWWW.post('/sheZhi/getActivityDetail', {
  token: store.state.token,
  splid: store.state.liveId,
  key,
});

/** 开关内定抽奖测试
 * @param {boolean} isSwitchOn 开关状态
 */
export const reqSwitchArrangedLotteryTest = (isSwitchOn) => {
  return requestWWW.post(
    'sheZhi/switchArrangedLotteryTest',
    {
      token: store.state.token,
      splid: store.state.liveId,
      isSwitchOnArrangedLotteryTest: isSwitchOn ? '1' : '0',
    },
  );
};
</file>

<file path="src/api/indexV2.js">
import store from '@/store/index';
import request from '@/utils/request';
import requestWWW from '@/utils/requestWWW';

// 获取聊天记录
export function getChatMessage() {
  return request.get(
    `wxScan/getMsgInfo?splid=${store.state.liveId}&num=1&size=30`,
  );
}

// 获取礼物列表
export function getGiftList() {
  return request.post('hmGiftController/listGift7', {
    splid: store.state.liveId,
  });
}

/**
 * 发送指令给大屏
 * @param {'game_control'|'router_jump'|'global_control'} type 指令大类 (必要参数)
 * @param {string} action 具体参数 (必要参数)
 * @param {object} param 指令参数（可选）
 * @returns {Promise}
 */
export const sendInstrunction = ({ type, action, param }) => {
  const paramForAPI = {
    type,
    action,
  };
  if (param !== undefined) {
    paramForAPI.param = param;
  }
  // 固定注入uniqueId
  paramForAPI.uniqueId = Date.now();
  const paramForAPIStr = JSON.stringify(paramForAPI);
  return request.post('sendMsgController/toScreen', {
    splid: store.state.liveId,
    ykq_info: paramForAPIStr,
  });
};

// 重新发送礼物
export function resendGift({ miaoId, miaoLiwuId, splid = store.state.liveId }) {
  return requestWWW.post('huoDongHm/sendMsgToWs', {
    miaoId,
    miaoLiwuId,
    splid,
    token: store.state.token,
  });
}

// 新增：重新发送礼物消息到WS
/**
 * 重新发送礼物消息到WS
 * @param {Object} params
 * @param {string} params.splid 活动ID，默认取store.state.liveId
 * @param {string} params.userId 用户ID
 * @param {string} params.giftid 礼物ID
 * @param {string} params.miaoContent 礼物内容
 * @returns {Promise}
 */
export function resendGiftMsgToWs({ splid = store.state.liveId, userId, giftid, miaoContent }) {
  return requestWWW.get('huoDongHm/sendGiftMsgToWs', {
    params: {
      splid,
      userId,
      giftid,
      miaoContent,
      token: store.state.token,
    },
  });
}

// 重新发送超级弹幕
export function resendSuperDanmu({ heartWallId, splid = store.state.liveId }) {
  return requestWWW.post('huoDongHm/sendSuperMsgToWs', {
    heart_wall_id: heartWallId,
    splid,
    token: store.state.token,
  });
}

// 获取签到排行榜
export function getSignRankList() {
  return request.post('hmGiftController/findGiftRankListAll', {
    splid: store.state.liveId,
  });
}

/**
 * 获取活动信息（余额和人数）
 */
export function getSplInfoNe() {
  return requestWWW.get('newHuoDongHm/getSplInfoNe', {
    params: {
      splid: store.state.liveId,
      token: store.state.token,
    },
  });
}

/**
 * 拉黑用户
 * @param {Object} params
 * @param {string} params.splid 活动ID，默认取store.state.liveId
 * @param {'1'|'0'} params.type 拉黑类型，'1'为拉黑，'0'为取消拉黑
 * @param {string} params.userId 用户ID
 * @returns {Promise}
 */
export function addBlackList({ splid = store.state.liveId, type, userId }) {
  return requestWWW.post('zhongJiang/addBlackList', {
    splid,
    type,
    userId,
    token: store.state.token,
  });
}
</file>

<file path="src/api/sendCode.js">
import store from '@/store/index';
import request from '@/utils/request';

/**
 * 发送指令给大屏
 * @param {Object} pObj 请求参数
 * @param {string} pObj.code 指令码
 * @param {any} [pObj.param] 指令参数（可选）
 * @returns {Promise}
 */
const sendInstrunction = (pObj) => {
  const tmpParam = {
    code: pObj.code,
    param: pObj.param ?? '',
    uniqueId: Date.now(),
  };
  const tmpParamStr = JSON.stringify(tmpParam);
  return request.post('sendMsgController/toScreen', {
    splid: store.state.liveId,
    ykq_info: tmpParamStr,
  });
};
export default sendInstrunction;
</file>

<file path="src/App.vue">
<template>
  <div id="app">
    <router-view />
  </div>
</template>
<script>
import getLateInstruction from '@/api/getLateInstruction';
import sendInstrunction from '@/api/sendCode';
import { CONTROL_CODE } from '@/assets/constant/index';
import { getHash, getQueryString } from '@/utils/index';
import { globalHandleMessage, handleActionMessage } from '@/utils/websocket/handleMessage';
import { initH5Ws, initWs } from '@/utils/websocket/v2/index';
import { mapActions } from 'vuex';
import { screenMessenger } from './modules/screenMessenger';

export default {
  name: 'app',
  created() {
    const storedVersion = localStorage.getItem('version');
    if (storedVersion) {
      if (storedVersion === 'old') {
        // 路由守卫会处理重定向，这里只管初始化
        this.initOld();
      } else { // storedVersion === 'new'
        // 路由守卫会处理重定向，这里只管初始化
        this.initNew();
      }
    } else {
      // 首次访问或无记录，根据当前 hash 判断
      const hash = getHash();
      if (hash === 'controllerV2') {
        this.initOld(); // controllerV2 走旧版
      } else {
        this.initNew(); // controller 走新版
      }
    }
  },
  methods: {
    ...mapActions(['getRoutesAndSetMenu']),
    /**
     * 旧版遥控器初始化逻辑
     */
    initOld() {
      console.log('旧版初始化啦!');
      this.initLiveId();
      this.getRoutesAndSetMenu().then(() => {
        this.getLateInstrunction();
      });
      if (this.isNoparamAccess) {
        return;
      }
      screenMessenger.connect({
        url: `${process.env.VUE_APP_CHAT_API}haimiao?splid=${this.$store.state.liveId}&kind=remoteControl`,
      });
      screenMessenger.on(globalHandleMessage);
    },
    async initNew() {
      console.log('新版初始化啦!');
      this.initLiveId();
      if (this.isNoparamAccess) {
        // 如果缺少必要参数，则返回
        return;
      }
      await this.getRoutesAndSetMenu();
      // 建立h5的ws链接(用于获取聊天消息)
      initH5Ws();
      // 建立主ws链接
      initWs();
    },
    initLiveId() {
      const liveId = getQueryString('liveid');
      const liveIdStorage = sessionStorage.getItem('liveId');
      const token = getQueryString('token');
      const tokenStorage = sessionStorage.getItem('token') || localStorage.getItem('token');
      if (liveId) {
        sessionStorage.setItem('liveId', liveId);
        this.$store.commit('initLiveId', liveId);
      } else if (liveIdStorage) {
        this.$store.commit('initLiveId', liveIdStorage);
      } else {
        this.isNoparamAccess = true;
        this.$toast.fail('缺少活动id!');
      }
      let actualToken = ''; // 定义一个变量来存储最终的有效token
      if (token && token !== 'null' && token !== 'undefined') {
        // 明确排除 'null' 'undefined' 字符串
        sessionStorage.setItem('token', token);
        actualToken = token;
      } else if (tokenStorage && tokenStorage !== 'null' && tokenStorage !== 'undefined') {
        // 同样排除
        actualToken = tokenStorage;
      }

      // 无论来源如何，最终赋值给 store
      if (actualToken) {
        // 只有当实际token非空时才提交
        this.$store.commit('initToken', actualToken);
      } else {
        // 如果最终 actualToken 仍然是空的，则表示 token 缺失或无效
        console.error('Error: Token is missing or invalid after parsing. Cannot establish WebSocket connection.');
        this.$toast.fail('缺少或认证信息无效！');
        this.isNoparamAccess = true; // 阻止后续WS连接
      }
      this.$store.dispatch('initTokenH5');
    },
    getLateInstrunction() {
      getLateInstruction()
        .then((res) => {
          console.log(res);
          handleActionMessage(res.data.info);
          // 特殊场景下的处理
          // this.specialHandleMessage(res.data.info);
        })
        .catch((err) => {
          console.log(err);
        });
    },
    specialHandleMessage(message) {
      // 如果最近一条指令包含抽奖列表信息，则需要刷新页面
      // 目的：保证遥控器的激活奖项和大屏保持一致
      if (message.includes('prizeName') && message.includes('5034')) {
        sendInstrunction({
          code: CONTROL_CODE.OTHERS,
          param: { type: 'refresh' },
        });
      }
    },
  },
};
</script>
</file>

<file path="src/assets/constant/globalControlMenu.js">
import freeGiftIcon from '../imageV2/free-gift_icon.png';
import refreshIcon from '../imageV2/refresh_icon.png';
import giftRankIcon from '../imageV2/gift-rank_icon.png';
import danmuIcon from '../imageV2/danmu_icon.png';
import voiceIcon from '../imageV2/voice_icon.png';
// import fullscreenIcon from '../imageV2/fullscreen_icon.png';
import qrcodeIcon from '../imageV2/qrcode_icon.png';
import zfWallIcon from '../imageV2/zf-wall_icon.png';
import xiemuIcon from '../imageV2/xiemu_icon.png';
import photoFixIcon from '../imageV2/photo-fix_icon.png';
import videoPlayIcon from '../imageV2/video-play_icon.png';

const globalControlMenu = [
  { icon: freeGiftIcon, name: '免费礼物', id: 'freeGift' },
  { icon: refreshIcon, name: '刷新', id: 'refresh' },
  { icon: giftRankIcon, name: '礼物榜', id: 'giftRank' },
  { icon: danmuIcon, name: '弹幕', id: 'danmu' },
  { icon: voiceIcon, name: '声音', id: 'voice' },
  // { icon: fullscreenIcon, name: '全屏', id: 'fullscreen' },
  { icon: qrcodeIcon, name: '二维码', id: 'qrcode' },
  { icon: zfWallIcon, name: '祝福榜', id: 'wishWall' },
  { icon: xiemuIcon, name: '谢幕', id: 'curtainCall' },
  { icon: photoFixIcon, name: '画面定格', id: 'photoFix', meta: { path: '/fixedScreen' }, component: 'MultiMedia' },
  { icon: videoPlayIcon, name: '播放视频', id: 'videoPlay', meta: { path: '/videoPlayer' }, component: 'MultiMedia' },
];

export default globalControlMenu;
</file>

<file path="src/assets/constant/host.js">
export const CHAT_HOST = process.env.VUE_APP_CHAT_API;
export const API_HOST = process.env.VUE_APP_BASE_API;
</file>

<file path="src/assets/constant/index.js">
import { generateMenuFromRouteMain } from '../../utils';

// 根据一级菜单id查找menu
export const getMenuInfoByfLevelId = (pId, userRoutes) => {
  let targetObj = null;
  const menu = generateMenuFromRouteMain(userRoutes);
  const menuLen = menu.length;
  for (let i = 0; i < menuLen; i += 1) {
    if (pId === menu[i].id) {
      targetObj = {
        id: menu[i].id,
        name: menu[i].name,
        icon: menu[i].icon,
        bg: menu[i].bg,
        subMenus: menu[i].subMenus,
      };
      return targetObj;
    }
    const submenLen = menu[i].subMenus.length;
    for (let j = 0; j < submenLen; j += 1) {
      if (menu[i].subMenus[j].id === pId) {
        targetObj = {
          id: menu[i].subMenus[j].id,
          name: menu[i].subMenus[j].name,
          icon: menu[i].icon,
          bg: menu[i].bg,
          subMenus: menu[i].subMenus,
        };
        return targetObj;
      }
    }
  }
  return targetObj;
};

/** 发送给大屏的控制指令，在进行遥控器相关功能重构后，所有游戏操作均使用这里的指令，如非必要请勿添加新的指令 */
export const CONTROL_CODE = {
  /** 路由跳转 */
  ROUTER_JUMP: 'router_jump',
  /** 游戏开始 */
  GAME_START: 'game_start',
  /** 游戏结束 */
  GAME_END: 'game_end',
  /** 游戏重玩 */
  GAME_REPLAY: 'game_replay',
  /** 游戏控制，临时设立用于处理不属于开始、结束、重玩的情况 */
  GAME_CONTROL: 'game_control',
  /** 大屏切换游戏 */
  ON_GAME_CHANGE: 'on_game_change',
  /** 其他控制指令 */
  OTHERS: 'others',
};

// export const ON_CLICK_HOME_MENU_ITEM = 'on_click_home_menu_item';

// export const HOME_MENU_ITEM = {
//   /** 签到 */
//   SIGN: 'sign',
//   /** 幸运夺宝 */
//   LUCKY_TREASURE: 'luckyTreasure',
//   /** 红包雨 */
//   RED_PACKET_RAIN: 'redPacketRain',
//   /** 摇一摇 */
//   SHAKE: 'shake',
//   /** 划一划 */
//   SWIPE: 'swipe',
//   /** 开宝 */
//   OPEN_TREASURE: 'openTreasure',
//   /** 抽奖 */
//   LOTTERY: 'lottery',
//   /** 小游戏 */
//   MINI_GAME: 'miniGame',
// };

// 0000~5000为遥控器向大屏发送的指令
export const CODE = {
  SIGN: '0000', // 签到(默认签到)
  HOME: '0001', // 首页
  QRCODE: '0002', // 二维码
  AUDIO: '0003', // 音乐
  DANMU: '0004', // 弹幕
  MSGWALL: '0005', // 祝福榜
  SIGNBOOK: '0006', // 签到簿
  SIGNBUBBLE: '0007', // 手写签到
  XYDB: '0008', // 幸运夺宝(默认转一转)
  ZYZSTARTGAME: '0009', // 转一转开始游戏
  ZYZENDGAME: '0010', // 转一转结束游戏
  ZYZREPLAY: '0011', // 转一转再玩一次
  NYN: '0012', // 扭一扭
  NYNSTARTGAME: '0013', // 扭一扭开始游戏
  NYNENDGAME: '0014', // 扭一扭结束游戏
  NYNREPLAY: '0015', // 扭一扭再玩一次
  HBY: '0016', // 红包雨(摇红包)
  HBYSET: '0017', // 红包雨设置金额和个数
  HBYSTARTGAME: '0018', // 红包雨开始游戏
  HBYENDGAME: '0019', // 红包雨结束游戏
  HBYREPLAY: '0020', // 红包雨再玩一次
  CLICKHB: '0021', // 点红包
  SHAKE: '0022', // 摇一摇
  SHAKESTARTGAME: '0023', // 摇一摇开始游戏
  SHAKEENDGAME: '0024', // 摇一摇结束游戏
  SHAKEREPLAY: '0025', // 摇一摇再玩一次
  HYH: '0026', // 划一划(默认数钞票)
  HYHSTARTGAME: '0027', // 划一划开始游戏
  HYHENDGAME: '0028', // 划一划结束游戏
  HYHREPLAY: '0029', // 划一划再玩一次
  CUTFRUIT: '0030', // 切水果
  KBX: '0031', // 开宝(默认开宝箱)
  KBXCHOOSETYPE: '0032', // 开宝箱选择类型
  KBXSTARTGAME: '0033', // 开宝箱开始游戏
  KBXBREAKALL: '0034', // 开宝箱一键打开
  KBXCHOOSEBOX: '0035', // 开宝箱选择开某一个宝箱
  KBXREPLAY: '0036', // 开宝箱再玩一次
  KBXENDGAME: '0037', // 开宝箱结束
  HBWALL: '0038', // 红包墙
  HBWALLCHOOSETYPE: '0039', // 红包墙选择类型
  HBWALLSTARTGAME: '0040', // 红包墙开始游戏
  HBWALLBREAKALL: '0041', // 红包墙一键打开
  HBWALLCHOOSEHB: '0042', // 红包墙选择开某一个红包
  HBWALLREPLAY: '0043', // 红包墙再玩一次
  HBWALLENDGAME: '0044', // 红包墙结束
  LOTTERY: '0045', // 抽奖(默认3D抽奖)
  LOTTERYPREV: '0046', // 3D抽奖 上一个奖项
  LOTTERYNEXT: '0047', // 3D抽奖 下一个奖项
  LOTTERYNUN: '0048', // 3D抽奖 一次抽取人数
  LOTTERYSTART: '0049', // 3D抽奖 开始抽奖
  LOTTERYRESET: '0050', // 3D抽奖 重置抽奖
  LOTTERYSTOP: '0051', // 3D抽奖 停止抽奖
  LOTTERYPRIZEPREV: '0052', // 3D抽奖 获奖名单上一页
  LOTTERYPRIZENEXT: '0053', // 3D抽奖 获奖名单下一页
  LOTTERYISPERSON: '0054', // 3D抽奖 手动停止抽奖
  LOTTERYSHEETCLOSE: '0055', // 名单抽奖 关闭中奖名单或中奖结果
  LOTTERYSHEETOPEN: '0056', // 名单抽奖 打开名单
  MINIGAME: '0057', // 小游戏
  MINIGAME_GXCMX: '0058', // 搞笑猜明星
  MINIGAME_CMX: '0059', // 猜明星
  MINIGAME_KXCCY: '0060', // 开心猜成语
  MINIGAME_CCY: '0061', // 猜成语
  MINIGAME_VOTE: '0062', // 投票
  MINIGAME_CYX: '0063', // 猜英雄
  MINIGAME_CGM: '0064', // 猜歌名
  MINIGAME_HYJJ: '0065', // 火眼金睛
  MINIGAME_QSDS: '0066', // 雀神大赛
  MINIGAME_SCDT: '0067', // 诗词答题
  MINIGAME_PREV: '0068', // 小游戏上一题
  MINIGAME_NEXT: '0069', // 小游戏下一题
  MINIGAME_TIP: '0070', // 小游戏提示
  MINIGAME_ANS: '0071', // 小游戏答案
  MINIGAME_START: '0072', // 小游戏开始
  VOTE_CLEAR: '0073', // 投票清空上一轮
  VOTE_SAVE: '0074', // 投票保留上一轮
  VOTE_END: '0075', // 投票结束游戏
  QRCODEWIDTH: '0076', // 二维码设置宽度
  QRCODEHEIGHT: '0077', // 二维码设置高度
  QRCODEX: '0078', // 二维码设置x坐标
  QRCODEY: '0079', // 二维码设置y坐标
  AUTODISPLAY: '0080', // 大屏自动展示功能
  AUTODISPLAYEND: '0081', // 大屏停止自动展示功能
  JUMPBONE: '0082', // 跳一跳
  GIVEMARK: '0083', // 评分
  GIVEMARK_SAVEPREV: '0084', // 保存上一轮数据
  GIVEMARK_CLEARPREV: '0085', // 清空上一轮数据
  GIVEMARK_TONEXT: '0086', // 下一位
  GUESSHB: '0087', // 猜红包
  GUESSHB_STARTGAME: '0088', // 猜红包开始游戏
  GUESSHB_NEXT: '0089', // 猜红包下一轮/揭晓
  GUESSHB_END: '0090', // 猜红包结束
  HYH2: '0091', // 数钞票新
  XIEMU: '0092', // 打开谢幕
  // 93- 96 进场特效
  PIGOUT: '0097', // 狼吞虎咽
  CLICKTIGER: '0098', // 武松打虎
  ZFDM: '0099', // 争分夺秒
  ZFDMCHOOSETYPE: '0100', // 争分夺秒选择类型
  ZFDMENDGAME: '0101', // 争分夺秒结束游戏
  ZFDMREPLAYGAME: '0102', // 争分夺秒再玩一次
  ZFDMSTARTGAME: '0103', // 争分夺秒开始游戏
  SZF: '0104', // 送祝福
  SZFCHOOSETIME: '0105', // 送祝福选择时间
  SZFENDGAME: '0106', // 送祝福结束游戏
  SZFREPLAYGAME: '0107', // 送祝福再玩一次
  VIDEOPLAYOPEN: '0108', // 打开视频播放
  FIXEDSCREENOPEN: '0109', // 打开定屏
  MULTIMEDIAPLAY: '0110', // 播放某一个视频/定屏
  PLAYFOOTBALL: '0111', // 谁是射手王
  LUCKYWHEEL: '0112', // 幸运小转盘
  LUCKYWHEELSTARTGAME: '0113', // 幸运小转盘开始游戏
  LUCKYWHEELENDGAME: '0114', // 幸运小转盘结束游戏
  LUCKYWHEELREPLAY: '0115', // 幸运小转盘再玩一次
  CARDANSWER: '0116', // 卡牌抽奖答案
  STARTRITE: '0117', // 启动仪式
  STARTRITESTARTGAME: '0118', // 启动仪式开始游戏
  STARTRITEENDGAME: '0119', // 启动仪式结束游戏
  STARTRITEREPLAY: '0120', // 启动仪式再玩一次
  ORDERSONG: '0121', // 点歌
  ORDERSONGUPDATE: '0122', // 点歌更新数据
  ENTERAOTEMAN: '0123', // 进入奥特曼页面
  MINIGAME_CWZYS: '0124', // 猜文字颜色
  GUESSGENERALITY: '0125', // 进入猜电影页面
  GIVEMARK_TOPREV: '0126', // 评分上一位
  GIVEMARK_STARTGIVEMARK: '0127', // 查看评分
  GIVEMARK_CHECKSUMSCORE: '0128', // 查看评分的总分
  MINIGAME_QSDSNEW: '0129', // 打开雀神大赛新版
  MINIGAME_QSDSNEW_NEXT: '0130', // 雀神大赛新版下一题
  MINIGAME_HANZI: '0131', // 打开神奇的汉字
  MINIGAME_HAPPYQA: '0132', // 打开开心问答
  ALLHBY: '0133', // 全民红包雨(摇红包)
  GUESSSPEECH: '0134', // 进入猜台词页面
  MINIGAME_QSDS_ANSWER_NUM: '0135', // 设置大屏下一道题目的答案张数
  SHOUTHB_EXPOSE_NEXT: '0136', // 喊红包揭晓、下一个控制
  MINIGAME_QSDS_SEND_QUESTION: '0137', // 设置雀神大赛大屏下一道题目的内容
  MINIGAME_CWZYS_SEND_QUESTION: '0138', // 设置说文字颜色的下一道题目的内容
  GOLDENSNAkE: '0139', // 金蛇纳福
  LUCKYSNAKE: '0140', // 福蛇贺岁
  MINIGAME_PLAYPOKER: '0141', // 打开扑克残局
  MINIGAME_PLAYPOKER_START: '0142', // 开始或重新开始扑克游戏
  MINIGAME_PLAYPOKER_PRODUCE: '0143', // 扑克游戏遥控器准备出牌
  MINIGAME_PLAYPOKER_YAOBUQI: '0144', // 扑克游戏遥控器要不起
};
</file>

<file path="src/assets/constant/pageInteractionMenu.js">
const pageInteractionMenu = [
  {
    name: '扫码签到',
    id: 'scanSignIn',
    children: [
      {
        name: '3D签到',
        id: '3dSign',
        component: 'Sign',
        meta: { path: '/sign', signType: '01' },
      },
      {
        name: '签到簿',
        id: 'signBook',
        component: 'Sign',
        meta: { path: '/sign', signType: '02' },
      },
      {
        name: '手写签到',
        id: 'handwrittenSignIn',
        component: 'Sign',
        meta: { path: '/sign', signType: '03' },
      },
      {
        name: '启动仪式',
        id: 'openingCeremony',
        component: 'CommonGame',
        meta: { path: '/sign', signType: '04' },
      },
      {
        name: '签婚书',
        id: 'signInBook',
        component: 'SignWeddingBook',
        meta: { path: '/signWeddingBook' },
      },
    ],
  },
  {
    name: '幸运抽奖',
    id: 'luckyDraw',
    children: [
      {
        name: '3D抽奖',
        id: '3dDraw',
        component: 'SignLottery',
        meta: {
          path: '/threeDLottery',
        },
      },
      {
        name: '名单抽奖',
        id: 'listDraw',
        component: 'SheetLottery',
        meta: { path: '/listLottery' },
      },
      {
        name: '巨幕抽奖',
        id: 'giantWheelDraw',
        component: 'SignLottery',
        meta: { path: '/bigScreenLottery' },
      },
      {
        name: '地球抽奖',
        id: 'earthDraw',
        component: 'SignLottery',
        meta: { path: '/earthLottery' },
      },
      {
        name: '图片抽奖',
        id: 'imageDraw',
        component: 'PictureLottery',
        meta: { path: '/pictureLottery' },
      },
      {
        name: '卡牌抽奖',
        id: 'cardDraw',
        component: 'CardLottery',
        meta: { path: '/cardDraw' },
      },
      {
        name: '转盘抽奖',
        id: 'turntableDraw',
        component: 'WheelLottery',
        meta: { path: '/wheelLottery' },
      },
      {
        name: '新名单抽奖',
        id: 'newListDraw',
        component: 'SheetLottery',
        meta: { path: '/listLotteryParticle' },
      },
      {
        name: '弾幕抽奖',
        id: 'barrageDraw',
        component: 'SignLottery',
        meta: { path: '/danmuLottery' },
      },
      {
        name: '抽奖箱抽奖',
        id: 'lotteryBoxDraw',
        component: 'SignLottery',
        meta: { path: '/boxLottery' },
      },
      {
        name: '许愿树抽奖',
        id: 'wishTreeDraw',
        component: 'SignLottery',
        meta: {
          path: '/wishTreeLottery',
        },
      },
    ],
  },
  {
    name: '红包游戏',
    id: 'redEnvelopeGame',
    children: [
      {
        name: '摇红包',
        id: 'shakeRedEnvelope',
        component: 'Hby',
        meta: { path: '/hby' },
      },
      {
        name: '点红包',
        id: 'clickRedEnvelope',
        component: 'Hby',
        meta: { path: '/clickHb' },
      },
      {
        name: '全民红包雨',
        id: 'nationalRedEnvelopeRain',
        component: 'Hby',
        meta: { path: '/hbyWeddingV2' },
      },
      {
        name: '喊红包',
        id: 'shoutRedEnvelope',
        component: 'Hby',
        meta: { path: '/shoutHb' },
      },
      {
        name: '幸运小转盘',
        id: 'luckyWheel',
        component: 'CommonGame',
        meta: { path: '/luckyWheel' },
      },
      {
        name: '争分夺秒',
        id: 'zfdm',
        component: 'Zfdm',
        meta: { path: '/zfdm' },
      },
      {
        name: '转一转',
        id: 'zyz',
        component: 'CommonGame',
        meta: { path: '/zyz' },
      },
      {
        name: '扭一扭',
        id: 'nyn',
        component: 'CommonGame',
        meta: { path: '/nyn' },
      },
      { name: '开宝箱', id: 'kbx', component: 'Kbx', meta: { path: '/kbx' } },
      {
        name: '红包墙',
        id: 'hbWall',
        component: 'HbWall',
        meta: { path: '/hbWall' },
      },
      {
        name: '高级开宝箱',
        id: 'superKbx',
        component: 'Kbx',
        meta: { path: '/superKbx' },
      },
    ],
  },
  {
    name: '互动游戏',
    id: 'interactiveGame',
    children: [
      {
        name: '摇一摇类',
        id: 'shakeGame',
        children: [
          {
            name: '猴子爬树',
            id: 'monkeyClimbingTree',
            component: 'CommonGame',
            meta: { path: '/monkeyShake' },
          },
          {
            name: '赛龙舟',
            id: 'dragonBoatRace',
            component: 'CommonGame',
            meta: { path: '/dragonBoatTeamShake' },
          },
          {
            name: '婚车摇一摇',
            id: 'weddingCarShake',
            component: 'CommonGame',
            meta: { path: '/weddingCarShake' },
          },
          {
            name: '都市赛车',
            id: 'cityCarRace',
            component: 'CommonGame',
            meta: { path: '/cityCarShake' },
          },
          {
            name: '抬花轿',
            id: 'carryWeddingSedan',
            component: 'CommonGame',
            meta: { path: '/sedanChairShake' },
          },
          {
            name: '滑雪大冒险',
            id: 'tigerYearSkiing',
            component: 'CommonGame',
            meta: { path: '/tigerShake' },
          },
          {
            name: '谁最牛',
            id: 'whoIsTheBest',
            component: 'CommonGame',
            meta: { path: '/cattleShake' },
          },
          {
            name: '飞龙在天',
            id: 'flyingDragon',
            component: 'CommonGame',
            meta: { path: '/dragonInTheSky' },
          },
          {
            name: '兔飞猛进',
            id: 'rabbitFlyingForward',
            component: 'CommonGame',
            meta: { path: '/rubbitShake' },
          },
          {
            name: '福蛇贺岁',
            id: 'fortuneSnake',
            component: 'CommonGame',
            meta: { path: '/luckySnake' },
          },
          {
            name: '疯狂游泳',
            id: 'crazySwimming',
            component: 'CommonGame',
            meta: { path: '/swimShake' },
          },
          {
            name: '追新娘',
            id: 'chaseBride',
            component: 'CommonGame',
            meta: { path: '/husWifeShake' },
          },
          {
            name: '摇钱树',
            id: 'moneyTreeShake',
            component: 'CommonGame',
            meta: { path: '/moneyTreeShake' },
          },
        ],
      },
      {
        name: '划一划类',
        id: 'drawGame',
        children: [
          {
            name: '数钞票',
            id: 'mouseCashTicket',
            component: 'CommonGame',
            meta: { path: '/countMoney' },
          },
          {
            name: '切水果',
            id: 'cutFruit',
            component: 'CommonGame',
            meta: { path: '/cutFruit' },
          },
          {
            name: '兔子投篮',
            id: 'rabbitBasketball',
            component: 'CommonGame',
            meta: { path: '/basketballShoot' },
          },
          {
            name: '武松打虎',
            id: 'wusongFightTiger',
            component: 'CommonGame',
            meta: { path: '/clickTiger' },
          },
          {
            name: '数钞票(新)',
            id: 'countCashNew',
            component: 'CommonGame',
            meta: { path: '/countMoneyVersionTwo' },
          },
          {
            name: '狼吞虎咽',
            id: 'wolfSwallow',
            component: 'CommonGame',
            meta: { path: '/pigOut' },
          },
          {
            name: '游龙戏珠',
            id: 'swimmingDragon',
            component: 'CommonGame',
            meta: { path: '/dragonPlayBead' },
          },
          {
            name: '金蛇纳福',
            id: 'goldenSnake',
            component: 'CommonGame',
            meta: { path: '/goldenSnake' },
          },
          {
            name: '谁是射手王',
            id: 'whoIsTheShooter',
            component: 'CommonGame',
            meta: { path: '/playFootball' },
          },
          {
            name: '放鞭炮',
            id: 'playFireworks',
            component: 'CommonGame',
            meta: { path: '/playFireworks' },
          },
        ],
      },
      {
        name: '扫码参与',
        id: 'scanJoin',
        children: [
          {
            name: '互动雀神大赛',
            id: 'interactiveGodCompetition',
            component: 'QaGame',
            meta: { path: '/mahjong' },
          },
          {
            name: '猜灯谜',
            id: 'guessRiddle',
            component: 'QaGame',
            meta: { path: '/guessLanternRiddle' },
          },
          {
            name: '开心问答',
            id: 'happyQnA',
            component: 'QaGame',
            meta: { path: '/happyQA' },
          },
          {
            name: '跳一跳',
            id: 'jump',
            component: 'CommonGame',
            meta: { path: '/jumpBone' },
          },
          {
            name: '投票',
            id: 'vote',
            component: 'vote',
            meta: { path: '/vote' },
          },
          {
            name: '评分',
            id: 'rating',
            component: 'giveMark',
            meta: { path: '/giveMark' },
          },
          {
            name: '送祝福',
            id: 'sendBless',
            component: 'SendBless',
            meta: { path: '/sendGift' },
          },
        ],
      },
      {
        name: '非扫码参与',
        id: 'nonScanJoin',
        children: [
          {
            name: '雀神大赛',
            id: 'godCompetition',
            meta: { path: '/mahjongV2' },
            component: 'QaMahjong',
          },
          {
            name: '说颜色',
            id: 'guessTextColor',
            component: 'guessTextColor',
            meta: { path: '/guessTextColor' },
          },
          {
            name: '猜动画',
            id: 'guessAnimation',
            component: 'GuessGame',
            meta: { path: '/guessAni' },
          },
          {
            name: '猜电影',
            id: 'guessMovie',
            component: 'GuessGame',
            meta: { path: '/guessGenerality' },
          },
          {
            name: '猜明星',
            id: 'guessStar',
            component: 'GuessGame',
            meta: { path: '/guessStarCommon' },
          },
          {
            name: '品牌达人',
            id: 'guessBrand',
            component: 'GuessGame',
            meta: { path: '/guessBrand' },
          },
          {
            name: '搞笑猜明星',
            id: 'funnyGuessStar',
            component: 'GuessGame',
            meta: { path: '/guessStar' },
          },
          {
            name: '台词模仿秀',
            id: 'guessSpeech',
            component: 'GuessGame',
            meta: { path: '/guessSpeech' },
          },
          {
            name: '猜成语',
            id: 'guessIdioms',
            component: 'GuessGame',
            meta: { path: '/guessIdiomCommon' },
          },
          {
            name: '你划我猜',
            id: 'drawGuess',
            component: 'GestureRiddle',
            meta: { path: '/gestureRiddle' },
          },
          {
            name: '看图识景',
            id: 'guessLandmarks',
            component: 'GuessGame',
            meta: { path: '/guessPicture' },
          },
          {
            name: '猜英雄',
            id: 'guessHero',
            component: 'GuessGame',
            meta: { path: '/guessHero' },
          },
          {
            name: '猜奥特曼',
            id: 'aoteman',
            component: 'GuessGame',
            meta: { path: '/aoteman' },
          },
          {
            name: '开心猜成语',
            id: 'happyGuessIdioms',
            component: 'GuessGame',
            meta: { path: '/guessIdiom' },
          },
          {
            name: '诗词答题',
            id: 'poetryQuiz',
            component: 'GuessGame',
            meta: { path: '/poem' },
          },
          {
            name: '猜歌名',
            id: 'guessSongName',
            component: 'GuessGame',
            meta: { path: '/guessSong' },
          },
          {
            name: '神奇的汉字',
            id: 'hanzi',
            component: 'QaGame',
            meta: { path: '/hanzi' },
          },
          {
            name: '火眼金睛',
            id: 'guessStarBySteps',
            component: 'GuessGame',
            meta: { path: '/guessStarBySteps' },
          },
          {
            name: '点歌',
            id: 'orderSong',
            component: 'OrderSong',
            meta: { path: '/orderSong' },
          },
          {
            name: '断句大挑战',
            id: 'guessBreakText',
            component: 'GuessGame',
            meta: { path: '/guessBreakText' },
          },
          {
            name: '谐音梗',
            id: 'guessBreakText',
            component: 'GuessGame',
            meta: { path: '/guessHarmony' },
          },
        ],
      },
    ],
  },
];

export default pageInteractionMenu;
</file>

<file path="src/assets/fonts/iconfont.css">
@font-face {
  font-family: "iconfont"; /* Project id 4940681 */
  src: url('iconfont.ttf?t=1749459229680') format('truetype');
}

.iconfont {
  font-family: "iconfont" !important;
  font-size: 16px;
  font-style: normal;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.icon-bofang:before {
  content: "\e613";
}

.icon-zanting:before {
  content: "\e662";
}

.icon-diange:before {
  content: "\e6ee";
}

.icon-fanhui:before {
  content: "\e637";
}

.icon-close:before {
  content: "\e7fc";
}

.icon-lianxiren:before {
  content: "\e654";
}

.icon-bangdan:before {
  content: "\e6af";
}

.icon-hongbao:before {
  content: "\e8b0";
}

.icon-arrow-down:before {
  content: "\e607";
}
</file>

<file path="src/assets/styles/public.css">
.publicHvCenter {
    display: flex;
    justify-content: center;
    align-items: center;
}

.publicHCenter {
    display: flex;
    justify-content: center;
}

.publicVCenter {
    display: flex;
    align-items: center;
}

.van-toast {
    width: auto;
    font-size: 32px;
    padding: 15px 25px;
    line-height: 48px;
}
.van-toast__icon {
    font-size: 48px;
}
.van-dialog {
    width: 65vw;
    font-size: 4.2vw;
}
 .van-dialog__message--has-title {
    padding-top: 5.2vw;
}
.van-dialog__message {
    font-size: 3.8vw;
}
.van-dialog__cancel,.van-dialog__confirm {
    height: 10vw;
}
.van-button__content {
    font-size: 3.8vw;
}
html,body,#app {
    height: 100%;
    background-color: #fff;
}
div {
    box-sizing: border-box;
}

/* 自定义加入黑名单确认弹窗的样式 */
.custom-blacklist-dialog {
    width: 77vw;
    border-radius: 22px;
}

.custom-blacklist-dialog > .van-dialog__content > .van-dialog__message {
    font-size: 28px;
    font-weight: 500;
}
.custom-blacklist-dialog > .van-dialog__content {
    height: 132px;
}
.custom-blacklist-dialog [class*=van-hairline]:after {
    border: none;
}
.custom-blacklist-dialog > .van-dialog__content > .van-dialog__message {
    padding: 3.467vw 1.6vw;
}
.custom-blacklist-dialog > .van-dialog__footer {
    padding-bottom: 43px;
}

.custom-blacklist-dialog > .van-dialog__footer > .van-button > .van-button__content > .van-button__text{
    width: 211px;
    height: 75px;
    background: #E6E4E4;
    border-radius: 19px 19px 19px 19px;
    display: block;
    text-align: center;
    line-height: 75px;
    font-size: 34px;
    color: #4D4E50;
    font-weight: 500;
}

.custom-blacklist-dialog > .van-dialog__footer > .van-dialog__confirm> .van-button__content > .van-button__text{
    background: #5998FF;
    color: #fff;
}
</file>

<file path="src/components/funcButton.vue">
<template>
  <div
    class="funcButton publicHvCenter"
    :style="{ width: bWidth, height: bHeight, fontSize: bFontSize }"
    @click="handleClick"
    :class="{ active: isBtnActive}"
  >
    <slot></slot>
  </div>
</template>
<script>
import { timeoutTask } from '@/utils/index';

export default {
  name: 'funcButton',
  computed: {},
  data() {
    return {
      isBtnActive: false,
    };
  },
  props: {
    bWidth: {
      type: String,
      default: '32vw',
    },
    bHeight: {
      type: String,
      default: '10.67vw',
    },
    bFontSize: {
      type: String,
      default: '4.27vw',
    },
  },
  created() {},
  mounted() {},
  methods: {
    handleClick() {
      this.isBtnActive = true;
      timeoutTask(() => {
        this.isBtnActive = false;
        this.$emit('clickEvent');
      }, 200);
    },
  },
};
</script>
<style lang="less" scoped>
.funcButton {
  margin-bottom: 30px;
  border-radius: 28px;
  color: #fff;
  border: 2px solid #fff;
  transition: all 0.2s linear;
  &.active {
    background-color: rgba(255, 255, 255, 0.6);
  }
}
</style>
</file>

<file path="src/components/gift.vue">
<template>
  <div class="giftBox">
    <div class="nav publicVCenter">
      <div
        class="navItem"
        :class="{ active: giftNavId === item.id }"
        v-for="item in giftTitleList"
        :key="item.id"
        @click="chooseGiftNav(item.id)"
      >
        {{ item.name }}
      </div>
    </div>
    <div class="giftListWrap">
      <van-swipe class="gift-swipe" :loop="false" indicator-color="white" ref="swiper" @change="onChange">
        <van-swipe-item class="page" :key="index" v-for="(group, index) in giftList">
          <div v-for="gift in group" class="item publicHvCenter" :key="gift.giftconst" @click="chooseGiftType(gift.giftconst)">
            <img class="giftImg" :src="gift.imglink" :class="{ active: gift.giftconst === currentGiftType }" />
            <div class="name" v-show="gift.giftconst !== currentGiftType">{{ gift.giftname }}</div>
            <div class="price publicHvCenter" v-show="gift.giftprice" :class="{ active: gift.giftconst === currentGiftType }">
              <img src="@/assets/image/diamond.png" class="unit" />{{ gift.giftprice }}
            </div>
            <div class="activeBox" v-show="gift.giftconst === currentGiftType">
              <div class="sendBtn publicHvCenter" @click="send">赠送</div>
            </div>
          </div>
        </van-swipe-item>
      </van-swipe>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import { sendGiftMessage } from '@/api/index';

export default {
  name: 'gift',
  computed: {
    ...mapState({
      giftTitleList: (state) => state.giftTitleList,
      giftList: (state) => state.giftList,
      giftListAll: (state) => state.giftListAll,
    }),
  },
  data() {
    return {
      giftNavId: 'list1',
      currentGiftType: '',
    };
  },
  components: {},
  created() {},
  methods: {
    chooseGiftNav(g) {
      this.giftNavId = g;
      const targetIndex = this.giftTitleList.findIndex((item) => item.id === this.giftNavId);
      this.$refs.swiper.swipeTo(targetIndex);
    },
    chooseGiftType(g) {
      this.currentGiftType = g;
    },
    onChange(index) {
      this.giftNavId = this.giftTitleList[index].id;
    },
    send() {
      sendGiftMessage({
        miaoColor: 'freeGift',
        sendType: '1',
        giftId: this.currentGiftType,
      }).then((res) => {
        console.log(res);
        this.$toast('礼物发送成功!');
      }).catch((err) => {
        console.log(err);
      });
    },
  },
};
</script>
<style lang="less" scoped>
.giftBox {
  width: 750px;
  height: 1000px;
  border-top-right-radius: 40px;
  border-top-left-radius: 40px;
  background-color: rgba(1, 9, 22, 0.96);
  .nav {
    height: 80px;
    padding: 0 32px;
    padding-left: 0px;
    margin-bottom: 2.5vw;
    position: relative;
    .navItem {
      display: flex;
      align-items: center;
      height: 80px;
      font-size: 26px;
      font-weight: 400;
      margin-left: 35px;
      color: rgba(255, 255, 255, 0.3);
      padding-bottom: 4px;

      &.active {
        font-size: 28px;
        font-weight: 500;
        color: #ffffff;
        border-bottom: 4px solid #fff;
      }
    }
  }
  .giftListWrap {
    width: 100%;
    height: 120vw;
    position: relative;
    padding-bottom: 4vw;
    .gift-swipe {
      height: 100%;
      .page {
        width: 100%;
        height: 100%;
        padding: 0 2%;
        overflow-y: scroll;
        .item {
          position: relative;
          flex-direction: column;
          width: 25%;
          height: 32vw;
          float: left;
          .giftImg {
            width: 14vw;
            height: 14vw;

            &.active {
              animation-name: bounceIn;
              animation-duration: 2.5s;
              animation-iteration-count: infinite;
              animation-delay: 0;
            }
          }

          .name {
            font-size: 3.6vw;
            color: #fff;
            margin-top: 20px;
          }

          .price {
            margin-top: 1.2vw;
            color: rgba(255, 255, 255, 0.6);
            font-size: 3.6vw;
            .unit {
              width: 28px;
              height: 21px;
              margin-right: 6px;
            }
            &.active {
              padding-bottom: 5vw;
            }
          }

          .activeBox {
            position: absolute;
            top: 0;
            width: 90%;
            height: 100%;
            background: rgba(255, 255, 255, 0.16);
            border-radius: 16px;
            .sendBtn {
              width: 100%;
              height: 50px;
              background: linear-gradient(90deg, #fc4d88, #fd024f 100%);
              font-size: 24px;
              font-weight: 400;
              color: #ffffff;
              position: absolute;
              bottom: 0;
              left: 0;
              border-bottom-left-radius: 16px;
              border-bottom-right-radius: 16px;
            }
          }
        }
      }
    }
  }
  @keyframes bounceIn {
    from,
    20%,
    40%,
    60%,
    80%,
    to {
      -webkit-animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
      animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
    }

    0% {
      opacity: 0;
      -webkit-transform: scale3d(0.3, 0.3, 0.3);
      transform: scale3d(0.3, 0.3, 0.3);
    }

    20% {
      -webkit-transform: scale3d(1.1, 1.1, 1.1);
      transform: scale3d(1.1, 1.1, 1.1);
    }

    40% {
      -webkit-transform: scale3d(0.9, 0.9, 0.9);
      transform: scale3d(0.9, 0.9, 0.9);
    }

    60% {
      opacity: 1;
      -webkit-transform: scale3d(1.03, 1.03, 1.03);
      transform: scale3d(1.03, 1.03, 1.03);
    }

    80% {
      -webkit-transform: scale3d(0.97, 0.97, 0.97);
      transform: scale3d(0.97, 0.97, 0.97);
    }

    to {
      opacity: 1;
      -webkit-transform: scale3d(1, 1, 1);
      transform: scale3d(1, 1, 1);
    }
  }
}
</style>
</file>

<file path="src/components/menuBottom.vue">
<template>
  <div class="menus">
    <div
      class="menuItem publicHvCenter"
      v-for="item in subMenus"
      :key="item.id"
      :style="{ backgroundImage: 'url(' + bg + ')' }"
      :class="{ active: item.name === name }"
      @click="onClickMenuItem(item)"
    >
      <label>{{ item.name }}</label>
    </div>
  </div>
</template>
<script>
import sendInstrunction from '@/api/sendCode';
import { CONTROL_CODE } from '@/assets/constant/index';

export default {
  name: 'menuBottom',
  props: {
    name: {
      type: String,
      default: '',
    },
    bg: {
      type: String,
      default: '',
    },
    subMenus: {
      type: Array,
      default: () => [],
    },
  },
  methods: {
    /**
     * 菜单点击事件
     * @param {*} menuId 菜单id
     * @param {*} menuItem 子菜单对象
     */
    onClickMenuItem(menuItem) {
      if (menuItem?.screenUrl) {
        sendInstrunction({
          code: CONTROL_CODE.ROUTER_JUMP,
          param: { path: menuItem?.screenUrl || '/' },
        });
        return;
      }
      if (menuItem?.toScreen) {
        sendInstrunction(menuItem?.toScreen);
        return;
      }
      if (menuItem.routeName) {
        this.$router.push({ name: menuItem?.routeName });
      }
    },
  },
};
</script>
<style lang="less" scoped>
.menus {
  width: 100%;
  padding: 40px 20px 20px 20px;
  background-color: #fff;
  border-radius: 40px 40px 0 0;

  display: flex;
  flex-wrap: wrap;
  align-content: flex-start;
  justify-content: center;
  overflow-y: scroll;

  .menuItem {
    color: #fff;
    flex-direction: column;
    padding: 20px 40px;
    margin-right: 20px;
    margin-bottom: 20px;
    border-radius: 20px;
    background-size: contain;

    &.active {
      color: #000;
    }
  }
}
@media screen and (max-height: 760px) {
  .menus {
    max-height: 650px;
  }
}
@media screen and (max-height: 700px) {
  .menus {
    max-height: 550px;
  }
}
@media screen and (max-height: 630px) {
  .menus {
    max-height: 400px;
  }
}
@media screen and (max-height: 560px) {
  .menus {
    max-height: 300px;
  }
}
@media screen and (max-height: 500px) {
  .menus {
    max-height: 180px;
  }
}
</style>
</file>

<file path="src/components/multiMedia.vue">
<template>
  <div class="multiMediaBox">
    <div class="nav">
      <div
        class="navItem publicHCenter"
        :class="{ active: currentNavId === item.id }"
        v-for="item in navList"
        :key="item.id"
        @click="chooseNav(item.id)"
      >
        {{ item.name }}
      </div>
    </div>
    <div class="listWrap publicHCenter">
      <div
        class="listItem publicHvCenter"
        v-for="item in mediaList"
        :key="item.id"
        :class="{ active: item.id === currentMediaId }"
        @click="chooseMedia(item.id)"
      >
        {{ item.title }}
      </div>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

const NAVS = [
  {
    id: 1,
    name: '播放视频',
  },
  {
    id: 2,
    name: '画面定格',
  },
];
export default {
  name: 'multiMedia',
  computed: {
    ...mapState({
      mediaList: (state) => state.mediaList,
    }),
  },
  props: {
    navIdProp: {
      type: Number,
      default: 1,
    },
  },
  watch: {
    navIdProp: {
      handler(newVal) {
        this.currentNavId = newVal;
      },
      immediate: true,
    },
  },
  data() {
    return {
      navList: NAVS,
      currentNavId: 1,
      currentMediaId: '',
    };
  },
  components: {},
  created() {},
  mounted() {},
  methods: {
    chooseNav(id) {
      this.currentNavId = id;
      const tmpCode = id === 1 ? CODE.VIDEOPLAYOPEN : CODE.FIXEDSCREENOPEN;
      sendInstrunction({
        code: tmpCode,
      });
    },
    chooseMedia(id) {
      this.currentMediaId = id;
      sendInstrunction({
        code: CODE.MULTIMEDIAPLAY,
        param: this.currentMediaId,
      });
    },
  },
};
</script>
<style lang="less" scoped>
.multiMediaBox {
  width: 750px;
  padding-bottom: 144px;
  border-top-right-radius: 40px;
  border-top-left-radius: 40px;
  background-color: rgba(1, 9, 22, 0.96);
  .nav {
    height: 72px;
    position: relative;
    display: flex;
    align-items: flex-end;
    .navItem {
      font-size: 26px;
      font-weight: 400;
      margin-left: 35px;
      color: rgba(255, 255, 255, 0.4);
      position: relative;
      &.active {
        font-size: 28px;
        font-weight: 500;
        color: #ffffff;
        &::after {
          display: block;
          content: '';
          width: 20px;
          height: 4px;
          background: #ffffff;
          border-radius: 4px;
          position: absolute;
          bottom: -8px;
        }
      }
    }
  }
  .listWrap {
    flex-wrap: wrap;
    margin-top: 40px;
    .listItem {
      margin: 0 10px;
      margin-bottom: 20px;
      width: 216px;
      height: 84px;
      background: rgba(255, 255, 255, 0.16);
      border: 2px solid #65697c;
      border-radius: 78px;
      font-size: 28px;
      font-weight: 400;
      color: #ffffff;
      &.active {
        background: linear-gradient(90deg, #fc4d88, #fd024f 100%);
      }
    }
  }
}
</style>
</file>

<file path="src/components/myHead.vue">
<template>
  <div class="header publicVCenter">
    <button class="switch-version-btn" @click="switchToV2">切换新版</button>
    <div class="qrcode-box">
      <img src="@/assets/image/scanQRCode.png" @click="openQrcode" class="scanQRCode" />
    </div>
    <div class="title">{{ name }}</div>
    <div class="right-button_group publicVCenter">
      <span class="refresh" @click="clickRefresh">
        刷新
      </span>
      <img src="@/assets/image/toHome.png" @click="toHome" class="toHome" />
    </div>

  </div>
</template>
<script>
import sendInstrunction from '@/api/sendCode';
import { CODE, CONTROL_CODE } from '@/assets/constant/index';

export default {
  name: 'myHeader',
  props: {
    name: {
      type: String,
      default: '',
    },
  },
  methods: {
    async toHome() {
      await sendInstrunction({
        code: CODE.HOME,
      });
      this.$router.replace({
        path: '/controller',
      });
    },
    async openQrcode() {
      await sendInstrunction({
        code: CODE.QRCODE,
      });
    },
    async clickRefresh() {
      this.$dialog
        .confirm({
          title: '提示',
          message: '是否刷新大屏？',
        })
        .then(() => {
          sendInstrunction({
            code: CONTROL_CODE.OTHERS,
            param: { type: 'refresh' },
          });
        })
        .catch(() => { });
    },
    switchToV2() {
      localStorage.setItem('version', 'new');
      window.location.hash = '#/controller';
      // 切换到新版时，存储版本信息
      window.location.reload();
    },
  },
};
</script>
<style lang="less" scoped>
.header {
  width: 100%;
  padding: 50px 30px;
  padding-bottom: 0;
  display: flex;
  justify-content: space-between;
  z-index: 1;

  .switch-version-btn {
    background: rgba(255, 255, 255, 1);
    color: #333;
    border: none;
    border-radius: 16px;
    padding: 6px 16px;
    font-size: 18px;
    z-index: 10;
    margin-right: 10px;
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
  }

  .qrcode-box {
    flex: 1;
  }

  .scanQRCode {
    width: 68px;
    height: 68px;
  }

  .title {
    font-size: 32px;
    font-weight: 400;
    color: #ffffff;
    flex: 1;
    text-align: center;
  }

  .right-button_group {
    flex: 1;
    display: flex;
    justify-content: flex-end;
  }

  .refresh {
    font-size: 32px;
    font-weight: 400;
    color: #ffffff;
    margin-right: 20px;
  }

  .toHome {
    width: 68px;
    height: 68px;
  }
}
</style>
</file>

<file path="src/main.js">
import { Button, Checkbox, Dialog, Field, Form, Icon, Picker, Popover, Popup, Swipe, SwipeItem, Switch, Toast } from 'vant';
import Vue from 'vue';
import App from './App.vue';
import './assets/styles/public.css';
import './assets/fonts/iconfont.css';
import router from './router';
import store from './store';

Vue.config.productionTip = false;
Vue.use(Toast);
Vue.use(Form);
Vue.use(Field);
Vue.use(Button);
Vue.use(Popup);
Vue.use(Picker);
Vue.use(Checkbox);
Vue.use(Dialog);
Vue.use(Switch);
Vue.use(Swipe);
Vue.use(SwipeItem);
Vue.use(Icon);
Vue.use(Popover);

const app = new Vue({
  router,
  store,
  render: (h) => h(App),
}).$mount('#app');

export default app;
</file>

<file path="src/mixins/keyboardDetection.js">
export default {
  data() {
    return {
      initialViewportHeight: 0,
    };
  },
  mounted() {
    this.initKeyboardDetection();
  },
  beforeDestroy() {
    this.cleanupKeyboardDetection();
  },
  methods: {
    initKeyboardDetection() {
      this.initialViewportHeight = window.innerHeight;

      // Use Visual Viewport API if available (modern browsers), otherwise fallback to resize
      if (window.visualViewport) {
        window.visualViewport.addEventListener('resize', this.handleViewportChange);
      } else {
        window.addEventListener('resize', this.handleViewportChange);
      }
    },
    cleanupKeyboardDetection() {
      // Clean up event listeners
      window.removeEventListener('resize', this.handleViewportChange);

      if (window.visualViewport) {
        window.visualViewport.removeEventListener('resize', this.handleViewportChange);
      }

      // Ensure keyboard state is reset when component is destroyed
      this.$store.commit('menu/setKeyboardVisible', false);
    },
    handleViewportChange() {
      let heightDifference;

      // Use Visual Viewport API if available, otherwise use window height
      if (window.visualViewport) {
        heightDifference = this.initialViewportHeight - window.visualViewport.height;
      } else {
        const currentHeight = window.innerHeight;
        heightDifference = this.initialViewportHeight - currentHeight;
      }

      // If height decreased by more than 150px, keyboard is likely visible
      const isKeyboardVisible = heightDifference > 150;
      this.$store.commit('menu/setKeyboardVisible', isKeyboardVisible);
    },
  },
};
</file>

<file path="src/modules/screenMessenger.js">
/**
 * @description: 大屏沟通模块
 * @author: Ruan Jiazhen
 * @date: 2024-01-03 16:51:09
 * */
import WebsocketHeartbeatJs from 'websocket-heartbeat-js';
import sendInstrunction from '../api/sendCode';

export const screenMessenger = (() => {
  let ws = null;

  const handleMessageFnList = [];
  const handleMessageFuSet = new Set();

  // 所有函数的集合，用于防止重复注册
  /**
   * @param {object} message 消息对象
   */
  const handleMessage = (message) => {
    for (let i = 0; i < handleMessageFnList.length; i++) {
      const { fn } = handleMessageFnList[i];
      const isStop = fn(message);
      if (isStop) {
        break;
      }
    }
  };

  /**
   * @param {string} url ws地址
   */
  const connect = ({ url, onReconnect = () => {} }) => {
    return new Promise((resolve, reject) => {
      if (ws) {
        resolve();
      } else {
        ws = new WebsocketHeartbeatJs({
          url,
          pingTimeout: 120000,
          pingMsg: 'snhb',
        });

        ws.onreconnect = () => {
          onReconnect();
        };

        ws.onclose = () => {
          console.log('connect close');
        };

        ws.onmessage = (e) => {
          if (e.data === 'hb') return;
          try {
            const message = JSON?.parse(e.data);
            if (typeof message !== 'object') {
              throw new Error('message is not object');
            }
            handleMessage(message);
          } catch (error) {
            console.error('websocket onmessage error:', error);
          }
        };
        ws.onopen = () => {
          resolve();
        };
        ws.onerror = () => {
          reject();
        };
      }
    });
  };

  // TODO 发送消息，后续换成peerJS方案
  /**
   * @param {{
   * code: string,
   * param: any
   * }}
   * @returns
   */
  const send = ({ code, param }) => {
    return sendInstrunction({
      code,
      param,
    });
  };

  /**
   * @description: 监听大屏消息
   * @param {(message: object) => boolean | void } fn 监听函数，返回true则停止执行后续监听函数
   * @param {number} [weight=0]
   */
  const on = (fn, weight = 0) => {
    if (handleMessageFuSet.has(fn)) {
      console.error('[screenMessenger] 重复注册', fn);
      return;
    }
    handleMessageFuSet.add(fn);

    const hasSameWeight = handleMessageFnList.some((item) => item.weight === weight);
    if (hasSameWeight && weight !== 0) {
      console.warn('[screenMessenger] 该权重已被占用，注册的函数会在该函数之后执行', fn);
    }
    const targetIndex = handleMessageFnList.findIndex((item) => item.weight < weight);
    handleMessageFnList.splice(targetIndex === -1 ? handleMessageFnList.length : targetIndex, 0, {
      fn,
      weight,
    });
  };

  const off = (fn) => {
    const index = handleMessageFnList.findIndex((item) => item.fn === fn);
    if (index === -1) {
      console.error('[screenMessenger] 未注册该方法，无法卸载', fn);
      return;
    }

    handleMessageFuSet.delete(fn);
    handleMessageFnList.splice(index, 1);
  };

  return {
    connect,
    send,
    on,
    off,
  };
})();

// TODO 暂时提供这个提取大屏信息的方法，重构大屏端发送信息方法后删除
export const extractMessage = (message) => {
  return JSON.parse(message?.data.miaoYkqCode);
};
</file>

<file path="src/modules/screenStatusJudge.js">
import Vue from 'vue';

let screenStatus = 'unknown'; // 取值 unknown | on | off | multiple
let timerForScreenOn = null; // 定时器
const countdown = 3;
let timerForMultiple = null; // 定时器
const tmpMsgQueue = []; // 临时消息队列

const TIP_MAP = {
  off: '大屏未开启',
  multiple: '开启了多个大屏!',
};
/**
 * 清空定时器
 */
function clearTimerForScreenOn() {
  clearTimeout(timerForScreenOn);
  timerForScreenOn = null;
}

function clearTimerForMultiple() {
  clearTimeout(timerForMultiple);
  timerForMultiple = null;
}

/*
 * 设置大屏状态，并提示
 */
function setScreenStatusAndTip(status) {
  screenStatus = status;
  if (TIP_MAP[status]) {
    Vue.prototype.$toast.fail(TIP_MAP[status]);
  }
}
function judgeMsgRepeat() {
  // 判断tmpMsgQueue中的对象是否有重复的
  const msgSet = new Set();
  for (let i = 0; i < tmpMsgQueue.length; i++) {
    const msgStr = JSON.stringify(tmpMsgQueue[i]);
    if (msgSet.has(msgStr)) {
      return true;
    }
    if (!(tmpMsgQueue[i].type === 'gameInit' && !tmpMsgQueue[i].data.gameId)) {
      // 只比较有效的信息
      msgSet.add(msgStr);
    }
  }
  return false;
}

/**
 * 收集1s内的消息，并判断是否有多个大屏开启
 */
function collectMsgInRangeTimeAndJudgeMultiple(msgData) {
  tmpMsgQueue.push(msgData);
  if (timerForMultiple) {
    return;
  }
  timerForMultiple = setTimeout(() => {
    clearTimerForMultiple();
    if (judgeMsgRepeat()) {
      setScreenStatusAndTip('multiple');
    }
    // 1s时间到则清空队列
    tmpMsgQueue.length = 0;
  }, 1000);
}

/**
 * 询问大屏状态
 */
export function queryScreenStatus() {
  if (timerForScreenOn) {
    return;
  }
  timerForScreenOn = setTimeout(() => {
    setScreenStatusAndTip('off');
    clearTimerForScreenOn();
  }, countdown * 1000);
}

/**
 * 告知大屏状态
 */
export function tellScreenStatus(msgData) {
  setScreenStatusAndTip('on');
  if (timerForScreenOn) {
    clearTimerForScreenOn();
  }

  collectMsgInRangeTimeAndJudgeMultiple(msgData);
}

/**
 * 获取当前大屏状态
 */
export function getScreenStatus() {
  return screenStatus;
}
</file>

<file path="src/router/helper.js">
/**
 * 根据菜单id查询路由name
 */
let tmpSearchResult = null;
export function searchRouteNameByMenuId(routes, menuId) {
  for (let i = 0; i < routes.length; i++) {
    if (routes[i].meta.id === menuId) {
      return routes[i].name; // 找到值的出口
    }
    if (routes[i].children) {
      tmpSearchResult = searchRouteNameByMenuId(routes[i].children, menuId); // 递归交界处
      if (tmpSearchResult) {
        return tmpSearchResult;
      }
    }
  }
  return null; // 没找到值的出口
}

export const TMP = 1; // TODO 临时 为了解决默认只有一个导出的问题
</file>

<file path="src/router/index.js">
import { CODE } from '@/assets/constant/index';
import app from '@/main';
import Vue from 'vue';
import VueRouter from 'vue-router';

const originalReplace = VueRouter.prototype.replace;
VueRouter.prototype.replace = function newReplace(location) {
  originalReplace.call(this, location).catch((err) => err);
};

const originalPush = VueRouter.prototype.push;
VueRouter.prototype.push = function newPush(location) {
  return originalPush.call(this, location).catch((err) => err);
};

Vue.use(VueRouter);

/**
 * @description 原始的路由配置
 * @type {import("../types/index").CustomRouteConfig[]}
 */
export const ORIGINAL_ROUTES = [
  {
    path: '/controller',
    name: 'home',
    component: () => import('@/views/v2/index.vue'), // 改为新版
    meta: {
      title: '遥控器',
      keepAlive: true,
    },
  },
  {
    path: '/main',
    name: 'main',
    component: () => import('@/views/main.vue'),
    meta: {
      title: '遥控器',
      keepAlive: true,
    },
    // TODO 迁移进来的旧模块后续等通信模块重构完成，再添加screenUrl，修改原按钮点击事件
    children: [
      {
        path: 'sign',
        name: 'sign',
        component: { render: (h) => h('router-view') },
        meta: {
          id: '0',
          name: '签到',
          icon: require('@/assets/image/signIn.png'),
          bg: require('@/assets/image/signBg.png'),
        },
        children: [
          {
            path: '3DSignIn',
            name: '3DSignIn',
            component: () => import('@/views/signIn/3DSignIn.vue'),
            meta: {
              parentId: '0',
              id: '0-1',
              title: '3D签到',
              toScreen: {
                code: CODE.SIGN,
              },
            },
          },
          {
            path: 'signBook',
            name: 'signBook',
            component: () => import('@/views/signIn/SignBook.vue'),
            meta: {
              parentId: '0',
              id: '0-2',
              title: '签到簿',
              toScreen: {
                code: CODE.SIGNBOOK,
              },
            },
          },
          {
            path: 'handwrittenSignIn',
            name: 'handwrittenSignIn',
            component: () => import('@/views/signIn/HandwrittenSignIn.vue'),
            meta: {
              parentId: '0',
              id: '0-3',
              title: '手写签到',
              toScreen: {
                code: CODE.SIGNBUBBLE,
              },
            },
          },
          {
            path: 'startRite',
            name: 'startRite',
            component: () => import('@/views/signIn/StartRite.vue'),
            meta: {
              parentId: '0',
              id: '0-4',
              title: '启动仪式',
              toScreen: {
                code: CODE.STARTRITE,
              },
            },
          },
          {
            path: 'signWeddingBook',
            name: 'signWeddingBook',
            component: () => import('@/views/signIn/SignWeddingBook.vue'),
            meta: {
              parentId: '0',
              id: 'signWeddingBook',
              title: '签婚书',
              screenUrl: 'signWeddingBook',
            },
          },
        ],
      },
      {
        path: 'luckyTreasure',
        name: 'luckyTreasure',
        component: { render: (h) => h('router-view') },
        meta: {
          id: '1',
          name: '幸运夺宝',
          icon: require('@/assets/image/niuyiniu.png'),
          bg: require('@/assets/image/fullScreen.png'),
        },
        children: [
          {
            path: 'spinItUp',
            name: 'spinItUp',
            component: () => import('@/views/luckyTreasure/SpinItUp.vue'),
            meta: {
              parentId: '1',
              id: '1-1',
              title: '转一转',
              toScreen: {
                code: CODE.XYDB,
              },
            },
          },
          {
            path: 'twistItUp',
            name: 'twistItUp',
            component: () => import('@/views/luckyTreasure/TwistItUp.vue'),
            meta: {
              parentId: '1',
              id: '1-2',
              title: '扭一扭',
              toScreen: {
                code: CODE.NYN,
              },
            },
          },
          {
            path: 'guessRedPacket',
            name: 'guessRedPacket',
            component: () => import('@/views/luckyTreasure/GuessRedPacket.vue'),
            meta: {
              parentId: '1',
              id: '1-3',
              title: '猜红包',
              toScreen: {
                code: CODE.GUESSHB,
              },
            },
          },
          {
            path: 'raceAgainstTime',
            name: 'raceAgainstTime',
            component: () => import('@/views/luckyTreasure/RaceAgainstTime.vue'),
            meta: {
              parentId: '1',
              id: '1-4',
              title: '争分夺秒',
              toScreen: {
                code: CODE.ZFDM,
              },
            },
          },
          {
            path: 'sendBlessing',
            name: 'sendBlessing',
            component: () => import('@/views/luckyTreasure/SendBlessing.vue'),
            meta: {
              parentId: '1',
              id: '1-5',
              title: '送祝福',
              toScreen: {
                code: CODE.SZF,
              },
            },
          },
          {
            path: 'luckyWheel',
            name: 'luckyWheel',
            component: () => import('@/views/luckyTreasure/LuckyWheel.vue'),
            meta: {
              parentId: '1',
              id: '1-6',
              title: '幸运小转盘',
              toScreen: {
                code: CODE.LUCKYWHEEL,
              },
            },
          },
        ],
      },
      {
        path: 'redPacketRain',
        name: 'redPacketRain',
        component: { render: (h) => h('router-view') },
        meta: {
          id: '2',
          name: '红包雨',
          icon: require('@/assets/image/redPackageRain.png'),
          bg: require('@/assets/image/QRCode.png'),
          toScreenChildrenId: '2-2',
        },
        children: [
          {
            path: 'tapRedPacket',
            name: 'tapRedPacket',
            component: () => import('@/views/redPacketRain/TapRedPacket.vue'),
            meta: {
              parentId: '2',
              id: '2-1',
              title: '点红包',
              toScreen: {
                code: CODE.CLICKHB,
              },
            },
          },
          {
            path: 'shakeRedPacket',
            name: 'shakeRedPacket',
            component: () => import('@/views/redPacketRain/ShakeRedPacket.vue'),
            meta: {
              parentId: '2',
              id: '2-2',
              title: '摇红包',
              toScreen: {
                code: CODE.HBY,
              },
            },
          },
          {
            path: 'peopleRedPacketRain',
            name: 'peopleRedPacketRain',
            component: () => import('@/views/redPacketRain/PeopleRedPacketRain.vue'),
            meta: {
              parentId: '2',
              id: '2-3',
              title: '全民红包雨',
              toScreen: {
                code: CODE.ALLHBY,
              },
            },
          },
          {
            path: 'shoutRedPacket',
            name: 'shoutRedPacket',
            component: () => import('@/views/redPacketRain/ShoutRedPacket.vue'),
            meta: {
              parentId: '2',
              id: '2-4',
              title: '喊红包',
              screenUrl: 'shoutHb',
            },
          },
        ],
      },
      {
        path: 'shake',
        name: 'shake',
        component: { render: (h) => h('router-view') },
        meta: {
          id: '3',
          name: '摇一摇',
          icon: require('@/assets/image/yaoyiyao.png'),
          bg: require('@/assets/image/blessList.png'),
        },
        children: [
          {
            path: 'defaultShake',
            name: 'defaultShake',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-1',
              title: '默认摇一摇',
              toScreen: {
                code: CODE.SHAKE,
                param: 'default',
              },
            },
          },
          {
            path: 'monkeyClimbing',
            name: 'monkeyClimbing',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-2',
              title: '猴子爬树',
              toScreen: {
                code: CODE.SHAKE,
                param: 'monkeyShake',
              },
            },
          },
          {
            path: 'crazySwimming',
            name: 'crazySwimming',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-3',
              title: '疯狂游泳',
              toScreen: {
                code: CODE.SHAKE,
                param: 'swimShake',
              },
            },
          },
          {
            path: 'urbanRacing',
            name: 'urbanRacing',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-4',
              title: '都市赛车',
              toScreen: {
                code: CODE.SHAKE,
                param: 'cityCarShake',
              },
            },
          },
          {
            path: 'whoIsTheBest',
            name: 'whoIsTheBest',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-5',
              title: '谁最牛',
              toScreen: {
                code: CODE.SHAKE,
                param: 'cattleShake',
              },
            },
          },
          {
            path: 'chasingTheBride',
            name: 'chasingTheBride',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-6',
              title: '追新娘',
              toScreen: {
                code: CODE.SHAKE,
                param: 'husWifeShake',
              },
            },
          },
          {
            path: 'weddingCarShake',
            name: 'weddingCarShake',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-7',
              title: '婚车摇一摇',
              toScreen: {
                code: CODE.SHAKE,
                param: 'weddingCarShake',
              },
            },
          },
          {
            path: 'dragonBoatRace',
            name: 'dragonBoatRace',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-8',
              title: '赛龙舟',
              toScreen: {
                code: CODE.SHAKE,
                param: 'dragonBoatTeamShake',
              },
            },
          },

          {
            path: 'liftThePalanquin',
            name: 'liftThePalanquin',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-9',
              title: '抬花轿',
              toScreen: {
                code: CODE.SHAKE,
                param: 'sedanChairShake',
              },
            },
          },
          {
            path: 'tigerYearSkiing',
            name: 'tigerYearSkiing',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-10',
              title: '虎年滑雪',
              toScreen: {
                code: CODE.SHAKE,
                param: 'tigerShake',
              },
            },
          },
          {
            path: 'rabbitFlying',
            name: 'rabbitFlying',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-11',
              title: '兔飞猛进',
              toScreen: {
                code: CODE.SHAKE,
                param: 'rubbitShake',
              },
            },
          },

          {
            path: 'dragonInTheSky',
            name: 'dragonInTheSky',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: 'dragonInTheSky',
              title: '飞龙在天',
              screenUrl: 'dragonInTheSky',
            },
          },
          {
            name: 'luckySnake',
            path: 'luckySnake',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-12',
              title: '福蛇贺岁',
              toScreen: {
                code: CODE.LUCKYSNAKE,
              },
            },
          },
          {
            path: 'moneyTreeShake',
            name: 'moneyTreeShake',
            component: () => import('@/views/shake/ShakeCommon.vue'),
            meta: {
              parentId: '3',
              id: '3-13',
              title: '摇钱树',
              screenUrl: 'moneyTreeShake',
            },
          },
        ],
      },
      {
        path: 'swipe',
        name: 'swipe',
        component: { render: (h) => h('router-view') },
        meta: {
          id: '4',
          name: '划一划',
          icon: require('@/assets/image/yaoyiyao.png'),
          bg: require('@/assets/image/blessList.png'),
        },
        children: [
          {
            path: 'countingMoney',
            name: 'countingMoney',
            component: () => import('@/views/swipe/SwipeCommon.vue'),
            meta: {
              parentId: '4',
              id: '4-2',
              title: '数钞票',
              toScreen: {
                code: CODE.HYH,
              },
            },
          },
          {
            path: 'cutFruit',
            name: 'cutFruit',
            component: () => import('@/views/swipe/SwipeCommon.vue'),
            meta: {
              parentId: '4',
              id: '4-1',
              title: '切水果',
              toScreen: {
                code: CODE.CUTFRUIT,
              },
            },
          },
          {
            path: 'countingMoneyNew',
            name: 'countingMoneyNew',
            component: () => import('@/views/swipe/SwipeCommon.vue'),
            meta: {
              parentId: '4',
              id: '4-3',
              title: '数钞票(新)',
              toScreen: {
                code: CODE.HYH2,
              },
            },
          },
          {
            path: 'pigout',
            name: 'pigout',
            component: () => import('@/views/swipe/SwipeCommon.vue'),
            meta: {
              parentId: '4',
              id: '4-4',
              title: '狼吞虎咽',
              toScreen: {
                code: CODE.PIGOUT,
              },
            },
          },
          {
            path: 'clickTiger',
            name: 'clickTiger',
            component: () => import('@/views/swipe/SwipeCommon.vue'),
            meta: {
              parentId: '4',
              id: '4-5',
              title: '武松打虎',
              toScreen: {
                code: CODE.CLICKTIGER,
              },
            },
          },
          {
            path: 'playFootball',
            name: 'playFootball',
            component: () => import('@/views/swipe/SwipeCommon.vue'),
            meta: {
              parentId: '4',
              id: '4-6',
              title: '谁是射手王',
              toScreen: {
                code: CODE.PLAYFOOTBALL,
              },
            },
          },
          {
            path: 'basketballShoot',
            name: 'basketballShoot',
            component: () => import('@/views/swipe/SwipeCommon.vue'),
            meta: {
              parentId: '4',
              id: 'basketballShoot',
              title: '兔子投篮',
              screenUrl: 'basketballShoot',
            },
          },
          {
            path: 'dragonPlayBead',
            name: 'dragonPlayBead',
            component: () => import('@/views/swipe/SwipeCommon.vue'),
            meta: {
              parentId: '4',
              id: 'dragonPlayBead',
              title: '游龙戏珠',
              screenUrl: 'dragonPlayBead',
            },
          },
          {
            path: 'goldenSnake',
            name: 'goldenSnake',
            component: () => import('@/views/swipe/SwipeCommon.vue'),
            meta: {
              parentId: '4',
              id: '4-9',
              title: '金蛇纳福',
              toScreen: {
                code: CODE.GOLDENSNAkE,
              },
            },
          },
        ],
      },
      {
        path: 'openTreasure',
        name: 'openTreasure',
        component: { render: (h) => h('router-view') },
        meta: {
          id: '5',
          name: '开宝',
          icon: require('@/assets/image/guessBox.png'),
          bg: require('@/assets/image/signBg.png'),
        },
        children: [
          {
            path: 'redPacketWall',
            name: 'redPacketWall',
            component: () => import('@/views/openTreasure/RedPacketWall.vue'),
            meta: {
              parentId: '5',
              id: '5-1',
              title: '红包墙',
              toScreen: {
                code: CODE.HBWALL,
              },
            },
          },
          {
            path: 'openTreasureBox',
            name: 'openTreasureBox',
            component: () => import('@/views/openTreasure/OpenTreasureBox.vue'),
            meta: {
              parentId: '5',
              id: '5-2',
              title: '开宝箱',
              toScreen: {
                code: CODE.KBX,
              },
            },
          },
        ],
      },
      {
        path: 'lottery',
        name: 'lottery',
        component: { render: (h) => h('router-view') },
        meta: {
          id: '6',
          name: '抽奖',
          icon: require('@/assets/image/screenRoll.png'),
          bg: require('@/assets/image/music.png'),
        },
        children: [
          {
            path: 'threeDLotteryEnterprise',
            name: 'threeDLotteryEnterprise',
            component: () => import('@/views/lottery/LotteryCommon.vue'),
            meta: {
              parentId: '6',
              id: '6-1',
              title: '3D抽奖',
              toScreen: {
                code: CODE.LOTTERY,
                param: '3d',
              },
              isShowArrangedLotteryTest: true,
            },
          },
          {
            path: 'listLottery',
            name: 'listLottery',
            component: () => import('@/views/lottery/LotteryCommon.vue'),
            meta: {
              parentId: '6',
              id: '6-2',
              title: '名单抽奖',
              toScreen: {
                code: CODE.LOTTERY,
                param: 'sheet',
              },
              isShowArrangedLotteryTest: true,
            },
          },
          {
            path: 'bigScreenLottery',
            name: 'bigScreenLottery',
            component: () => import('@/views/lottery/LotteryCommon.vue'),
            meta: {
              parentId: '6',
              id: '6-3',
              title: '巨幕抽奖',
              toScreen: {
                code: CODE.LOTTERY,
                param: 'screen',
              },
              isShowArrangedLotteryTest: true,
            },
          },
          {
            path: 'earthLottery',
            name: 'earthLottery',
            component: () => import('@/views/lottery/LotteryCommon.vue'),
            meta: {
              parentId: '6',
              id: '6-4',
              title: '地球抽奖',
              toScreen: {
                code: CODE.LOTTERY,
                param: 'earth',
              },
              isShowArrangedLotteryTest: true,
            },
          },
          {
            path: 'pictureLottery',
            name: 'pictureLottery',
            component: () => import('@/views/lottery/LotteryCommon.vue'),
            meta: {
              parentId: '6',
              id: '6-5',
              title: '图片抽奖',
              toScreen: {
                code: CODE.LOTTERY,
                param: 'picture',
              },
            },
          },
          {
            path: 'cardDraw',
            name: 'cardDraw',
            component: () => import('@/views/lottery/LotteryCommon.vue'),
            meta: {
              parentId: '6',
              id: '6-6',
              title: '卡牌抽奖',
              toScreen: {
                code: CODE.LOTTERY,
                param: 'card',
              },
            },
          },
          {
            path: 'wheelLottery',
            name: 'wheelLottery',
            component: () => import('@/views/lottery/wheelLottery.vue'),
            meta: {
              parentId: '6',
              id: '6-7',
              title: '转盘抽奖',
              screenUrl: 'wheelLottery',
            },
          },
          {
            path: 'listLotteryParticle',
            name: 'listLotteryParticle',
            component: () => import('@/views/lottery/LotteryCommon.vue'),
            meta: {
              parentId: '6',
              id: '6-8',
              title: '新名单抽奖',
              screenUrl: 'listLotteryParticle',
              isShowArrangedLotteryTest: true,
            },
          },
          {
            path: 'danmuLottery',
            name: 'danmuLottery',
            component: () => import('@/views/lottery/LotteryCommon.vue'),
            meta: {
              parentId: '6',
              id: '6-9',
              title: '弹幕抽奖',
              screenUrl: 'danmuLottery',
            },
          },
          {
            path: 'boxLottery',
            name: 'boxLottery',
            component: () => import('@/views/lottery/LotteryCommon.vue'),
            meta: {
              parentId: '6',
              id: '6-10',
              title: '抽奖箱抽奖',
              screenUrl: 'boxLottery',
            },
          },
        ],
      },
      {
        path: 'miniGame',
        name: 'miniGame',
        component: { render: (h) => h('router-view') },
        meta: {
          id: '7',
          name: '小游戏',
          icon: require('@/assets/image/miniGame.png'),
          bg: require('@/assets/image/home.png'),
          toScreen: {
            code: CODE.MINIGAME,
          },
        },
        children: [
          {
            path: 'guessStar',
            name: 'guessStar',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-1',
              title: '搞笑猜明星',
              toScreen: {
                code: CODE.MINIGAME_GXCMX,
              },
            },
          },
          {
            path: 'guessStarCommon',
            name: 'guessStarCommon',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-2',
              title: '猜明星',
              toScreen: {
                code: CODE.MINIGAME_CMX,
              },
            },
          },
          {
            path: 'guessIdiom',
            name: 'guessIdiom',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-3',
              title: '开心猜成语',
              toScreen: {
                code: CODE.MINIGAME_KXCCY,
              },
            },
          },
          {
            path: 'guessIdiomCommon',
            name: 'guessIdiomCommon',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-4',
              title: '猜成语',
              toScreen: {
                code: CODE.MINIGAME_CCY,
              },
            },
          },
          {
            path: 'vote',
            name: 'vote',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-5',
              title: '投票',
              toScreen: {
                code: CODE.MINIGAME_VOTE,
              },
            },
          },
          {
            path: 'guessHero',
            name: 'guessHero',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-6',
              title: '猜英雄',
              toScreen: {
                code: CODE.MINIGAME_CYX,
              },
            },
          },
          {
            path: 'guessSong',
            name: 'guessSong',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-7',
              title: '猜歌名',
              toScreen: {
                code: CODE.MINIGAME_CGM,
              },
            },
          },
          {
            path: 'guessStarBySteps',
            name: 'guessStarBySteps',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-8',
              title: '火眼金睛',
              toScreen: {
                code: CODE.MINIGAME_HYJJ,
              },
            },
          },
          {
            path: 'mahjong',
            name: 'mahjong',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-9',
              title: '互动雀神大赛',
              toScreen: {
                code: CODE.MINIGAME_QSDSNEW,
              },
            },
          },
          {
            path: 'mahjongV1',
            name: 'mahjongV1',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-18',
              title: '雀神大赛',
              toScreen: {
                code: CODE.MINIGAME_QSDS,
              },
            },
          },
          {
            path: 'poem',
            name: 'poem',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-10',
              title: '诗词答题',
              toScreen: {
                code: CODE.MINIGAME_SCDT,
              },
            },
          },
          {
            path: 'jumpBone',
            name: 'jumpBone',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-11',
              title: '跳一跳',
              toScreen: {
                code: CODE.JUMPBONE,
              },
            },
          },
          {
            path: 'giveMark',
            name: 'giveMark',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-12',
              title: '评分',
              toScreen: {
                code: CODE.GIVEMARK,
              },
            },
          },
          {
            path: 'aoteman',
            name: 'aoteman',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-14',
              title: '猜奥特曼',
              toScreen: {
                code: CODE.ENTERAOTEMAN,
              },
            },
          },
          {
            path: 'guessTextColor',
            name: 'guessTextColor',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-13',
              title: '说颜色',
              toScreen: {
                code: CODE.MINIGAME_CWZYS,
              },
            },
          },
          {
            path: 'guessGenerality',
            name: 'guessGenerality',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-15',
              title: '猜电影',
              toScreen: {
                code: CODE.GUESSGENERALITY,
              },
            },
          },
          {
            path: 'hanzi',
            name: 'hanzi',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-16',
              title: '神奇的汉字',
              toScreen: {
                code: CODE.MINIGAME_HANZI,
              },
            },
          },
          {
            path: 'happyQA',
            name: 'happyQA',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-17',
              title: '开心问答',
              toScreen: {
                code: CODE.MINIGAME_HAPPYQA,
              },
            },
          },
          {
            path: 'gestureRiddle',
            name: 'gestureRiddle',
            component: () => import('@/views/miniGame/gestureRiddle.vue'),
            meta: {
              parentId: '7',
              id: '7-19',
              title: '你划我猜',
              screenUrl: 'gestureRiddle',
            },
          },
          {
            path: 'guessLanternRiddle',
            name: 'guessLanternRiddle',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-20',
              title: '猜灯谜',
              screenUrl: 'guessLanternRiddle',
            },
          },
          {
            path: 'guessSpeech',
            name: 'guessSpeech',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-21',
              title: '台词模仿秀',
              toScreen: {
                code: CODE.GUESSSPEECH,
              },
            },
          },
          {
            path: 'guessPicture',
            name: 'guessPicture',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-22',
              title: '看图识景',
              screenUrl: 'guessPicture',
            },
          },
          {
            path: 'guessBrand',
            name: 'guessBrand',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-23',
              title: '品牌达人',
              screenUrl: 'guessBrand',
            },
          },
          {
            path: 'guessAni',
            name: 'guessAni',
            component: () => import('@/views/miniGame/MiniGameCommon.vue'),
            meta: {
              parentId: '7',
              id: '7-24',
              title: '猜动画',
              screenUrl: 'guessAni',
            },
          },
          // {
          //   path: 'playpoker',
          //   name: 'playpoker',
          //   component: () => import('@/views/miniGame/MiniGameCommon.vue'),
          //   meta: {
          //     parentId: '7',
          //     id: '7-25',
          //     title: '扑克残局',
          //     toScreen: {
          //       code: CODE.MINIGAME_PLAYPOKER,
          //     },
          //   },
          // },
        ],
      },
      {
        path: 'basicFunctions',
        name: 'basicFunctions',
        component: { render: (h) => h('router-view') },
        meta: {
          id: '8',
          name: '基础功能',
          icon: require('@/assets/image/miniGame.png'),
          bg: require('@/assets/image/home.png'),
          isIgnoreAuth: true,
        },
        children: [
          {
            path: 'msgWall',
            name: 'msgWall',
            component: () => import('@/views/basicFunctions/BasicFunctionsCommon.vue'),
            meta: {
              parentId: '8',
              id: '8-1',
              title: '祝福榜',
            },
          },
          {
            path: 'danmu',
            name: 'danmu',
            component: () => import('@/views/basicFunctions/BasicFunctionsCommon.vue'),
            meta: {
              parentId: '8',
              id: '8-2',
              title: '弹幕',
            },
          },
          {
            path: 'qrCode',
            name: 'qrCode',
            component: () => import('@/views/basicFunctions/BasicFunctionsCommon.vue'),
            meta: {
              parentId: '8',
              id: '8-3',
              title: '二维码',
            },
          },
          {
            path: 'music',
            name: 'music',
            component: () => import('@/views/basicFunctions/BasicFunctionsCommon.vue'),
            meta: {
              parentId: '8',
              id: '8-4',
              title: '音乐',
            },
          },
          {
            path: 'curtainCall',
            name: 'curtainCall',
            component: () => import('@/views/basicFunctions/BasicFunctionsCommon.vue'),
            meta: {
              parentId: '8',
              id: '8-6',
              title: '谢幕',
            },
          },
        ],
      },
    ],
  },
  {
    path: '/chooseSongMain',
    name: 'chooseSongMain',
    component: () => import('@/views/chooseSongMain.vue'),
    meta: {
      title: '遥控器',
      keepAlive: true,
    },
  },
  {
    path: '/controllerV2',
    name: 'controllerV2',
    component: () => import('@/views/home.vue'), // 改为旧版
    meta: {
      title: '遥控器V2',
      keepAlive: true,
    },
  },
];

const router = new VueRouter({
  mode: 'hash',
  routes: [],
});

// 如果路由meta里有menuId就设置菜单id
// XXX 后续子组件换成路由的形式后，这里的逻辑可以整合删除
router.beforeEach((to, from, next) => {
  // 检查是否进入home路由，并且localStorage中的version为old
  const version = localStorage.getItem('version');
  if (to.path === '/controller') {
    const version = localStorage.getItem('version');
    if (version === 'old') {
      // 如果version为old，跳转到旧版路由
      next({
        path: '/controllerV2',
        query: to.query,
      });
      return;
    }
  }
  // 检查是否进入controllerV2路由，并且localStorage中的version为new
  if (to.path === '/controllerV2') {
    if (version === 'new') {
      next({
        path: '/controller',
        query: to.query,
      });
      return;
    }
  }

  if (to?.meta?.id) {
    app.$store.commit('setCurrentMenuId', to.meta.id);
  }
  next();
});
export default router;
</file>

<file path="src/store/index.js">
import { getGiftList, getTokenH5, reqGetRouterList } from '@/api/index';
import router, { ORIGINAL_ROUTES } from '@/router';
import { searchRouteNameByMenuId } from '@/router/helper';
import { generateRandomId } from '@/utils/index';
import Vue from 'vue';
import Vuex from 'vuex';
import chat from './modules/chat/index';
import game from './modules/game';
import gift from './modules/gift/index';
import instructions from './modules/instructions/index';
import live from './modules/live';
import menu from './modules/menu/index';

Vue.use(Vuex);

const state = {
  liveId: '',
  token: '',
  currentMenuId: '',
  hbyStep: 0, // 0:设置金额 1:游戏控制
  kbxStep: 0, // 0:选择宝箱类型 1: 游戏等待 2: 游戏中 3: 游戏结束
  hbwallStep: 0, // 0:选择红包墙类型 1: 游戏等待 2: 游戏中 3: 游戏结束
  openedBox: [],
  openedHb: [],
  lotteryType: '3d', // 3d: 3d抽奖 sheet:名单抽奖 screen: 巨幕抽奖 earth：地球抽奖 picture：图片抽奖 card: 卡牌抽奖
  isSheetLotteryNoUpload: false, // 名单抽奖是否上传名单
  currentMiniGameAnswer: '', // 当前小游戏答案
  isScreenStatus: 1, // 大屏状态 0:关闭 1:未知 2:开启
  guessHbStatus: 0, // 0：等待新人充值 1: 游戏进行中
  zfdmList: [], // 争分夺秒类型列表
  zfdmStep: 0, // 0：选择争分夺秒类型 1：游戏中 2：游戏结束
  szfStep: 0, // 0: 选择送祝福时间 1: 游戏中 2: 游戏结束
  personStopBtnVisible: false, // 3d抽奖手动停止按钮的出现与否
  lottyerInAni: false, // 抽奖是否在动画过程中
  sheetLotteryStatus: '0',
  sheetChoosePeople: 0,
  screenLotteryStatus: '0',
  earthLotteryStatus: '0',
  danmuLotteryStatus: '0',
  pictureLotteryStatus: '0',
  cardLotteryStatus: '0',
  giftTitleList: [], // 礼物标题列表
  giftList: [],
  giftListAll: [],
  tokenH5: '',
  mediaList: [], // 视频播放/定屏列表
  cardAnswer: [],
  chooseSongVisible: false, // 是否显示点歌模块
  giveMarkVersion: 'new', // 评分版本 new:新版 old: 旧版
  currentSongId: '', // 当前播放的歌曲id
  userRoutes: [], // 用户路由
  globalLoadingFlag: null, // 全局loading控制
  playPictureVisible: true, // 控制画面定格是否可见 默认是可见的 自定链接配置的情况下，可见性由配置决定
  playVideoVisible: true, // 播放视频是否可见
  playGiftVisible: true, // 免费发礼物是否可见
  lotteryPrizeInfo: {
    list: [],
    activeIndex: 0,
  }, // 抽奖信息(抽奖奖项列表,当前正在抽哪个奖)
  playpokerData: {},
  // 音乐播放器数据
  musicPlayerData: null,
};
const mutations = {
  initLiveId(state, data) {
    state.liveId = data;
  },
  initToken(state, data) {
    state.token = data;
  },
  setCurrentSongId(state, data) {
    state.currentSongId = data || '';
  },
  setCurrentMenuId(state, data) {
    // TODO 暂时这样处理，后续全部组件都改为路由控制后，再删除currentMenuId相关代码
    if (data === state.currentMenuId) return;
    state.currentMenuId = data;
    const firstLevelMenu = state.userRoutes?.find((item) => item.name === 'main')?.children || [];
    const targetRouteName = searchRouteNameByMenuId(firstLevelMenu, data);
    if (targetRouteName) {
      router.push({ name: targetRouteName });
    }
  },
  setHbyStep(state, data) {
    state.hbyStep = data;
  },
  setKbxStep(state, data) {
    state.kbxStep = data;
  },
  setZfdmStep(state, data) {
    state.zfdmStep = data;
  },
  setSzfStep(state, data) {
    state.szfStep = data;
  },
  updateOpenedBox(state, data) {
    if (data === 'all') {
      for (let i = 0; i < 18; i += 1) {
        state.openedBox.push(i);
      }
    }
    if (state.openedBox.indexOf(data) === -1) {
      state.openedBox.push(data);
    }
  },
  clearOpenedBox(state) {
    state.openedBox = [];
  },
  setHbwallStep(state, data) {
    state.hbwallStep = data;
  },
  updateOpenedHb(state, data) {
    if (data === 'all') {
      for (let i = 0; i < 28; i += 1) {
        state.openedHb.push(i);
      }
    }
    if (state.openedHb.indexOf(data) === -1) {
      state.openedHb.push(data);
    }
  },
  clearOpenedHb(state) {
    state.openedHb = [];
  },
  setLotteryType(state, data) {
    state.lotteryType = data;
  },
  updateIsSheetLotteryNoUpload(state, data) {
    state.isSheetLotteryNoUpload = data;
  },
  updateCurrentMiniGameAnswer(state, data) {
    let tmpTarget;
    if (data.includes(':')) {
      const tmpDataArr = data.split(':');
      tmpTarget = `<div>${tmpDataArr[0]}</div><div style="color:#fff;line-height: 1.2;margin-top: 10px">提示：${tmpDataArr[1]}</div>`;
    } else {
      tmpTarget = data;
    }

    state.currentMiniGameAnswer = tmpTarget;
  },
  updateCardAnswer(state, data) {
    state.cardAnswer = data;
  },
  updateGuessHbStatus(state, data) {
    state.guessHbStatus = data;
  },
  setZfdmList(state, data) {
    state.zfdmList = data;
    console.log('zfdmList赋值', state.zfdmList);
  },
  updatePersonStopBtnVisible(state, data) {
    state.personStopBtnVisible = data;
  },
  updateLottyerInAni(state, data) {
    state.lottyerInAni = data;
  },
  updateSheetLotteryStatus(state, data) {
    state.sheetLotteryStatus = data;
  },
  updateSheetChoosePeople(state, data) {
    if (data === 'reset') {
      state.sheetChoosePeople = `reset${generateRandomId()}`;
    } else {
      state.sheetChoosePeople = data;
    }
  },
  updateScreenLotteryStatus(state, data) {
    state.screenLotteryStatus = data;
  },
  updateDanmuLotteryStatus(state, data) {
    state.danmuLotteryStatus = data;
  },
  updateEarthLotteryStatus(state, data) {
    state.earthLotteryStatus = data;
  },
  updatecardLotteryStatus(state, data) {
    state.cardLotteryStatus = data;
  },
  updatePictureLotteryStatus(state, data) {
    state.pictureLotteryStatus = data;
  },
  setTokenH5(state, data) {
    state.tokenH5 = data;
  },
  setChooseSongVisible(state, data) {
    state.chooseSongVisible = data;
  },
  setGiftList(state, data) {
    console.log(data);
    const NAVMAP = {
      list1: '经典',
      list5: '华丽',
      list666: '特效',
      list6: '嘉年华',
    };
    // data.giftTitleList<-> {list1: '',list5: '',...}
    const keyArr = Object.keys(data.giftTitleList);
    // 嘉年华礼物调整到第二个位置
    const tmpIndexList6 = keyArr.indexOf('list6');
    const valIndex1 = keyArr[1];
    let tempVal;
    if (tmpIndexList6 > -1 && valIndex1) {
      tempVal = keyArr[tmpIndexList6];
      keyArr[tmpIndexList6] = valIndex1;
      keyArr[1] = tempVal;
    }
    const tmpTitle = [];
    const tmpList = [];
    let tmpListAll = [];
    keyArr.forEach((keyItem) => {
      tmpTitle.push({
        id: keyItem,
        name: NAVMAP[keyItem],
      });
      tmpList.push(data.giftListObj[keyItem]);
      tmpListAll = tmpListAll.concat(data.giftListObj[keyItem]);
    });
    console.log('去掉特效');
    const tmpEnterEffectIndex = tmpTitle.findIndex((item) => item.id === 'list666');
    tmpTitle.splice(tmpEnterEffectIndex, 1);
    tmpList.splice(tmpEnterEffectIndex, 1);
    state.giftTitleList = tmpTitle;
    state.giftList = tmpList;
    state.giftListAll = tmpListAll;
    console.log('1111111111111111111');
    console.log('标题列表:', state.giftTitleList);
    console.log('礼物列表:', state.giftList);
    console.log('所有礼物列表:', state.giftListAll);
    console.log('1111111111111111111');
  },
  setMediaList(state, data) {
    console.log(data);
    state.mediaList.splice(0);
    state.mediaList = data.filter((item) => item.videoPath || item.imagePath);
  },
  setGiveMarkVersion(state, data) {
    state.giveMarkVersion = data;
  },
  setUserRoutes(state, data) {
    state.userRoutes = data;
  },
  showGlobalLoading(state) {
    state.globalLoadingFlag = Vue.prototype.$toast.loading({
      message: '请求中...',
      forbidClick: true,
      overlay: true,
      duration: 0,
    });
  },
  hideGlobalLoading(state) {
    state.globalLoadingFlag.clear();
  },
  /**
   * 控制顶部功能菜单的显示与否
   * 即决定playPictureVisible、playVideoVisible、playGiftVisible的值
   * 不传对应的值或者对应的值无效时，就不显示对应功能菜单
   * @param {{playPicture: string, playVideo: string, playGift: string}} data
   */
  setTopFuncIconVisible(state, data) {
    if (!data.playPicture) {
      state.playPictureVisible = false;
    }
    if (!data.playVideo) {
      state.playVideoVisible = false;
    }
    if (!data.playGift) {
      state.playGiftVisible = false;
    }
  },
  /**
   * 暂时不使用该方法，后续有需要再优化
   * 设置抽奖奖项信息
   * data:{list: [{prizeName,其他参数}], activeIndex}
   */
  setLotteryPrizeInfo(state, data) {
    try {
      const dataObj = JSON.parse(data);
      state.lotteryPrizeInfo = {
        list: dataObj.list.map((item) => item.prizeName),
        activeIndex: dataObj.activeIndex,
      };
    } catch {
      console.log('抽奖奖项信息设置失败');
    }
  },
  /**
   * 设置扑克残局新的对局数据
   * @param {Object} data
   */
  setNewPokerData(state, data) {
    if (typeof data === 'object' && Object.keys(data).length === 0) state.playpokerData = {};
    else if (data.playpokerState !== 0) {
      state.playpokerData = {};
    } else {
      state.playpokerData = data;
    }
  },
  setPokerProducable(state) {
    state.playpokerData.producable = false;
  },
  setSwitchedPokerCardsStatus(state, data) {
    Vue.set(state.playpokerData.playerCardsStatus, data, !state.playpokerData.playerCardsStatus[data]);
  },
  setDraggedPokerCardsStatus(state, data) {
    const index = data;
    Vue.$set(state.playpokerData.playerCardsDraggingStatus, index, true);
  },
  setDragEndPokerCardsStatus(state) {
    state.playpokerData.playerCardsDraggingStatus.forEach((item, index) => {
      if (item) {
        Vue.$set(state.playpokerData.playerCardsStatus, index, !state.playpokerData.playerCardsStatus[index]);
      }
      Vue.$set(state.playpokerData.playerCardsDraggingStatus, index, false);
    });
  },
  setDragMiddlePokerCardsStatus(state, data) {
    const index = data;
    state.playpokerData.playerCardsDraggingStatus.forEach((item, i) => {
      if (i !== index) Vue.$set(state.playpokerData.playerCardsDraggingStatus, i, false);
    });
  },
  setPokerCardsMutipleDraggingStatus(state, data) {
    const { start, end, status } = data;
    for (let i = start; i <= end; i++) {
      Vue.$set(state.playpokerData.playerCardsDraggingStatus, i, status);
    }
  },
  setPokerCardsStatusReset() {
    // state.playpokerData.playerCardsStatus.forEach((item, index) => {
    //   Vue.$set(state.playpokerData.playerCardsStatus, index, false);
    //   Vue.$set(state.playpokerData.playerCardsDraggingStatus, index, false);
    // });
  },
  setMusicPlayerData(state, data) {
    state.musicPlayerData = data;
  },
};
const actions = {
  initTokenH5(ctx) {
    getTokenH5()
      .then((res) => {
        console.log(res);
        ctx.commit('setTokenH5', res.token);
        ctx.commit('setChooseSongVisible', res.is_open_music === '1');
      })
      .catch((err) => {
        console.log(err);
      });
  },
  initGiftList(ctx) {
    if (ctx.state.giftListAll.length > 0) {
      return;
    }
    getGiftList()
      .then((res) => {
        console.log('礼物列表:', res);
        ctx.commit('setGiftList', {
          giftTitleList: res.data.title,
          giftListObj: res.data.data,
        });
      })
      .catch((err) => {
        console.log(err);
      });
  },
  async getRoutesAndSetMenu(ctx, data) {
    try {
      const res = await reqGetRouterList(data);
      if (!res?.isHasVal) {
        router.addRoutes(ORIGINAL_ROUTES);

        ctx.commit('setUserRoutes', ORIGINAL_ROUTES);
        return;
      }

      const routeNameList = JSON.parse(res?.data).remoteControlFuncs;
      const routes = ORIGINAL_ROUTES.map((route) => {
        if (route.name === 'main') {
          const mainChildren = route.children
            .map((child) => {
              if (child.meta.isIgnoreAuth) {
                return child;
              }
              const childChildren = child.children.filter((item) => routeNameList.some((name) => name === item.name));
              return {
                ...child,
                children: childChildren,
              };
            })
            .filter((item) => item.children.length > 0);
          console.log(mainChildren);
          return {
            ...route,
            children: mainChildren,
          };
        }
        return route;
      });
      router.addRoutes(routes);
      ctx.commit('setUserRoutes', routes);
      // 设置顶部功能菜单的显示与否
      const targetData = {
        playPicture: null,
        playVideo: null,
        playGift: null,
      };
      routeNameList.forEach((name) => {
        if (name === 'playPicture') {
          targetData.playPicture = '1';
        } else if (name === 'playVideo') {
          targetData.playVideo = '1';
        } else if (name === 'playGift') {
          targetData.playGift = '1';
        }
      });
      ctx.commit('setTopFuncIconVisible', targetData);
    } catch (e) {
      // Toast.fail(e.message);
      router.addRoutes(ORIGINAL_ROUTES);
      ctx.commit('setUserRoutes', ORIGINAL_ROUTES);
    }
  },
};
const store = new Vuex.Store({
  state,
  mutations,
  actions,
  modules: {
    menu,
    chat,
    gift,
    instructions,
    live,
    game,
  },
});

export default store;
</file>

<file path="src/store/modules/chat/helper.js">
import { generateRandomId, getCurrentDate } from '@/utils/index';

// 聊天记录中的礼物图标(通用)
const CHAT_ICON = {
  bapin: 'https://ustatic.joymew.com/joymewScreen/hd2/bapinIconNew.png',
  photo: 'https://ustatic.joymew.com/joymewScreen/hd2/photoIconNew.png',
  rocket: 'https://ustatic.joymew.com/joymewScreen/hd2/danmuIconNew.png',
  superDanmu: 'https://ustatic.joymew.com/joymewScreen/hd2/superDanmuIcon.png',
  hbkd: 'https://ustatic.joymew.com/joymewScreen/hd2/hbkdIconNew.png',
  photoWall: 'https://ustatic.joymew.com/joymewScreen/hd2/photoWallIconNew.png',
};
// 中式婚礼版聊天记中的图标
const CHATICON_ZSHL = {
  bapin: 'https://ustatic.joymew.com/joymewScreen/zshl/mobile/zfhfIconEtry.png',
  photo: 'https://ustatic.joymew.com/joymewScreen/zshl/mobile/photoIcon.png',
  rocket: 'https://ustatic.joymew.com/joymewScreen/zshl/mobile/zsdm.png',
  superDanmu: 'https://ustatic.joymew.com/joymewScreen/zshl/mobile/allScreenIcon.png',
  hbkd: 'https://ustatic.joymew.com/joymewScreen/zshl/mobile/hbkdIcon.png',
  photoWall: 'https://ustatic.joymew.com/joymewScreen/zshl/mobile/photoInstant.png',
};

/**
 * 获取礼物图片
 */
const getGiftImg = ({ giftType, giftId, sceneType }) => {
  if (sceneType === '91') {
    if (giftId.includes('Miao_Bq')) {
      const XR_DANMUS = [
        'https://ustatic.joymew.com/joymewMp/zshl/danmu/dragonIcon.png',
        'https://ustatic.joymew.com/joymewMp/zshl/danmu/phonixIcon.png',
        'https://ustatic.joymew.com/joymewMp/zshl/danmu/sklinIcon.png',
      ];
      const targetNum = Number(giftId.split('_')[2]);
      return XR_DANMUS[targetNum - 1];
    }
    return CHATICON_ZSHL[giftType];
  }
  return CHAT_ICON[giftType];
};

const GIFT_TYPE = {
  Miao_Bp: {
    label: '祝福横幅',
    value: 'Miao_Bp',
    image: getGiftImg({ giftType: 'bapin', giftId: 'Miao_Bp', sceneType: '' }),
  },
  Miao_Tp: {
    label: '照片霸屏',
    value: 'Miao_Tp',
    image: getGiftImg({ giftType: 'photo', giftId: 'Miao_Tp', sceneType: '' }),
  },
  Miao_Bq: {
    label: '火箭弹幕',
    value: 'Miao_Bq',
    image: getGiftImg({ giftType: 'rocket', giftId: 'Miao_Bq', sceneType: '' }),
  },
  Miao_SuperDanmu: {
    label: '超级弹幕',
    value: 'Miao_SuperDanmu',
    image: getGiftImg({ giftType: 'superDanmu', giftId: 'Miao_SuperDanmu', sceneType: '' }),
  },
  hbkd: {
    label: '红包',
    value: 'hbkd',
    image: getGiftImg({ giftType: 'hbkd', giftId: 'hbkd', sceneType: '' }),
  },
  Miao_PhotoWall: {
    label: '照片墙',
    value: 'Miao_PhotoWall',
    image: getGiftImg({ giftType: 'photoWall', giftId: 'Miao_PhotoWall', sceneType: '' }),
  },
  gift: (giftList, giftId) => {
    const tmpGift = giftList.find((item) => item.giftconst === giftId);
    if (tmpGift) {
      return {
        label: tmpGift.giftname,
        value: 'gift',
        image: tmpGift.imglink,
      };
    }
    return null;
  },
};

// 工具函数，用来生成content
// const generateContent = (giftTypeInfo, content) => {
//   if (giftTypeInfo) {
//     return content
//       ? `送来了：${giftTypeInfo.label}\n${content}` // 如果content有值
//       : `送来了：${giftTypeInfo.label}`; // 如果content无值
//   }
//   return content; // 如果giftTypeInfo无值，直接返回原始content
// };

/**
 *
 * @param {string} giftId
 * @param {Array} giftList
 * @returns {{label:string,value:string} | null}
 */
export const getGiftType = (giftId, giftList = []) => {
  if (!giftId) {
    return null;
  }
  // 处理非gift类型的礼物
  const giftKeys = Object.keys(GIFT_TYPE).filter((key) => key !== 'gift');
  const matchedKey = giftKeys.find((key) => giftId.includes(key));
  if (matchedKey) {
    return GIFT_TYPE[matchedKey];
  }
  // 处理gift类型的礼物
  return GIFT_TYPE.gift(giftList, giftId);
};

export const mapChatList = (chatList, giftListAll) => {
  return chatList.map((chat) => {
    const giftTypeInfo = getGiftType(chat.miaoLiwuId, giftListAll);
    return {
      id: generateRandomId(),
      nickname: chat.miaoName,
      avatar: chat.miaoTxUrl,
      // 【修改】直接使用原始 content，不再拼接 "送来了..."
      content: chat.miaoContent,
      rawContent: chat.miaoContent, // 保留原始 content
      sendDateTime: chat.sentTime,
      userId: chat.miaoId,
      giftId: chat.miaoLiwuId,
      giftTypeInfo, // 包含 { label, value, image } 的对象
      // 【新增】将礼物图片地址提升为顶层属性，方便模板直接使用
      giftImage: giftTypeInfo ? giftTypeInfo.image : null,
      photo: chat.miaoTpUrl,
    };
  });
};

export const formatChatFromWSH5 = (chat, giftListAll) => {
  // 获取礼物类型信息，使用与mapChatList相同的逻辑
  const giftTypeInfo = getGiftType(chat.miaoLwId, giftListAll);

  return {
    id: generateRandomId(),
    nickname: chat.miaoName,
    avatar: chat.miaoHeadUrl,
    // 【修改】直接使用原始 content (bless)
    content: chat.miaoBless,
    rawContent: chat.miaoBless,
    sendDateTime: getCurrentDate(),
    userId: chat.miaoId,
    giftId: chat.miaoLwId,
    giftTypeInfo, // 包含 { label, value, image } 的对象
    // 【新增】将礼物图片地址提升为顶层属性
    giftImage: giftTypeInfo ? giftTypeInfo.image : null,
    photo: chat.miaoTuUrl,
  };
};
</file>

<file path="src/store/modules/chat/index.js">
import { getChatMessage } from '@/api/indexV2';
import { bus } from '@/utils/websocket/v2/index';
import { mapChatList, formatChatFromWSH5 } from './helper';

const MAX_CHAT_HISTORY = 30;

const state = {
  chatList: [], // 聊天记录(包括发送礼物记录、聊天记录)
};

const mutations = {
  initChatList(state, chatList) {
    // 只保留最新的 MAX_CHAT_HISTORY 条
    state.chatList = chatList.slice(-MAX_CHAT_HISTORY);
  },
  addChatList(state, newChat) {
    // 只处理单条消息
    state.chatList = [...state.chatList, newChat].slice(-MAX_CHAT_HISTORY);
  },
};

const actions = {
  async getChatList(ctx) {
    try {
      // 1. 获取聊天原始数据
      const res = await getChatMessage();
      // 2. 获取全局的 giftListAll
      const { giftListAll } = ctx.rootState.gift;
      // 3. 调用 mapChatList，传 giftListAll
      const mappedList = mapChatList(res.data.chat_list, giftListAll);
      // 4. 存储
      ctx.commit('initChatList', mappedList);
      // 打印聊天记录
      console.log('mappedList', mappedList);
    } catch (err) {
      console.log(err);
    }
  },
  listenChatMessage({ commit, rootState }) {
    // 避免重复监听
    bus.$off('chat-message');
    bus.$on('chat-message', (msg) => {
      commit('addChatList', formatChatFromWSH5(msg, rootState.gift.giftListAll));
    });
  },
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
};
</file>

<file path="src/store/modules/game/index.js">
const state = {
  categoryList: ['生活', '食品', '物品', '人物', '电影', '成语'],
  triggerInitMahjongPage: false, // 新增状态，控制initMahjongPage调用
  kbxTypeList: [], // 新增开宝箱类型列表
  hbwallTypeList: [], // 新增红包墙类型列表
  moneyTreeShakeChooseMode: false, // 摇钱树选择模式
};

const mutations = {
  SET_CATEGORY_LIST(state, categoryList) {
    state.categoryList = categoryList;
  },
  SET_TRIGGER_INIT_MAHJONG_PAGE(state, value) {
    state.triggerInitMahjongPage = value;
  },
  SET_KBX_TYPE_LIST(state, kbxTypeList) {
    state.kbxTypeList = kbxTypeList;
  },
  SET_HBWALL_TYPE_LIST(state, hbwallTypeList) {
    state.hbwallTypeList = hbwallTypeList;
  },
  SET_MONEY_TREE_SHAKE_CHOOSE_MODE(state, value) {
    state.moneyTreeShakeChooseMode = value;
  },
};

export default {
  namespaced: true,
  state,
  mutations,
};
</file>

<file path="src/store/modules/gift/helper.js">
/**
 * 从礼物API响应数据中提取并计算giftListAll数组
 * @param {Object} giftApiRes - getGiftList() API的返回数据
 * @returns {Array} 完整的礼物列表数组
 */
export const computeGiftListAll = (giftApiRes) => {
  if (!giftApiRes || !giftApiRes.data) {
    return [];
  }

  const { data: giftListObj } = giftApiRes;
  let giftListAll = [];

  // 合并所有分类的礼物列表
  Object.keys(giftListObj).forEach((key) => {
    if (Array.isArray(giftListObj[key])) {
      giftListAll = giftListAll.concat(giftListObj[key]);
    }
  });

  return giftListAll;
};
export const noop = () => {};
</file>

<file path="src/store/modules/gift/index.js">
import { getGiftList, getSignRankList } from '@/api/indexV2';
import { generateRandomId } from '@/utils/index';
import { computeGiftListAll } from './helper';

const state = {
  giftListAll: [],
  giftSenderRankList: [],
  // 礼物播放相关状态
  giftQueue: [],
  currentGiftEffect: {
    id: '',
    path: '', // svga 文件路径
    userName: '',
    headImg: '',
  },
};

const mutations = {
  setGiftListAll(state, list) {
    state.giftListAll = list;
  },
  setGiftSenderRankList(state, list) {
    state.giftSenderRankList = list;
  },
  // 添加礼物到队列
  addToGiftQueue: (state, data) => {
    // 如果当前没有礼物在播放，直接设置为当前礼物
    if (!state.currentGiftEffect.id) {
      state.currentGiftEffect = {
        ...data, // 传入处理好的礼物数据
        id: generateRandomId(),
      };
    } else {
      // 否则，加入等待队列
      state.giftQueue.push(data);
    }
  },
  // 从队列中移除一个礼物（当一个礼物播放完成时调用）
  removeFromGiftQueue: (state) => {
    const list = state.giftQueue;
    // 如果队列为空，清空当前礼物
    if (list.length === 0) {
      state.currentGiftEffect = {
        id: '',
        path: '',
        userName: '',
        headImg: '',
      };
    } else {
      // 否则，取出队列中的下一个礼物进行播放
      const nextGift = list.shift();
      state.giftQueue = list; // 更新队列
      state.currentGiftEffect = {
        ...nextGift,
        id: generateRandomId(),
      };
    }
  },
};

const actions = {
  async fetchGiftListAll({ commit }) {
    const res = await getGiftList();
    const list = computeGiftListAll(res.data);
    commit('setGiftListAll', list);
    return list;
  },
  async fetchGiftSenderRankList({ commit }) {
    const res = await getSignRankList();
    const getTypeLabel = (type) => {
      if (!type) {
        return '';
      }
      return type.startsWith('1') ? '男方' : '女方';
    };
    const list = res.data?.list1.map((item) => ({
      ...item,
      positionName: getTypeLabel(item.position),
    })) || [];
    commit('setGiftSenderRankList', list);
    return list;
  },
  // 监听礼物消息的 Action
  listenGiftMessage({ commit, rootState }) {
    const { bus } = require('@/utils/websocket/v2/index'); // 延迟引入避免循环依赖
    // 监听 chat-message 事件，处理礼物消息
    bus.$on('chat-message', (msg) => {
      // 确保是礼物消息
      if (msg.miaoLwId) {
        // 从 giftListAll 中查找完整的礼物信息
        const giftInfo = rootState.gift.giftListAll.find(
          (item) => item.giftconst === msg.miaoLwId,
        );

        if (giftInfo) {
          // 提交到队列
          commit('addToGiftQueue', {
            path: giftInfo.coupontype,
            giftName: giftInfo.giftname,
            userName: msg.miaoName,
            headImg: msg.miaoHeadUrl,
          });
        }
      }
    });
  },
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
};
</file>

<file path="src/store/modules/instructions/index.js">
import { sendInstrunction } from '@/api/indexV2';

const state = {};

const mutations = {};

const actions = {
  /**
 * 发送指令到大屏幕
 * @param {Object} payload - 指令参数
 * @param {'game_control'|'router_jump'|'global_control'} payload.type - 指令大类
 * @param {string} payload.action - 具体操作
 * @param {Object} [payload.param] - 可选参数
 * @returns {Promise}
 */
  sendInstruction(_context, payload) {
    const { type, action, param } = payload;
    return sendInstrunction({ type, action, param });
  },
};

const getters = {};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
  getters,
};
</file>

<file path="src/store/modules/live.js">
import { getSplInfoNe } from '@/api/indexV2';

const state = {
  balance: 0, // 红包口袋余额
  person: 0, // 签到人数
};

const mutations = {
  SET_BALANCE(state, balance) {
    state.balance = balance;
  },
  SET_PERSON(state, person) {
    state.person = person;
  },
};

const actions = {
  async fetchSplInfo({ commit }) {
    try {
      const res = await getSplInfoNe();
      if (res) {
        commit('SET_BALANCE', res.balance);
        commit('SET_PERSON', res.person);
      }
    } catch (error) {
      // 可以根据需要处理错误
      console.error('获取签到人数和余额失败', error);
    }
  },
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
};
</file>

<file path="src/store/modules/menu/helper.js">
import globalControlMenu from '@/assets/constant/globalControlMenu';
import pageInteractionMenu from '@/assets/constant/pageInteractionMenu';

// 来自于司仪后台的数据拷贝
// 用于将来自于司仪后台的菜单配置数据转换为适配当前菜单的数据
// const controlMode = [
//   {
//     value: '3DSignIn',
//     label: '3D签到',
//   },
//   {
//     value: 'signBook',
//     label: '签到簿',
//   },
//   {
//     value: 'handwrittenSignIn',
//     label: '手写签到',
//   },
//   {
//     value: 'startRite',
//     label: '启动仪式',
//   },
//   {
//     value: 'spinItUp',
//     label: '转一转',
//   },
//   {
//     value: 'twistItUp',
//     label: '扭一扭',
//   },
//   {
//     value: 'guessRedPacket',
//     label: '猜红包',
//   },
//   {
//     value: 'raceAgainstTime',
//     label: '争分夺秒',
//   },
//   {
//     value: 'sendBlessing',
//     label: '送祝福',
//   },
//   {
//     value: 'luckyWheel',
//     label: '幸运小转盘',
//   },
//   {
//     value: 'tapRedPacket',
//     label: '点红包',
//   },
//   {
//     value: 'shakeRedPacket',
//     label: '摇红包',
//   },
//   {
//     value: 'peopleRedPacketRain',
//     label: '全民红包雨',
//   },
//   {
//     value: 'defaultShake',
//     label: '默认摇一摇',
//   },
//   {
//     value: 'monkeyClimbing',
//     label: '猴子爬树',
//   },
//   {
//     value: 'crazySwimming',
//     label: '疯狂游泳',
//   },
//   {
//     value: 'urbanRacing',
//     label: '都市赛车',
//   },
//   {
//     value: 'whoIsTheBest',
//     label: '谁最牛',
//   },
//   {
//     value: 'chasingTheBride',
//     label: '追新娘',
//   },
//   {
//     value: 'weddingCarShake',
//     label: '婚车摇一摇',
//   },
//   {
//     value: 'dragonBoatRace',
//     label: '赛龙舟',
//   },
//   {
//     value: 'liftThePalanquin',
//     label: '抬花轿',
//   },
//   {
//     value: 'tigerYearSkiing',
//     label: '虎年滑雪',
//   },
//   {
//     value: 'rabbitFlying',
//     label: '兔飞猛进',
//   },
//   {
//     value: 'dragonInTheSky',
//     label: '飞龙在天',
//   },
//   {
//     value: 'cutFruit',
//     label: '切水果',
//   },
//   {
//     value: 'countingMoney',
//     label: '数钞票',
//   },
//   {
//     value: 'countingMoneyNew',
//     label: '数钞票(新)',
//   },
//   {
//     value: 'pigout',
//     label: '狼吞虎咽',
//   },
//   {
//     value: 'clickTiger',
//     label: '武松打虎',
//   },
//   {
//     value: 'playFootball',
//     label: '谁是射手王',
//   },
//   {
//     value: 'basketballShoot',
//     label: '兔子投篮',
//   },
//   {
//     value: 'dragonPlayBead',
//     label: '游龙戏珠',
//   },
//   {
//     value: 'redPacketWall',
//     label: '红包墙',
//   },
//   {
//     value: 'openTreasureBox',
//     label: '开宝箱',
//   },
//   {
//     value: 'threeDLotteryEnterprise',
//     label: '3D抽奖',
//   },
//   {
//     value: 'listLottery',
//     label: '名单抽奖',
//   },
//   {
//     value: 'listLotteryParticle',
//     label: '新名单抽奖',
//   },
//   {
//     value: 'bigScreenLottery',
//     label: '巨幕抽奖',
//   },
//   {
//     value: 'earthLottery',
//     label: '地球抽奖',
//   },
//   {
//     value: 'pictureLottery',
//     label: '图片抽奖',
//   },
//   {
//     value: 'cardDraw',
//     label: '卡牌抽奖',
//   },
//   {
//     value: 'wheelLottery',
//     label: '转盘抽奖',
//   },
//   {
//     value: 'guessStar',
//     label: '搞笑猜明星',
//   },
//   {
//     value: 'guessStarCommon',
//     label: '猜明星',
//   },
//   {
//     value: 'guessIdiom',
//     label: '开心猜成语',
//   },
//   {
//     value: 'guessIdiomCommon',
//     label: '猜成语',
//   },
//   {
//     value: 'vote',
//     label: '投票',
//   },
//   {
//     value: 'guessHero',
//     label: '猜英雄',
//   },
//   {
//     value: 'guessSong',
//     label: '猜歌名',
//   },
//   {
//     value: 'guessStarBySteps',
//     label: '火眼金睛',
//   },
//   {
//     value: 'mahjong',
//     label: '互动雀神大赛',
//   },
//   {
//     value: 'mahjongV1',
//     label: '雀神大赛',
//   },
//   {
//     value: 'poem',
//     label: '诗词答题',
//   },
//   {
//     value: 'jumpBone',
//     label: '跳一跳',
//   },
//   {
//     value: 'giveMark',
//     label: '评分',
//   },
//   {
//     value: 'aoteman',
//     label: '猜奥特曼',
//   },
//   {
//     value: 'guessTextColor',
//     label: '说颜色',
//   },
//   {
//     value: 'guessGenerality',
//     label: '猜电影',
//   },
//   {
//     value: 'hanzi',
//     label: '神奇的汉字',
//   },
//   {
//     value: 'happyQA',
//     label: '开心问答',
//   },
//   {
//     value: 'guessLanternRiddle',
//     label: '猜灯谜',
//   },
//   {
//     value: 'gestureRiddle',
//     label: '你划我猜',
//   },
//   {
//     value: 'msgWall',
//     label: '祝福榜',
//   },
//   {
//     value: 'danmu',
//     label: '弹幕',
//   },
//   {
//     value: 'qrCode',
//     label: '二维码',
//   },
//   {
//     value: 'music',
//     label: '音乐',
//   },
//   {
//     value: 'curtainCall',
//     label: '谢幕',
//   },
//   {
//     value: 'guessSpeech',
//     label: '台词模仿秀',
//   },
//   {
//     value: 'guessPicture',
//     label: '看图识景',
//   },
//   {
//     value: 'guessBrand',
//     label: '品牌达人',
//   },
//   {
//     value: 'shoutRedPacket',
//     label: '喊红包',
//   },
//   {
//     value: 'luckySnake',
//     label: '福蛇贺岁',
//   },
//   {
//     value: 'goldenSnake',
//     label: '金蛇纳福',
//   },
//   {
//     value: 'playGift',
//     label: '免费发礼物',
//   },
//   {
//     value: 'playPicture',
//     label: '画面定格',
//   },
//   {
//     value: 'playVideo',
//     label: '视频播放',
//   },
// ];

// 扁平化页面交互菜单
const allPageInteractionItems = (function flatten(items) {
  return items.reduce((acc, item) => {
    if (item.children) {
      return acc.concat(flatten(item.children));
    }
    acc.push(item);
    return acc;
  }, []);
}(pageInteractionMenu));

// 合并所有菜单项并创建ID到菜单项的Map
const allMenuItems = [...allPageInteractionItems, ...globalControlMenu];
const menuItemsById = new Map(allMenuItems.map((item) => [item.id, item]));

// controlMode.value到菜单项ID的映射
const controlValueMapping = {
  danmu: 'danmu',
  curtainCall: 'curtainCall',
  '3DSignIn': '3dSign',
  startRite: 'openingCeremony',
  spinItUp: 'zyz',
  twistItUp: 'nyn',
  raceAgainstTime: 'zfdm',
  sendBlessing: 'wishRank',
  tapRedPacket: 'clickRedEnvelope',
  shakeRedPacket: 'shakeRedEnvelope',
  peopleRedPacketRain: 'nationalRedEnvelopeRain',
  shoutRedPacket: 'shoutRedEnvelope',
  monkeyClimbing: 'monkeyClimbingTree',
  urbanRacing: 'cityCarRace',
  chasingTheBride: 'chaseBride',
  liftThePalanquin: 'carryWeddingSedan',
  rabbitFlying: 'rabbitFlyingForward',
  dragonInTheSky: 'flyingDragon',
  luckySnake: 'fortuneSnake',
  countingMoney: 'mouseCashTicket',
  countingMoneyNew: 'countCashNew',
  pigout: 'wolfSwallow',
  clickTiger: 'wusongFightTiger',
  playFootball: 'whoIsTheShooter',
  basketballShoot: 'rabbitBasketball',
  dragonPlayBead: 'swimmingDragon',
  redPacketWall: 'hbWall',
  openTreasureBox: 'kbx',
  threeDLotteryEnterprise: '3dDraw',
  listLottery: 'listDraw',
  listLotteryParticle: 'newListDraw',
  bigScreenLottery: 'giantWheelDraw',
  earthLottery: 'earthDraw',
  pictureLottery: 'imageDraw',
  wheelLottery: 'turntableDraw',
  guessStar: 'funnyGuessStar',
  guessStarCommon: 'guessStar',
  guessIdiom: 'happyGuessIdioms',
  guessIdiomCommon: 'guessIdioms',
  guessSong: 'guessSongName',
  mahjong: 'interactiveGodCompetition',
  mahjongV1: 'godCompetition',
  poem: 'poetryQuiz',
  jumpBone: 'jump',
  giveMark: 'rating',
  guessGenerality: 'guessMovie',
  happyQA: 'happyQnA',
  guessLanternRiddle: 'guessRiddle',
  gestureRiddle: 'drawGuess',
  guessPicture: 'guessLandmarks',
  msgWall: 'wishWall',
  qrCode: 'qrcode',
  music: 'voice',
  playGift: 'freeGift',
  playPicture: 'photoFix',
  playVideo: 'videoPlay',
  cutFruit: 'cutFruit',
  tigerYearSkiing: 'tigerYearSkiing',
  crazySwimming: 'crazySwimming',
  whoIsTheBest: 'whoIsTheBest',
  weddingCarShake: 'weddingCarShake',
  dragonBoatRace: 'dragonBoatRace',
  cardDraw: 'cardDraw',
  aoteman: 'aoteman',
  guessTextColor: 'guessTextColor',
  hanzi: 'hanzi',
  guessSpeech: 'guessSpeech',
  guessBrand: 'guessBrand',
  guessHero: 'guessHero',
};

export function convertControlModeToMenu(controlModePart) {
  if (!Array.isArray(controlModePart)) {
    return [];
  }
  return controlModePart
    .map((value) => {
      const targetId = controlValueMapping[value] || value;
      return menuItemsById.get(targetId);
    })
    .filter(Boolean);
}

// Add these new helper functions at the bottom of the file
export function filterMenuByConverted(convertedMenu, pageInteractionMenu, globalControlMenu) {
  const filteredPageMenu = [];
  const filteredGlobalMenu = [];

  const isInConvertedMenu = (item) => {
    return convertedMenu.some((convertedItem) => convertedItem.id === item.id);
  };

  // Filter pageInteractionMenu
  pageInteractionMenu.forEach((section) => {
    const filteredSection = { ...section };
    if (section.children) {
      filteredSection.children = section.children.filter((child) => {
        if (child.children) {
          child.children = child.children.filter((subChild) => isInConvertedMenu(subChild));
          return child.children.length > 0;
        }
        return isInConvertedMenu(child);
      });
    }
    if (filteredSection.children && filteredSection.children.length > 0) {
      filteredPageMenu.push(filteredSection);
    }
  });

  // Special handling for globalControlMenu
  const specialMenuIds = new Set(['freeGift', 'photoFix', 'videoPlay', 'qrcode', 'voice', 'curtainCall', 'wishWall', 'danmu']);
  globalControlMenu.forEach((item) => {
    if (specialMenuIds.has(item.id)) {
      // Only include if exists in convertedMenu
      if (isInConvertedMenu(item)) {
        filteredGlobalMenu.push(item);
      }
    } else {
      // Include all other items
      filteredGlobalMenu.push(item);
    }
  });

  return {
    filteredPageMenu,
    filteredGlobalMenu,
  };
}
</file>

<file path="src/store/modules/menu/index.js">
// src/store/modules/menu/index.js
// 开启命名空间的 Vuex 模块骨架
import pageInteractionMenu from '@/assets/constant/pageInteractionMenu';
import globalControlMenu from '@/assets/constant/globalControlMenu';
import { reqGetRouterList } from '@/api/index';
import { convertControlModeToMenu, filterMenuByConverted } from './helper';

const state = {
  menu: [],
  selectedLeafMenu: null,
  globalMenu: [],
  isKeyboardVisible: false, // 键盘是否可见
};

const mutations = {
  setMenu(state, menu) {
    state.menu = menu;
  },
  setSelectedLeafMenu(state, menuObj) {
    state.selectedLeafMenu = menuObj;
    console.log('selectedLeafMenu', state.selectedLeafMenu);
  },
  setGlobalMenu(state, menu) {
    state.globalMenu = menu;
  },
  setKeyboardVisible(state, visible) {
    state.isKeyboardVisible = visible;
  },
};

const actions = {
  async initMenu({ commit }) {
    try {
      const res = await reqGetRouterList();
      if (!res?.isHasVal) {
        commit('setMenu', pageInteractionMenu);
        commit('setGlobalMenu', globalControlMenu);
        return;
      }
      const { remoteControlFuncs } = JSON.parse(res.data);
      const convertedMenu = convertControlModeToMenu(remoteControlFuncs);

      const { filteredPageMenu, filteredGlobalMenu } = filterMenuByConverted(
        convertedMenu,
        pageInteractionMenu,
        globalControlMenu,
      );

      commit('setMenu', filteredPageMenu);
      commit('setGlobalMenu', filteredGlobalMenu);

      console.log('Converted Menu:', convertedMenu);
    } catch (error) {
      console.error('Error fetching remote control functions:', error);
    }
  },
};

export default {
  namespaced: true,
  state,
  mutations,
  actions,
};
</file>

<file path="src/types/index.d.ts">
// 类型定义
import { RouteConfig } from 'vue-router';

type Meta = {
  id?: string;
  name?: string;
  /** 菜单图标 */
  icon?: string;
  /** 菜单背景 */
  bg?: string;
  // XXX 后续换成routeName，以防止大屏路由结构变化导致无法正常响应
  /** 大屏路由地址 */
  screenUrl?: string;
  /** 父级菜单id */
  parentId?: string;
  /** 菜单标题 */
  title?: string;
  /** 是否忽略权限 */
  isIgnoreAuth?: boolean;
  keepAlive?: boolean;
  /** 需要toScreen数据时，优先根据该字段去children中获取 */
  toScreenChildrenId: string;
  /** 点击菜单时发送给大屏的数据，后续逐步使用screenUrl代替 */
  toScreen?: {
    code: string;
    param?: string;
  };
  /** 是否显示内定抽奖测试 */
  isShowArrangedLotteryTest?: boolean;
};

type CustomRouteConfig = Omit<RouteConfig, 'meta' | 'children'> & {
  meta: Meta;
  children?: CustomRouteConfig[];
};
</file>

<file path="src/utils/index.js">
// 获取链接中的参数
export const getQueryString = (name) => {
  const reg = new RegExp(`(^|&)${name}=([^&]*)(&|$)`);
  if (window.location.href.indexOf('?') === -1) {
    return '';
  }
  const result = window.location.href.split('?')[1].match(reg);
  return result ? decodeURIComponent(result[2]) : null;
};

// 获取随机值  min<= num < max
export const getRandom = (min, max) => Math.floor(Math.random() * (max - min)) + min;

// 定时器任务
// 参数：(毫秒)time,(任务)task
export const timeoutTask = (task, time) => {
  const tmpTimeout = setTimeout(() => {
    task();
    clearTimeout(tmpTimeout);
  }, time);
};
// 生成随机字符串
export const generateRandomStr = (len) => {
  len = len || 32;
  const chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz';
  const maxPos = chars.length;
  let tmpStr = '';
  for (let i = 0; i < len; i += 1) {
    tmpStr += chars.charAt(Math.floor(Math.random() * maxPos));
  }
  return tmpStr;
};
// 生成随机Id
export const generateRandomId = () => generateRandomStr(6) + new Date().getTime();
// 解析url参数
export const getQuery = (url, name) => {
  const index = url.indexOf('?');
  if (index !== -1) {
    const queryStrArr = url.substr(index + 1).split('&');
    for (let i = 0; i < queryStrArr.length; i++) {
      const itemArr = queryStrArr[i].split('=');
      if (itemArr[0] === name) {
        return itemArr[1];
      }
    }
  }
  return null;
};

/**
 * @param {import("../types/index").CustomRouteConfig[]} routes 路由配置
 * @returns {menuItem[]} 菜单
 */
export const generateMenuFromRouteMain = (routes) => {
  const routeMain = routes?.find((route) => route.name === 'main');
  const menus = routeMain?.children.map((menu) => ({
    ...menu.meta,
    subMenus: (menu?.children || []).map((subMenu) => ({
      ...subMenu.meta,
      name: subMenu.meta.title,
      routeName: subMenu.name,
    })),
  }));
  return menus;
};

/**
 * 获取链接中的hash
 */
export const getHash = () => {
  const url = window.location.href;
  const { hash } = new URL(url);
  const path = hash.split('?')[0];
  return path.replace(/^#\//, '');
};

// 获取当前时间
export const getCurrentDate = () => {
  return new Date(+new Date() + 8 * 3600 * 1000)
    .toJSON()
    .substr(0, 19)
    .replace('T', ' ');
};

// 工具函数：排除目标属性
/**
 * 返回排除指定属性之外的对象
 * @param {Object} obj 目标对象
 * @param {string} excludeKey 要排除的属性名
 * @returns {Object} 新对象
 */
export const excludeProperty = (obj, excludeKey) => {
  if (!obj || typeof obj !== 'object') return {};
  const { [excludeKey]: _, ...rest } = obj;
  return rest;
};
</file>

<file path="src/utils/multipleScreenResolve.js">
/**
 * 多个大屏解决方案
 *
 * 默认导出vue实例，可以实现通信
 */

import * as utils from '@/utils';
import Vue from 'vue';
// 雀神大赛

/**
 * 总题库，答案数量为1~6各三十道题目，总共180道题目
 * @date 2024-11-07
 * @author LXY
 */
export const TOTALSUBJECTLIST = [
  {
    mahjongSubjectList: [2, 2, 3, 4, 5, 6, 6, 7, 8, 8, 9, 9, 9],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [1, 2, 4, 4, 5, 6, 7, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [3],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 5, 6, 6, 6, 7, 9, 9, 9],
    mahjongAnswerList: [3],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 9],
    mahjongAnswerList: [5],
  },
  {
    mahjongSubjectList: [1, 3, 4, 4, 4, 6, 6, 6, 7, 7, 7, 8, 9],
    mahjongAnswerList: [2],
  },
  {
    mahjongSubjectList: [1, 1, 2, 4, 4, 4, 5, 5, 6, 6, 7, 8, 9],
    mahjongAnswerList: [3],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9],
    mahjongAnswerList: [2],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 6, 8, 9],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [1, 1, 1, 3, 3, 4, 4, 5, 5, 6, 7, 7, 8],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 4, 5, 5, 5, 6, 7, 8, 9, 9],
    mahjongAnswerList: [3],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 4, 5, 6, 6, 6, 7, 7, 8, 9],
    mahjongAnswerList: [3],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9],
    mahjongAnswerList: [3],
  },
  {
    mahjongSubjectList: [2, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [2],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 8, 9],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 9],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [1, 1, 3, 4, 4, 4, 4, 5, 5, 7, 7, 9, 9],
    mahjongAnswerList: [3],
  },
  {
    mahjongSubjectList: [2, 2, 2, 3, 4, 4, 4, 5, 7, 8, 8, 9, 9],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 4, 4, 5, 6, 7, 8, 8, 9],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 7, 8, 9],
    mahjongAnswerList: [6],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 3, 4, 5, 6, 6, 6, 8, 9],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 5, 5, 5, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [2],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9],
    mahjongAnswerList: [3],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 3, 3, 3, 4, 6, 6, 7, 8, 8],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 5, 5, 7, 8, 8, 8, 9, 9],
    mahjongAnswerList: [6],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 4, 4, 5, 5, 5, 6, 6, 8, 8],
    mahjongAnswerList: [5],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 4, 4, 4, 6, 6, 8, 9],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9],
    mahjongAnswerList: [3],
  },
  {
    mahjongSubjectList: [1, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8, 9],
    mahjongAnswerList: [2],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 5, 5, 6, 6, 7, 7, 9],
    mahjongAnswerList: [9],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 2, 6, 6, 7, 8, 8, 9, 9, 9],
    mahjongAnswerList: [7],
  },
  {
    mahjongSubjectList: [3, 4, 5, 5, 5, 6, 7, 7, 8, 8, 8, 9, 9],
    mahjongAnswerList: [6, 7],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 6, 7, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [5, 8],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 6, 6, 7, 7, 8, 9, 9],
    mahjongAnswerList: [5, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 2, 3, 3, 4, 4, 6, 7, 8, 8],
    mahjongAnswerList: [5, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 2, 3, 4, 5, 5, 6, 6, 7, 8],
    mahjongAnswerList: [4, 7],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 2, 4, 4, 5, 5, 5, 7, 8, 9],
    mahjongAnswerList: [1, 4],
  },
  {
    mahjongSubjectList: [1, 1, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8, 9],
    mahjongAnswerList: [2, 5],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 7, 9, 9],
    mahjongAnswerList: [7, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 6, 6, 7, 7, 7, 8, 9, 9],
    mahjongAnswerList: [7, 9],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 9],
    mahjongAnswerList: [1, 4],
  },
  {
    mahjongSubjectList: [1, 1, 3, 3, 3, 4, 5, 6, 6, 7, 7, 8, 9],
    mahjongAnswerList: [5, 8],
  },
  {
    mahjongSubjectList: [1, 2, 2, 2, 3, 3, 4, 5, 7, 7, 9, 9, 9],
    mahjongAnswerList: [2, 7],
  },
  {
    mahjongSubjectList: [1, 2, 2, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9],
    mahjongAnswerList: [2, 4],
  },
  {
    mahjongSubjectList: [1, 1, 3, 3, 4, 4, 5, 5, 5, 6, 7, 8, 8],
    mahjongAnswerList: [1, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9],
    mahjongAnswerList: [5, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 5, 5, 6, 8, 8, 8, 9, 9],
    mahjongAnswerList: [5, 9],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 4, 4, 5, 5, 6, 7, 8, 8, 8],
    mahjongAnswerList: [3, 6],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 3, 4, 5, 5, 7, 7, 8, 8, 9],
    mahjongAnswerList: [6, 9],
  },
  {
    mahjongSubjectList: [1, 1, 3, 4, 5, 5, 6, 7, 7, 8, 8, 8, 9],
    mahjongAnswerList: [1, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 4, 5, 7, 7, 7, 8, 9],
    mahjongAnswerList: [3, 6],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 8, 9],
    mahjongAnswerList: [1, 8],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 4, 5, 6, 7, 8, 8, 8, 9, 9],
    mahjongAnswerList: [4, 9],
  },
  {
    mahjongSubjectList: [2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 7, 8, 8],
    mahjongAnswerList: [1, 4],
  },
  {
    mahjongSubjectList: [2, 2, 3, 3, 4, 4, 6, 6, 7, 7, 8, 8, 9],
    mahjongAnswerList: [6, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 8, 9],
    mahjongAnswerList: [4, 8],
  },
  {
    mahjongSubjectList: [2, 2, 3, 3, 4, 5, 6, 6, 6, 7, 8, 8, 8],
    mahjongAnswerList: [1, 4],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 2, 3, 4, 5, 6, 6, 6, 7, 7],
    mahjongAnswerList: [1, 7],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 9],
    mahjongAnswerList: [1, 9],
  },
  {
    mahjongSubjectList: [1, 1, 3, 3, 4, 4, 5, 5, 7, 8, 8, 8, 9],
    mahjongAnswerList: [1, 8],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9],
    mahjongAnswerList: [2, 5],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 7, 8, 9],
    mahjongAnswerList: [1, 4, 7],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 3, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [1, 2, 3],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8],
    mahjongAnswerList: [2, 5, 8],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9],
    mahjongAnswerList: [1, 4, 7],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 4, 5, 6, 6, 7, 7, 8],
    mahjongAnswerList: [1, 4, 7],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8],
    mahjongAnswerList: [2, 5, 8],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 4, 5, 6, 6, 6, 7, 7, 8, 8],
    mahjongAnswerList: [1, 4, 7],
  },
  {
    mahjongSubjectList: [2, 3, 3, 4, 5, 6, 6, 6, 7, 7, 7, 8, 8],
    mahjongAnswerList: [1, 3, 4],
  },
  {
    mahjongSubjectList: [1, 1, 3, 4, 5, 5, 6, 6, 7, 7, 7, 8, 9],
    mahjongAnswerList: [2, 5, 8],
  },
  {
    mahjongSubjectList: [2, 3, 3, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9],
    mahjongAnswerList: [3, 6, 9],
  },
  {
    mahjongSubjectList: [1, 1, 4, 4, 4, 4, 5, 5, 6, 6, 7, 9, 9],
    mahjongAnswerList: [1, 7, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9],
    mahjongAnswerList: [3, 6, 9],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9],
    mahjongAnswerList: [1, 3, 6],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [3, 6, 9],
  },
  {
    mahjongSubjectList: [3, 3, 4, 4, 5, 5, 6, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [3, 6, 9],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 5, 5, 6, 7, 8, 8, 8, 9, 9],
    mahjongAnswerList: [5, 8, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9, 9, 9],
    mahjongAnswerList: [4, 6, 9],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 9],
    mahjongAnswerList: [1, 4, 7],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 5, 6, 6, 6, 7, 7, 8, 9],
    mahjongAnswerList: [1, 4, 6],
  },
  {
    mahjongSubjectList: [2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9],
    mahjongAnswerList: [1, 4, 7],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 5, 6, 6, 7, 7, 7, 8, 8, 9],
    mahjongAnswerList: [2, 5, 8],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9],
    mahjongAnswerList: [1, 4, 7],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 8, 8, 8],
    mahjongAnswerList: [2, 5, 8],
  },
  {
    mahjongSubjectList: [1, 1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 8, 9],
    mahjongAnswerList: [3, 6, 9],
  },
  {
    mahjongSubjectList: [2, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 8, 9],
    mahjongAnswerList: [1, 4, 5],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 8, 8],
    mahjongAnswerList: [1, 4, 7],
  },
  {
    mahjongSubjectList: [3, 3, 3, 4, 5, 5, 6, 7, 8, 8, 8, 9, 9],
    mahjongAnswerList: [3, 6, 9],
  },
  {
    mahjongSubjectList: [1, 1, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 9],
    mahjongAnswerList: [1, 5, 8],
  },
  {
    mahjongSubjectList: [2, 2, 2, 3, 3, 3, 4, 5, 6, 6, 7, 8, 9],
    mahjongAnswerList: [3, 6, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 5, 6, 7, 7, 7, 8, 8, 8],
    mahjongAnswerList: [3, 5, 6],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 9],
    mahjongAnswerList: [5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 9],
    mahjongAnswerList: [1, 4, 7, 9],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 2, 3, 4, 5, 6, 7, 7, 8, 9],
    mahjongAnswerList: [1, 2, 5, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7],
    mahjongAnswerList: [2, 3, 5, 8],
  },
  {
    mahjongSubjectList: [2, 2, 3, 3, 4, 4, 5, 6, 7, 7, 7, 9, 9],
    mahjongAnswerList: [1, 4, 7, 9],
  },
  {
    mahjongSubjectList: [1, 1, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 8],
    mahjongAnswerList: [1, 3, 6, 9],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 4, 4, 6, 7, 8, 8, 8],
    mahjongAnswerList: [1, 4, 5, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 7, 8, 9],
    mahjongAnswerList: [2, 3, 5, 6],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 9, 9, 9],
    mahjongAnswerList: [1, 4, 7, 8],
  },
  {
    mahjongSubjectList: [2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9],
    mahjongAnswerList: [1, 2, 4, 7],
  },
  {
    mahjongSubjectList: [1, 1, 1, 4, 4, 5, 5, 6, 6, 7, 7, 9, 9],
    mahjongAnswerList: [1, 4, 7, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 9, 9],
    mahjongAnswerList: [1, 4, 7, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 4, 5, 5, 6, 6, 9, 9],
    mahjongAnswerList: [1, 4, 7, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, 8],
    mahjongAnswerList: [2, 3, 4, 5],
  },
  {
    mahjongSubjectList: [2, 3, 3, 4, 4, 5, 5, 6, 7, 7, 9, 9, 9],
    mahjongAnswerList: [1, 4, 7, 8],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 4, 4, 5, 6, 6, 7, 7, 8],
    mahjongAnswerList: [2, 3, 5, 8],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 4, 5, 5, 6, 7, 9, 9, 9],
    mahjongAnswerList: [1, 4, 7, 8],
  },
  {
    mahjongSubjectList: [1, 2, 3, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8, 9, 9],
    mahjongAnswerList: [1, 4, 7, 8],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 4, 4, 6, 6, 6, 8, 8],
    mahjongAnswerList: [1, 4, 6, 8],
  },
  {
    mahjongSubjectList: [1, 2, 2, 2, 3, 4, 5, 6, 7, 7, 8, 8, 9],
    mahjongAnswerList: [1, 3, 6, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9],
    mahjongAnswerList: [6, 7, 8, 9],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 2, 2, 7, 7, 8, 8, 9, 9, 9],
    mahjongAnswerList: [6, 7, 8, 9],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 4, 5, 5, 5, 7, 8, 9],
    mahjongAnswerList: [1, 3, 4, 6],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [1, 2, 2, 2, 2, 3, 4, 5, 6, 7, 7, 8, 9],
    mahjongAnswerList: [1, 3, 4, 7],
  },
  {
    mahjongSubjectList: [1, 2, 3, 5, 5, 6, 6, 7, 7, 8, 9, 9, 9],
    mahjongAnswerList: [4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8],
    mahjongAnswerList: [2, 5, 6, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 7, 8],
    mahjongAnswerList: [1, 3, 4, 5],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 4, 5, 6, 6, 8, 8, 8],
    mahjongAnswerList: [3, 5, 6, 7],
  },
  {
    mahjongSubjectList: [1, 1, 1, 3, 3, 3, 4, 5, 6, 7, 7, 8, 9],
    mahjongAnswerList: [2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 8],
    mahjongAnswerList: [1, 4, 6, 7, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 5, 5, 6, 7, 8, 9, 9, 9],
    mahjongAnswerList: [2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [4, 4, 4, 4, 5, 6, 6, 7, 8, 8, 8, 8, 9],
    mahjongAnswerList: [3, 5, 6, 7, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 4, 5, 5, 5, 5, 6, 7, 8, 9],
    mahjongAnswerList: [1, 3, 4, 6, 7],
  },
  {
    mahjongSubjectList: [2, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9, 9],
    mahjongAnswerList: [1, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 7],
    mahjongAnswerList: [2, 3, 5, 6, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 3, 4, 4, 5, 6, 7, 8, 9],
    mahjongAnswerList: [2, 3, 5, 6, 9],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 5, 5, 6, 6, 6, 7, 8],
    mahjongAnswerList: [4, 5, 6, 7, 9],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9],
    mahjongAnswerList: [1, 2, 3, 4, 7],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 5, 5, 5, 5, 6, 6, 7, 8],
    mahjongAnswerList: [3, 4, 6, 7, 9],
  },
  {
    mahjongSubjectList: [1, 1, 1, 3, 4, 5, 5, 6, 7, 8, 9, 9, 9],
    mahjongAnswerList: [2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9],
    mahjongAnswerList: [1, 2, 3, 6, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 4, 4, 5, 6, 7, 7, 8, 8, 9],
    mahjongAnswerList: [3, 5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8],
    mahjongAnswerList: [4, 5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 5, 5, 6, 7, 7, 8, 9, 9, 9],
    mahjongAnswerList: [5, 6, 7, 8, 9],
  },
  {
    mahjongSubjectList: [3, 3, 3, 4, 5, 6, 7, 7, 8, 8, 9, 9, 9],
    mahjongAnswerList: [3, 6, 7, 8, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 5, 5, 5, 6, 6, 7, 8, 9],
    mahjongAnswerList: [3, 4, 6, 7, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 4, 4, 5, 6, 6, 7, 7, 8, 8],
    mahjongAnswerList: [3, 5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9],
    mahjongAnswerList: [5, 6, 7, 8, 9],
  },
  {
    mahjongSubjectList: [2, 3, 4, 4, 5, 6, 7, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [1, 4, 7, 8, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 5, 5, 6, 6, 6, 7, 7, 7],
    mahjongAnswerList: [2, 4, 5, 6, 7],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 6, 7, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [1, 4, 7, 8, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 9, 9, 9],
    mahjongAnswerList: [1, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9],
    mahjongAnswerList: [1, 2, 4, 5, 7],
  },
  {
    mahjongSubjectList: [2, 2, 2, 4, 5, 5, 5, 6, 7, 8, 9, 9, 9],
    mahjongAnswerList: [3, 4, 5, 6, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 5, 5, 5, 6, 6, 6, 7, 7],
    mahjongAnswerList: [2, 3, 5, 6, 7],
  },
  {
    mahjongSubjectList: [1, 2, 3, 5, 6, 7, 7, 7, 8, 8, 9, 9, 9],
    mahjongAnswerList: [4, 6, 7, 8, 9],
  },
  {
    mahjongSubjectList: [2, 2, 2, 3, 3, 3, 4, 4, 5, 6, 7, 8, 9],
    mahjongAnswerList: [2, 3, 4, 5, 7],
  },
  {
    mahjongSubjectList: [1, 2, 3, 3, 4, 5, 6, 7, 7, 7, 7, 8, 8],
    mahjongAnswerList: [2, 5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9],
    mahjongAnswerList: [1, 4, 5, 6, 7, 9],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 9],
    mahjongAnswerList: [2, 3, 5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, 8],
    mahjongAnswerList: [1, 2, 3, 4, 5, 8],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 9, 9, 9],
    mahjongAnswerList: [1, 2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [3, 3, 3, 4, 5, 6, 6, 7, 7, 7, 8, 8, 8],
    mahjongAnswerList: [3, 5, 6, 7, 8, 9],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 7, 8],
    mahjongAnswerList: [2, 3, 5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9, 9, 9],
    mahjongAnswerList: [1, 2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 7, 8],
    mahjongAnswerList: [3, 4, 5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [1, 1, 1, 4, 5, 6, 7, 8, 8, 8, 9, 9, 9],
    mahjongAnswerList: [3, 4, 6, 7, 8, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 8, 8, 9],
    mahjongAnswerList: [1, 3, 4, 6, 7, 9],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9],
    mahjongAnswerList: [1, 2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 3, 4, 5, 6, 6, 7, 7, 8, 8],
    mahjongAnswerList: [2, 3, 5, 6, 8, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 8],
    mahjongAnswerList: [1, 3, 4, 6, 7, 9],
  },
  {
    mahjongSubjectList: [2, 2, 2, 3, 4, 4, 5, 5, 6, 6, 7, 8, 9],
    mahjongAnswerList: [1, 3, 4, 6, 7, 9],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 6, 6, 6, 6, 7, 7, 8, 8, 9],
    mahjongAnswerList: [1, 2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [2, 2, 2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9],
    mahjongAnswerList: [1, 3, 4, 6, 7, 9],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 6, 7, 7, 8, 8, 9, 9, 9, 9],
    mahjongAnswerList: [1, 2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8],
    mahjongAnswerList: [1, 4, 5, 6, 7, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 5, 5, 5, 6, 7, 8, 8, 8],
    mahjongAnswerList: [1, 3, 4, 6, 7, 9],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 5, 6, 6, 6, 6, 7, 9, 9, 9],
    mahjongAnswerList: [1, 2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [2, 3, 4, 5, 5, 5, 6, 7, 7, 7, 9, 9, 9],
    mahjongAnswerList: [1, 4, 5, 6, 7, 8],
  },
  {
    mahjongSubjectList: [2, 3, 3, 4, 4, 5, 5, 6, 7, 8, 9, 9, 9],
    mahjongAnswerList: [1, 2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [1, 1, 1, 2, 2, 2, 3, 4, 4, 4, 5, 6, 7],
    mahjongAnswerList: [1, 2, 3, 4, 5, 8],
  },
  {
    mahjongSubjectList: [1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 8, 8],
    mahjongAnswerList: [1, 3, 4, 6, 7, 9],
  },
  {
    mahjongSubjectList: [1, 2, 3, 4, 5, 5, 5, 6, 7, 8, 9, 9, 9],
    mahjongAnswerList: [1, 3, 4, 5, 6, 9],
  },
  {
    mahjongSubjectList: [2, 3, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 9],
    mahjongAnswerList: [1, 3, 4, 5, 6, 9],
  },
  {
    mahjongSubjectList: [2, 2, 2, 3, 3, 3, 4, 5, 6, 6, 7, 7, 8],
    mahjongAnswerList: [2, 3, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [1, 2, 2, 3, 3, 4, 5, 6, 7, 8, 9, 9, 9],
    mahjongAnswerList: [1, 2, 4, 5, 7, 8],
  },
  {
    mahjongSubjectList: [2, 2, 2, 3, 4, 5, 5, 6, 6, 6, 7, 7, 8],
    mahjongAnswerList: [1, 3, 4, 6, 7, 9],
  },
  {
    mahjongSubjectList: [2, 2, 2, 3, 4, 5, 6, 7, 7, 8, 8, 9, 9],
    mahjongAnswerList: [1, 3, 4, 6, 7, 9],
  },
].map((item) => {
  // 随机改变花色
  function getRandomNumber() {
    return 1 + Math.floor(Math.random() * 3); // 生成1到3之间的随机数
  }

  const type = getRandomNumber();
  return {
    mahjongSubjectList: item.mahjongSubjectList.map((item) => {
      let newItem = item;
      if (type === 2) {
        newItem = item + 10;
      } else if (type === 3) {
        newItem = item + 20;
      }
      return newItem;
    }),
    mahjongAnswerList: item.mahjongAnswerList.map((item) => {
      let newItem = item;
      if (type === 2) {
        newItem = item + 10;
      } else if (type === 3) {
        newItem = item + 20;
      }
      return newItem;
    }),
  };
});

/**
 * 每张牌对应的图片链接
 * @date 2024-11-08
 * @author LXY
 */
// 1-9 -> 万；11-19 -> 筒；21-29 -> 条
const MAHJONGIMGS = [
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/1.png',
    value: 1,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/2.png',
    value: 2,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/3.png',
    value: 3,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/4.png',
    value: 4,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/5.png',
    value: 5,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/6.png',
    value: 6,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/7.png',
    value: 7,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/8.png',
    value: 8,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/9.png',
    value: 9,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/11.png',
    value: 11,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/12.png',
    value: 12,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/13.png',
    value: 13,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/14.png',
    value: 14,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/15.png',
    value: 15,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/16.png',
    value: 16,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/17.png',
    value: 17,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/18.png',
    value: 18,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/19.png',
    value: 19,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/21.png',
    value: 21,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/22.png',
    value: 22,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/23.png',
    value: 23,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/24.png',
    value: 24,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/25.png',
    value: 25,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/26.png',
    value: 26,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/27.png',
    value: 27,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/28.png',
    value: 28,
  },
  {
    imgUrl: 'https://ustatic.joymew.com/joymewScreen/screenImage/miniGame/mahjong/29.png',
    value: 29,
  },
];

/**
 * 生成题目列表
 */
class MahjongQuestioner {
  #list;

  #index = -1;

  /**
   * @param {Number} total 总题数
   * @param {Number} type 题目类型 1:简单 2:普通
   */
  constructor(type = 1, total = 20) {
    this.total = total;
    /**
     * 目前的逻辑是简单的所有题库为1~3
     * 困难的为3~6
     */
    let result;
    if (type === 1) {
      result = TOTALSUBJECTLIST.filter(($) => $.mahjongAnswerList.length <= 3);
    } else {
      result = TOTALSUBJECTLIST.filter(($) => $.mahjongAnswerList.length >= 3);
    }

    /**
     * 将数组里面的数据，
     */
    this.#list = result
      .sort(() => Math.random() - 0.5) // 随机排序
      .slice(0, total)
      .map((item) => {
        const getImgUrl = (value) => MAHJONGIMGS.find((img) => img.value === value);
        // 将每张牌转化为图片链接
        const subjectList = item.mahjongSubjectList.map(getImgUrl);
        const answerList = item.mahjongAnswerList.map(getImgUrl);
        return {
          subjectList,
          answerList,
        };
      });
  }

  /**
   * 获取下一题，如果没有则是undefined需要判断
   * @returns
   */
  next(number) {
    /**
     * 因为index的默认值是-1，每次调用该方法必先加一
     * 所以 this.#list[this.#index]表示的是当前题目
     *
     *
     */
    this.#index++;
    if (!this.#list[this.#index]) return undefined;
    // 没传递任何参数则是正常获取下一题
    if (!number) {
      return this.#list[this.#index];
    }
    // 说明需要指定下一张牌的答案张数
    // 从总题库中取出答案为该张数的所有题目，目前是个30道总共180
    const allQuestion = TOTALSUBJECTLIST.filter(($) => $.mahjongAnswerList.length === number);
    // 判断从已经答题的题目中是否存在相同的题目
    const passQuestion = this.#list.slice(0, this.#index);

    // 拿到所有没有出现过的，符合答案张数的题目
    const noAppearQuestion = allQuestion.filter((question) => {
      // 如果所有题目中，该题目已经存在于已答题的题目中，则跳过
      let flag = false;
      passQuestion.forEach((passQ) => {
        if (passQ.subjectList.map((item) => item.value).toString() === question.mahjongSubjectList.toString()) {
          flag = true;
        }
      });
      return !flag;
    });
    // 打乱noAppearQuestion
    noAppearQuestion.sort(() => Math.random() - 0.5);
    // 拿出一题
    const current = noAppearQuestion.shift();

    // 将索引加一并且将上一题的题目改成刚才拿出的题目，
    const getImgUrl = (value) => MAHJONGIMGS.find((img) => img.value === value);
    this.#list[this.#index] = {
      answerList: current.mahjongAnswerList.map(getImgUrl),
      subjectList: current.mahjongSubjectList.map(getImgUrl),
    };

    return this.#list[this.#index];
  }

  getList() {
    return this.#list;
  }
}

let type = 1;
/**
 * 设置麻将题目的难易程度
 * @param {String} difficult
 */
export function setDifficulty(difficult) {
  if (difficult === 'easy') {
    type = 1;
  } else if (difficult === 'hard') {
    type = 2;
  }
}
/**
 * 获取麻将题库
 * @returns
 */

export function getQuestioner() {
  return new MahjongQuestioner(type);
}

let lastExeTime = 0;
/**
 * 是否可以执行代码
 * @returns
 */
export function canIExe() {
  const now = Date.now();
  if (now - lastExeTime > 1000) {
    lastExeTime = now;
    return true;
  }
  return false;
}

let fromScreen = false;

export function setFromScreen(isFromScreen) {
  fromScreen = isFromScreen;
}

export function getFromScreen() {
  return fromScreen;
}

/**
 *
 * 说颜色的多屏解决方案
 */

const COLORS = [
  { color: 'red', text: '红' },
  { color: 'orange', text: '橙' },
  { color: 'yellow', text: '黄' },
  { color: 'green', text: '绿' },
  { color: 'blue', text: '蓝' },
  { color: 'purple', text: '紫' },
  { color: 'black', text: '黑' },
  { color: 'gray', text: '灰' },
];
export class GuessColorQuestioner {
  #list;

  #index = -1;

  constructor(number = 20) {
    /**
     * 生成指定数量的题目，
     */
    const list = [];
    for (let i = 0; i < number; i++) {
      const question = [];
      for (let j = 0; j < 6; j++) {
        /**
         * 拿到随机的颜色
         */
        const { color } = COLORS[utils.getRandom(0, COLORS.length)];

        /**
         * 拿到随机的内容
         */
        const { text } = COLORS[utils.getRandom(0, COLORS.length)];

        question.push({
          color,
          text,
        });
      }
      list.push(question);
    }
    this.#list = list;

    console.log('所有说颜色的题目内容', list);
  }

  /**
   * 所有题目的答案
   */
  get answerList() {
    const answerList = [];

    this.#list.forEach((item) => {
      const answer = [];
      item.forEach((item) => {
        answer.push(item.text);
      });
      answerList.push(answer);
    });
    return answerList;
  }

  /**
   * 获取下一题
   */
  next() {
    return this.#list[++this.#index];
  }

  /**
   * 随机获取一道题目,不限次数
   */
  static getQuestion() {
    const question = [];
    for (let j = 0; j < 6; j++) {
      /**
       * 拿到随机的颜色
       */
      const { color } = COLORS[utils.getRandom(0, COLORS.length)];
      /**
       * 拿到随机的内容
       */
      const { text } = COLORS[utils.getRandom(0, COLORS.length)];

      question.push({
        color,
        text,
      });
    }
    return question;
  }

  static qToA(q) {
    switch (q) {
      case 'red':
        return '红';
      case 'orange':
        return '橙';
      case 'yellow':
        return '黄';
      case 'green':
        return '绿';
      case 'blue':
        return '蓝';
      case 'purple':
        return '紫';
      case 'black':
        return '黑';
      case 'gray':
        return '灰';
      default:
        return '';
    }
  }

  /**
   *
   */
}

/**
 * 遥控器进入猜文字颜色页面的时间戳,
 * 目的:存储
 */
let timeStamp = 0;

export function setCwzTimeStamp(number) {
  // alert(number);
  timeStamp = number;
}

export function getCwzTimeStamp() {
  return timeStamp;
}

export default new Vue();
</file>

<file path="src/utils/request.js">
import { queryScreenStatus } from '@/modules/screenStatusJudge';
import router from '@/router/index';
import store from '@/store/index';
import axios from 'axios';

const NEED_TOKEN_URL = ['hmGiftController/listGift7', 'sendMsgController/liwuGo6', 'hmGiftController/editMusicStatus', 'hmGiftController/getMusicList', 'newPlay/mjEnterGame', 'hmGiftController/findGiftRankListAll'];

function setTokenWhenRequestNeed(config) {
  const tmpNeedTokenUrlLen = NEED_TOKEN_URL.length;
  for (let i = 0; i < tmpNeedTokenUrlLen; i += 1) {
    if (config.url.indexOf(NEED_TOKEN_URL[i]) > -1) {
      config.headers.token = store.state.tokenH5;
      break;
    }
  }
}
function queryScreenStatusWhenSendMsg(config) {
  if (config.url.includes('sendMsgController/toScreen') && router.currentRoute.fullPath === '/controllerV2') {
    queryScreenStatus();
  }
}

const service = axios.create({
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded',
  },
  baseURL: process.env.VUE_APP_BASE_API,
  timeout: 60000,
  transformRequest: [
    (data) => {
      let tResult;
      if (data) {
        const keys = Object.keys(data);
        const t = [];
        keys.forEach((item) => {
          t.push(`${item}=${data[item]}`);
        });
        tResult = t.join('&');
      } else {
        tResult = data;
      }
      return tResult;
    },
  ],
});

/* 过滤请求 */
service.interceptors.request.use((config) => {
  setTokenWhenRequestNeed(config);
  queryScreenStatusWhenSendMsg(config);
  store.commit('showGlobalLoading');
  return config;
});

/* 过滤响应 */
service.interceptors.response.use(
  (result) => {
    store.commit('hideGlobalLoading');
    return result.data;
  },
  (err) => {
    return Promise.reject(err);
  },
);

export default service;
</file>

<file path="src/utils/requestWWW.js">
import axios from 'axios';
import qs from 'qs';
// 转换form-data
function transformRequestData(data) {
  if (data instanceof FormData) {
    return data;
  }
  return qs.stringify(data);
}

// 创建form-urlencoded实例
const service = axios.create({
  baseURL: 'https://www.hudongmiao.com/',
  headers: {
    'Content-Type': 'application/x-www-form-urlencoded',
  },
  transformRequest: [transformRequestData],
  timeout: 10000,
});

// 响应拦截器
service.interceptors.response.use((result) => {
  return result.data.data;
});

export default service;
</file>

<file path="src/utils/websocket/handleMessage.js">
//  TODO 正逐步迁移到 src/modules/screenMessenger，迁移完成后删除此文件
import { tellScreenStatus } from '@/modules/screenStatusJudge';
import * as multipleScreen from '@/utils/multipleScreenResolve';
import { CONTROL_CODE } from '../../assets/constant/index';
import app from '../../main';
import router from '../../router';
import store from '../../store/index';
// 解决多个大屏问题雀神大赛
/** 遥控器接收到的控制指令 */
const CONTROL_CODE_TO_REMOTE = {
  ROUTER_JUMP: 'router_jump',
  OTHERS: 'others',
};

// 5001~9999为大屏发送给遥控器的指令
export const REPLYCODE = {
  ON_3DSIGN: '5001', // 在3D签到页面
  ON_SIGNBOOK: '5002', // 在签到簿页面
  ON_BUBBLESIGN: '5003', // 在手写签到页面
  ON_HOME: '5004', // 在首页
  ON_XYDB: '5005', // 在幸运夺宝页面(转一转)
  ON_NYN: '5006', // 在扭一扭页面
  ON_HBYSET: '5007', // 在红包雨设置金额页面
  ON_HBYSETFAIL: '5008', // 红包雨设置错误
  ON_HBY: '5009', // 在红包雨游戏界面
  ON_CLICKHBSET: '5010', // 在点红包设置页面
  ON_SHAKE: '5011', // 在默认摇一摇页面
  ON_SHAKE_MONKEY: '5012', // 在猴子爬树页面
  ON_SHAKE_SWIM: '5013', // 在游泳摇一摇页面
  ON_SHAKE_CITYCAR: '5014', // 在都市赛车页面
  ON_SHAKE_CATTLE: '5015', // 在谁最牛页面
  ON_SHAKE_ZXN: '5016', // 在追新娘页面
  ON_SHAKE_WEDCAR: '5017', // 在婚车摇一摇页面
  ON_SHAKE_DRADONBOAT: '5018', // 在赛龙舟页面
  ON_DRAGONFAIL: '5019', // 赛龙舟进入失败
  ON_COUNTMONEY: '5020', // 在数钞票页面
  ON_CUTFRUIT: '5021', // 在切水果页面
  ON_KBXCHOOSE: '5022', // 在开宝箱类型选择页面
  ON_KBXCHOOSEFAIL: '5023', // 开宝箱类型选择出错
  ON_KBXWAIT: '5024', // 开宝箱等待页面
  ON_KBX: '5025', // 开宝箱游戏页面
  ON_KBXRANK: '5026', // 开宝箱排行榜页面
  ON_KBXOPENED: '5027', // 当前宝箱已经开启
  ON_HBWALLCHOOSE: '5028', // 在红包墙类型选择页面
  ON_HBWALLCHOOSEFAIL: '5029', // 红包墙类型选择出错
  ON_HBWALLWAIT: '5030', // 红包墙等待页面
  ON_HBWALL: '5031', // 红包墙游戏页面
  ON_HBWALLRANK: '5032', // 红包墙排行榜页面
  ON_HBWALLOPENED: '5033', // 当前红包已经开启
  ON_3DLOTTERY: '5034', // 在3D抽奖页面
  ON_3DLOTTERYSHOWENDBTN: '5034-01', // 3D抽奖页面出现结束抽奖的按钮
  ON_3DLOTTERYINANI: '5034-02', // 抽奖执行动画中
  ON_3DLOTTERYENDANI: '5034-03', // 抽奖动画结束
  ON_3DLOTTERYNOMOREPRIZE: '5035', // 3D抽奖显示没有更多奖项了
  ON_3DLOTTERYNOMOREDATA: '5036', // 3D抽奖显示没有更多数据了
  ON_SHEETLOTTERY: '5037', // 在名单抽奖页面
  ON_SHEETLOTTERY_PARTICLE: '5037-01', // 在新名单抽奖页面
  ON_DANMULOTTERY: '5038-01', // 在弹幕抽奖页面
  ON_SCREENLOTTERY: '5038', // 在巨幕抽奖页面
  ON_LOTTERYFAIL: '5039', // 抽奖人数不够
  ON_SHEETLOTTERYUPLOADTIP: '5040', // 名单抽奖 没有上传名单提示
  ON_MINIGAME: '5041', // 在小游戏页面
  ON_GXCMX: '5042', // 在搞笑猜明星页面
  ON_CMX: '5043', // 在猜明星页面
  ON_KXCCY: '5044', // 在开心猜成语页面
  ON_CCY: '5045', // 在猜成语页面
  ON_VOTE: '5046', // 在投票页面
  ON_CYX: '5047', // 在猜英雄页面
  ON_CGM: '5048', // 在猜歌名页面
  ON_HYJJ: '5049', // 在火眼金睛页面
  ON_QSDS: '5050', // 在雀神大赛页面
  ON_SCDT: '5051', // 在诗词答题页面
  ON_MINIGAMEANS: '5052', // 小游戏答案
  ON_JUMPBONE: '5053', // 在跳一跳页面
  ON_GIVEMARK: '5054', // 在评分页面
  ON_GUESSHBWAIT: '5055', // 在猜红包等待页面
  ON_GUESSHBUNRECHARGE: '5056', // 猜红包未充值
  ON_GUESSHBON: '5057', // 猜红包游戏界面
  ON_XIEMU: '5058', // 在谢幕界面
  ON_XIEMUFAIL: '5059', // 谢幕打开失败
  ON_PIGOUT: '5060', // 在狼吞虎咽页面
  ON_SPHERE_LOTTERY: '5061', // 在球形抽奖页面
  ON_SHAKE_SEDANCHAIR: '5062', // 在抬花轿页面
  ON_SHAKE_TIGER: '5063', // 在虎年滑雪页面
  ON_CLICKTIGER: '5064', // 在武松打虎页面
  ON_PICTURE_LOTTERY: '5065', // 在照片抽奖页面
  ON_ZFDMCHOOSE: '5066', // 在争分夺秒类型选择页面
  ON_ZFDMCHOOSEFAIL: '5067', // 争分夺秒类型选择出错
  ON_ZFDMGAME: '5068', // 争分夺秒游戏页面
  ON_ZFDMRANK: '5069', // 争分夺秒排行榜页面
  ON_ZFDMWAIT: '5070', // 争分夺秒等待页面
  ON_SZFGAME: '5071', // 送祝福游戏页面
  ON_SZFRANK: '5072', // 送祝福排行榜页面
  ON_SZFCHOOSE: '5073', // 送祝福选择时间页面
  ON_VIDEOPLAY: '5074', // 视频播放页面
  ON_FIXEDSCREEN: '5075', // 定屏播放页面
  ON_PLAYFOOTBALL: '5076', // 在谁是射手王页面
  ON_SHAKE_RUBBIT: '5077', // 在兔飞猛进页面
  ON_LUCKY_WHEEL: '5078', // 在幸运小转盘页面
  ON_CARD_LOTTER: '5079', // 在卡牌抽奖页面
  ON_CARD_ANSWER: '5080', // 卡牌抽奖答案
  ON_STARTRITE: '5081', // 在启动仪式页面
  ON_AOTEMAN: '5083', // 在猜奥特曼页面
  ON_ORDERSONG: '5082', // 在点歌页面
  ON_CWZYS: '5084', // 在猜文字颜色页面
  ON_GUESSGENERALITY: '5085', // 在猜电影页面
  ON_GIVEMARKOLD: '5086', // 在评分页面(旧版)
  ON_QSDSNEW: '5087', // 进入雀神大赛（新版）
  ON_HANZI: '5088', // 进入神奇汉字
  ON_HAPPYQA: '5089', // 进入开心问答
  ON_NEXTSONG: '5090', // 点歌切换歌曲
  ON_ALLHBYSET: '5091', // 点红包设置金额页面
  ON_GUESSSPEECH: '5092', // 在猜台词页面
  ON_SHOUTHBSET: '5093', // 在大喊红包页面，遥控器此时进入输入红包数
  ON_GOLDENSNAKE: '5094', // 在金蛇纳福页面
  ON_LUCKYSNAKE: '5095', // 在福蛇贺岁页面
  ON_GUESSANI: '5096', // 在猜动画页面中
  ON_PLAYPOKER: '5097', // 在扑克残局游戏页面
  ON_PLAYPOKER_RESTART: '5098', // 扑克残局游戏重新开始时
  ON_PLYAPOKER_PRODUCED: '5099', // 扑克残局游戏出牌结束后
  ON_BOXLOTTERY: '5100', // 在抽奖箱抽奖页面
  ON_MONEYTREESHAKE: '5101', // 在摇钱树页面
};

export const handleActionMessage = (action) => {
  if (!action) return;
  const actionObj = JSON.parse(action);
  if (actionObj.code === CONTROL_CODE_TO_REMOTE.ROUTER_JUMP) {
    router.push({ name: actionObj.param.routeName });
    return;
  }
  //   console.log( 'actionObj.code', actionObj.code, 'actionObj.param', actionObj.param)
  switch (actionObj.code) {
    // 切换游戏通用情况
    case CONTROL_CODE.ON_GAME_CHANGE:
      app.$store.commit('setCurrentMenuId', actionObj.param.id);

      app.$router.replace({
        path: '/main',
      });
      break;
    case REPLYCODE.ON_3DSIGN: // 大屏打开3D签到
      app.$store.commit('setCurrentMenuId', '0-1');

      break;
    case REPLYCODE.ON_SIGNBOOK: // 大屏打开签到簿
      app.$store.commit('setCurrentMenuId', '0-2');

      break;
    case REPLYCODE.ON_BUBBLESIGN: // 大屏打开手写签到
      app.$store.commit('setCurrentMenuId', '0-3');

      break;
    case REPLYCODE.ON_STARTRITE: // 大屏打开启动仪式
      app.$store.commit('setCurrentMenuId', '0-4');

      break;
    case REPLYCODE.ON_HOME: // 大屏打开首页
      console.log('大屏打开首页!');
      app.$store.commit('setCurrentMenuId', '');
      app.$router.replace({
        path: '/controllerV2',
      });
      break;
    case REPLYCODE.ON_XYDB: // 大屏打开幸运夺宝(转一转)
      app.$store.commit('setCurrentMenuId', '1-1');

      break;
    case REPLYCODE.ON_NYN: // 大屏打开扭一扭
      app.$store.commit('setCurrentMenuId', '1-2');

      break;
    case REPLYCODE.ON_LUCKY_WHEEL: // 大屏打开幸运小转盘
      app.$store.commit('setCurrentMenuId', '1-6');

      break;
    case REPLYCODE.ON_GUESSHBWAIT: // 大屏打开猜红包
      app.$store.commit('setCurrentMenuId', '1-3');
      app.$store.commit('updateGuessHbStatus', 0);

      break;
    case REPLYCODE.ON_HBYSET: // 大屏打开红包雨(摇红包)设置金额页面
      app.$store.commit('setCurrentMenuId', '2-2');
      app.$store.commit('setHbyStep', 0);

      break;
    case REPLYCODE.ON_ALLHBYSET: // 大屏打开全民红包雨(摇红包)设置金额页面
      app.$store.commit('setCurrentMenuId', '2-3');
      app.$store.commit('setHbyStep', 0);

      break;
    case REPLYCODE.ON_SHOUTHBSET: // 大屏打开大喊红包
      app.$store.commit('setCurrentMenuId', '2-4');
      app.$store.commit('setHbyStep', 0);
      break;
    case REPLYCODE.ON_HBYSETFAIL: // 大屏设置红包雨出错
      if (actionObj.param === '0') {
        app.$toast.fail('请输入正确的金额');
      } else if (actionObj.param === '1') {
        app.$toast.fail('金额错误,请先至后台进行充值');
      } else if (actionObj.param === '2') {
        app.$toast.fail('请输入正确的个数');
      } else if (actionObj.param === '3') {
        app.$toast.fail('单个红包金额必须大于0.3元！');
      }
      break;
    case REPLYCODE.ON_HBY:
      app.$store.commit('setHbyStep', 1);
      break;
    case REPLYCODE.ON_CLICKHBSET: // 大屏打开点红包设置金额页面
      app.$store.commit('setCurrentMenuId', '2-1');

      app.$store.commit('setHbyStep', 0);
      break;
    case REPLYCODE.ON_SHAKE: // 大屏打开默认摇一摇
      app.$store.commit('setCurrentMenuId', '3-1');

      break;
    case REPLYCODE.ON_SHAKE_MONKEY: // 大屏打开猴子爬树
      app.$store.commit('setCurrentMenuId', '3-2');

      break;
    case REPLYCODE.ON_SHAKE_SWIM: // 大屏打开游泳摇一摇
      app.$store.commit('setCurrentMenuId', '3-3');

      break;
    case REPLYCODE.ON_SHAKE_CITYCAR: // 大屏打开都市赛车
      app.$store.commit('setCurrentMenuId', '3-4');

      break;
    case REPLYCODE.ON_SHAKE_CATTLE: // 大屏打开谁最牛
      app.$store.commit('setCurrentMenuId', '3-5');

      break;
    case REPLYCODE.ON_SHAKE_ZXN: // 大屏打开追新娘
      app.$store.commit('setCurrentMenuId', '3-6');

      break;
    case REPLYCODE.ON_SHAKE_WEDCAR: // 大屏打开婚车摇一摇
      app.$store.commit('setCurrentMenuId', '3-7');

      break;
    case REPLYCODE.ON_SHAKE_DRADONBOAT: // 大屏打开赛龙舟
      app.$store.commit('setCurrentMenuId', '3-8');

      break;
    case REPLYCODE.ON_DRAGONFAIL: // 赛龙舟进入失败
      app.$toast.fail('需要去后台创建至少两支队伍才能开始游戏！');
      break;
    case REPLYCODE.ON_COUNTMONEY: // 大屏打开数钞票
      app.$store.commit('setCurrentMenuId', '4-2');

      break;
    case REPLYCODE.ON_PIGOUT: // 大屏打开狼吞虎咽
      app.$store.commit('setCurrentMenuId', '4-4');

      break;
    case REPLYCODE.ON_CLICKTIGER: // 大屏打开武松打虎
      app.$store.commit('setCurrentMenuId', '4-5');
      break;
    case REPLYCODE.ON_GOLDENSNAKE: // 大屏打开金蛇纳福
      // alert('大屏打开金蛇纳福');
      app.$store.commit('setCurrentMenuId', '4-9');
      break;
    case REPLYCODE.ON_LUCKYSNAKE:
      app.$store.commit('setCurrentMenuId', '3-12');
      break;
    case REPLYCODE.ON_MONEYTREESHAKE:
      app.$store.commit('setCurrentMenuId', '3-13');
      break;
    case REPLYCODE.ON_PLAYFOOTBALL: // 大屏打开谁是射手王
      console.log('大屏打开谁是射手王');
      app.$store.commit('setCurrentMenuId', '4-6');

      break;
    case REPLYCODE.ON_SHAKE_SEDANCHAIR: // 大屏打开抬花轿
      app.$store.commit('setCurrentMenuId', '3-9');

      break;
    case REPLYCODE.ON_SHAKE_TIGER: // 大屏打开虎年滑雪
      app.$store.commit('setCurrentMenuId', '3-10');

      break;
    case REPLYCODE.ON_SHAKE_RUBBIT: // 大屏打开兔飞猛进
      app.$store.commit('setCurrentMenuId', '3-11');

      break;
    case REPLYCODE.ON_CUTFRUIT: // 大屏打开切水果
      app.$store.commit('setCurrentMenuId', '4-1');

      break;
    case REPLYCODE.ON_KBXCHOOSE: // 大屏打开开宝箱类型选择页面
      app.$store.commit('setCurrentMenuId', '5-2');
      app.$store.commit('setKbxStep', 0);

      break;
    case REPLYCODE.ON_KBXCHOOSEFAIL: // 开宝箱选择类型出错
      app.$toast.fail(`红包口袋不足${actionObj.param}元,开始失败!`);
      break;
    case REPLYCODE.ON_KBXWAIT: // 开宝箱等待页面
      app.$store.commit('setKbxStep', 1);
      break;
    case REPLYCODE.ON_KBX: // 开宝箱游戏页面
      app.$store.commit('setKbxStep', 2);
      break;
    case REPLYCODE.ON_KBXRANK: // 开宝箱排行榜页面
      app.$store.commit('setKbxStep', 3);
      break;
    case REPLYCODE.ON_KBXOPENED: // 开宝箱某个宝箱已经开启
      actionObj.param = actionObj.param === '0' ? 0 : actionObj.param;
      app.$store.commit('updateOpenedBox', actionObj.param);
      break;
    case REPLYCODE.ON_HBWALLCHOOSE: // 大屏打开开红包墙类型选择页面
      app.$store.commit('setCurrentMenuId', '5-1');
      app.$store.commit('setHbwallStep', 0);

      break;
    case REPLYCODE.ON_HBWALLCHOOSEFAIL: // 红包墙选择类型出错
      app.$toast.fail(`红包口袋不足${actionObj.param}元,开始失败!`);
      break;
    case REPLYCODE.ON_HBWALLWAIT: // 红包墙等待页面
      app.$store.commit('setHbwallStep', 1);
      break;
    case REPLYCODE.ON_HBWALL: // 红包墙游戏页面
      app.$store.commit('setHbwallStep', 2);
      break;
    case REPLYCODE.ON_HBWALLRANK: // 红包墙排行榜页面
      app.$store.commit('setHbwallStep', 3);
      break;
    case REPLYCODE.ON_HBWALLOPENED: // 红包墙某个某个红包已经开启
      actionObj.param = actionObj.param === '0' ? 0 : actionObj.param;
      app.$store.commit('updateOpenedHb', actionObj.param);
      break;
    case REPLYCODE.ON_3DLOTTERY: // 大屏打开3D抽奖页面
      console.log('大屏打开3D抽奖页面');
      app.$store.commit('updateSheetChoosePeople', 'reset');
      app.$store.commit('setCurrentMenuId', '6-1');
      app.$store.commit('setLotteryType', '3d');
      // app.$store.commit('setLotteryPrizeInfo', actionObj.param)
      break;
    case REPLYCODE.ON_BOXLOTTERY: // 大屏打开抽奖箱抽奖页面
      app.$store.commit('updateSheetChoosePeople', 'reset');
      app.$store.commit('setCurrentMenuId', '6-10');
      app.$store.commit('setLotteryType', 'box');
      break;
    case REPLYCODE.ON_3DLOTTERYNOMOREPRIZE: // 3D抽奖显示没有更多奖项了
      app.$toast.fail('没有更多奖项啦!');
      break;
    case REPLYCODE.ON_3DLOTTERYNOMOREDATA: // 3D抽奖显示没有更多数据了
      app.$toast.fail('没有更多数据啦!');
      break;
    case REPLYCODE.ON_LOTTERYFAIL: // 抽奖人数不够提示
      app.$toast.fail('抽奖人数不够!');
      if (actionObj.param) {
        app.$store.commit('updateSheetChoosePeople', actionObj.param);
      }
      break;
    case REPLYCODE.ON_3DLOTTERYSHOWENDBTN: // 3D抽奖显示结束按钮
      app.$store.commit('updatePersonStopBtnVisible', true);
      break;
    case REPLYCODE.ON_3DLOTTERYINANI: // 抽奖动画执行中
      app.$store.commit('updateLottyerInAni', true);
      break;
    case REPLYCODE.ON_3DLOTTERYENDANI: // 抽奖动画结束
      app.$store.commit('updateLottyerInAni', false);
      break;
    case REPLYCODE.ON_SHEETLOTTERY: // 大屏打开名单抽奖页面
      app.$store.commit('updateSheetChoosePeople', 'reset');
      app.$store.commit('updateIsSheetLotteryNoUpload', false);
      app.$store.commit('setCurrentMenuId', '6-2');
      app.$store.commit('setLotteryType', 'sheet');
      app.$store.commit('updateSheetLotteryStatus', actionObj.param);

      break;
    case REPLYCODE.ON_SHEETLOTTERY_PARTICLE: // 大屏打开新名单抽奖页面
      app.$store.commit('updateSheetChoosePeople', 'reset');
      app.$store.commit('updateIsSheetLotteryNoUpload', false);
      app.$store.commit('setCurrentMenuId', '6-8');
      app.$store.commit('setLotteryType', 'sheet');
      app.$store.commit('updateSheetLotteryStatus', actionObj.param);
      break;
    case REPLYCODE.ON_DANMULOTTERY: // 大屏打开弹幕抽奖页面
      app.$store.commit('updateSheetChoosePeople', 'reset');
      app.$store.commit('updateIsSheetLotteryNoUpload', false);
      app.$store.commit('setCurrentMenuId', '6-9');
      app.$store.commit('setLotteryType', 'danmu');
      console.log('actionObj.param', actionObj.param);
      app.$store.commit('updateDanmuLotteryStatus', actionObj.param);
      break;
    case REPLYCODE.ON_SCREENLOTTERY: // 大屏打开巨幕抽奖页面
      app.$store.commit('updateSheetChoosePeople', 'reset');
      app.$store.commit('setCurrentMenuId', '6-3');
      app.$store.commit('setLotteryType', 'screen');
      app.$store.commit('updateScreenLotteryStatus', actionObj.param);

      break;
    case REPLYCODE.ON_SPHERE_LOTTERY: // 大屏打开地球抽奖页面
      app.$store.commit('updateSheetChoosePeople', 'reset');
      app.$store.commit('updateIsSheetLotteryNoUpload', false);
      app.$store.commit('setCurrentMenuId', '6-4');
      app.$store.commit('setLotteryType', 'earth');
      app.$store.commit('updateEarthLotteryStatus', actionObj.param);

      break;
    case REPLYCODE.ON_CARD_LOTTER: // 大屏打开卡牌抽奖页面
      app.$store.commit('setCurrentMenuId', '6-6');
      app.$store.commit('setLotteryType', 'card');
      app.$store.commit('updatecardLotteryStatus', actionObj.param);

      break;
    case REPLYCODE.ON_PICTURE_LOTTERY: // 大屏打开图片抽奖页面
      app.$store.commit('updateSheetChoosePeople', 'reset');
      app.$store.commit('setCurrentMenuId', '6-5');
      app.$store.commit('setLotteryType', 'picture');
      app.$store.commit('updatePictureLotteryStatus', actionObj.param);

      break;
    case REPLYCODE.ON_SHEETLOTTERYUPLOADTIP: // 名单抽奖 没有上传名单提示
      app.$store.commit('updateIsSheetLotteryNoUpload', true);
      break;
    case REPLYCODE.ON_MINIGAME: // 小游戏页面
      app.$store.commit('setCurrentMenuId', '7');

      break;
    case REPLYCODE.ON_GXCMX: // 大屏在搞笑猜明星页面
      app.$store.commit('setCurrentMenuId', '7-1');

      break;
    case REPLYCODE.ON_CMX: // 大屏在猜明星页面
      app.$store.commit('setCurrentMenuId', '7-2');

      break;
    case REPLYCODE.ON_KXCCY: // 大屏在开心猜成语页面
      app.$store.commit('setCurrentMenuId', '7-3');

      break;
    case REPLYCODE.ON_CCY: // 大屏在猜成语页面
      app.$store.commit('setCurrentMenuId', '7-4');

      break;
    case REPLYCODE.ON_VOTE: // 大屏在投票页面
      app.$store.commit('setCurrentMenuId', '7-5');

      break;
    case REPLYCODE.ON_CYX: // 大屏在猜英雄页面
      app.$store.commit('setCurrentMenuId', '7-6');

      break;
    case REPLYCODE.ON_CGM: // 大屏在猜歌名页面
      app.$store.commit('setCurrentMenuId', '7-7');

      break;
    case REPLYCODE.ON_AOTEMAN: // 大屏在猜奥特曼页面
      app.$store.commit('setCurrentMenuId', '7-14');

      break;
    case REPLYCODE.ON_HANZI: // 大屏在神奇的汉字页面
      app.$store.commit('setCurrentMenuId', '7-16');

      break;
    case REPLYCODE.ON_GUESSGENERALITY: // 大屏在猜电影页面
      app.$store.commit('setCurrentMenuId', '7-15');
      break;
    case REPLYCODE.ON_GUESSANI: // 大屏在猜动画页面
      app.$store.commit('setCurrentMenuId', '7-24');
      break;
    case REPLYCODE.ON_GUESSSPEECH: // 大屏在猜台词页面
      app.$store.commit('setCurrentMenuId', '7-21');
      break;
    case REPLYCODE.ON_HYJJ: // 大屏在火眼金睛页面
      app.$store.commit('setCurrentMenuId', '7-8');

      break;
    case REPLYCODE.ON_QSDS: // 大屏在雀神大赛页面
      if (multipleScreen.canIExe()) {
        console.log('执行了方法');
        /**
         * 如果有值说明是大屏要求遥控器生成题目
         */
        if (actionObj.param) {
          multipleScreen.setFromScreen(false);
        } else {
          multipleScreen.setFromScreen(true);
        }
        multipleScreen.setDifficulty(actionObj.param);
        app.$store.commit('setCurrentMenuId', '7-18');
      } else console.log('没有执行方法');

      break;
    case REPLYCODE.ON_QSDSNEW: // 大屏在互动雀神大赛
      // 清除之前的答案
      app.$store.commit('updateCurrentMiniGameAnswer', '');
      app.$store.commit('setCurrentMenuId', '7-9');

      break;
    case REPLYCODE.ON_SCDT: // 大屏在诗词答题页面
      app.$store.commit('setCurrentMenuId', '7-10');

      break;
    case REPLYCODE.ON_MINIGAMEANS: // 小游戏答案
      app.$store.commit('updateCurrentMiniGameAnswer', actionObj.param);
      break;
    case REPLYCODE.ON_CARD_ANSWER:
      app.$store.commit('updateCardAnswer', actionObj.param);
      break;
    case REPLYCODE.ON_JUMPBONE: // 大屏打开跳一跳
      app.$store.commit('setCurrentMenuId', '7-11');

      break;
    case REPLYCODE.ON_CWZYS: // 大屏打开猜文字游戏
      app.$store.commit('setCurrentMenuId', '7-13');
      break;
    case REPLYCODE.ON_CWZYS_TIMESTAMP: // 猜文字游戏时间戳
      multipleScreen.setCwzTimeStamp(parseInt(actionObj.param, 10));
      break;
    case REPLYCODE.ON_GIVEMARK: // 大屏打开评分(新版)
      app.$store.commit('setCurrentMenuId', '7-12');

      app.$store.commit('setGiveMarkVersion', 'new');
      break;
    case REPLYCODE.ON_GIVEMARKOLD: // 大屏打开评分(旧版)
      app.$store.commit('setCurrentMenuId', '7-12');

      app.$store.commit('setGiveMarkVersion', 'old');
      break;
    case REPLYCODE.ON_GUESSHBUNRECHARGE: // 猜红包未充值
      app.$toast.fail('尚未充值红包!游戏开启失败!');
      break;
    case REPLYCODE.ON_GUESSHBON: // 猜红包游戏界面
      app.$store.commit('setCurrentMenuId', '1-3');
      app.$store.commit('updateGuessHbStatus', 1);
      break;
    case REPLYCODE.ON_XIEMU: // 谢幕界面
      app.$store.commit('setCurrentMenuId', '8-6');
      break;
    case REPLYCODE.ON_XIEMUFAIL: // 谢幕打开失败
      app.$toast.fail('后台设置好谢幕信息后重新进入大屏!');
      break;
    case REPLYCODE.ON_ZFDMCHOOSE: // 在争分夺秒类型选择页面
      app.$store.commit('setCurrentMenuId', '1-4');
      app.$store.commit('setZfdmStep', 0);
      app.$store.commit('setZfdmList', JSON.parse(actionObj.param));
      break;
    case REPLYCODE.ON_ZFDMCHOOSEFAIL: // 争分夺秒选择类型出错
      app.$toast.fail(`红包口袋不足${actionObj.param}元,开始失败!`);
      break;
    case REPLYCODE.ON_ZFDMGAME: // 争分夺秒游戏页面
      app.$store.commit('setZfdmStep', 2);
      break;
    case REPLYCODE.ON_ZFDMRANK: // 争分夺秒排行榜页面
      app.$store.commit('setZfdmStep', 3);
      break;
    case REPLYCODE.ON_ZFDMWAIT: // 争分夺秒等待页面
      app.$store.commit('setZfdmStep', 1);
      break;
    case REPLYCODE.ON_SZFGAME: // 在送祝福游戏页面
      app.$store.commit('setSzfStep', 1);
      break;
    case REPLYCODE.ON_SZFRANK: // 在送祝福排行榜页面
      app.$store.commit('setSzfStep', 2);
      break;
    case REPLYCODE.ON_SZFCHOOSE:
      app.$store.commit('setCurrentMenuId', '1-5');
      app.$store.commit('setSzfStep', 0);
      break;
    case REPLYCODE.ON_VIDEOPLAY:
      app.$store.commit('setMediaList', JSON.parse(actionObj.param));
      break;
    case REPLYCODE.ON_FIXEDSCREEN:
      app.$store.commit('setMediaList', JSON.parse(actionObj.param));
      break;
    case REPLYCODE.ON_ORDERSONG: // 大屏打开点歌
      app.$router.replace({
        path: '/chooseSongMain',
      });
      break;
    case REPLYCODE.ON_HAPPYQA: // 大屏在开心问答页面
      app.$store.commit('setCurrentMenuId', '7-17');

      break;
    case REPLYCODE.ON_NEXTSONG: // 点歌切歌
      app.$store.commit('setCurrentSongId', actionObj.param);
      break;
    case REPLYCODE.ON_PLAYPOKER: // 大屏在扑克游戏页面
      app.$store.commit('setCurrentMenuId', '7-25');
      break;
    case REPLYCODE.ON_PLAYPOKER_RESTART: // 大屏扑克游戏发牌结束
      app.$store.commit('setNewPokerData', actionObj.param);
      break;
    case REPLYCODE.ON_PLYAPOKER_PRODUCED: // 大屏扑克游戏出牌结束
      console.log('ON_PLYAPOKER_PRODUCED');
      app.$store.commit('setNewPokerData', actionObj.param);
      break;
    default:
      console.log('switch参数异常!', actionObj);
  }
};

/**
 * 全局消息处理函数
 * @param {*} message
 * @returns
 */
export const globalHandleMessage = (message) => {
  if (message.type !== 'yaokongqi') return;
  const logStyle = 'background: #39C5BB; padding: 2px 4px; border-radius: 2px;';
  console.log('%c 消息:', logStyle, message);
  tellScreenStatus(message.data);
  if (message.data.type === 'gameInit' && message.data?.data?.gameId) {
    store.commit('setCurrentMenuId', message.data.data.gameId);
    return;
  }

  // 针对非游戏初始化发送的消息，以及也非旧形式的消息，进行处理
  const miaoYkqCodeObj = JSON.parse(message.data.miaoYkqCode);
  if (!miaoYkqCodeObj?.code && miaoYkqCodeObj?.param?.gameId) {
    store.commit('setCurrentMenuId', miaoYkqCodeObj.param.gameId);
    return;
  }

  // 旧的消息处理方式
  handleActionMessage(message?.data?.miaoYkqCode);
};
</file>

<file path="src/utils/websocket/v2/chatHelper.js">
// 处理chat消息
// handleMessage 事件名规则：必须以 chat- 开头
const handleMessage = (message, bus) => {
  if (message.type === 'wsya' || message.type === 'liwu') {
    bus.$emit('chat-message', message.data);
  }
};
export default handleMessage;
</file>

<file path="src/utils/websocket/v2/index.js">
import store from '@/store';
import Vue from 'vue';
import WebsocketHeartbeatJs from 'websocket-heartbeat-js';
import handleMessage from './chatHelper';
import handleRemoteControlMessage from './mainHelper';

const getWSH5Url = () => `wss://ct.hudongmiao.com/haimiao?miaoId=${store.state.token}&splid=${store.state.liveId}&kind=2`;
let wsInstance = null;
let mainWsInstance = null;
const bus = new Vue();

/**
 * 初始化H5 WebSocket连接
 * @param {string} url WebSocket连接地址
 * @param {function} onReconnect 重连回调函数
 */
export const initH5Ws = ({ url = getWSH5Url(), onReconnect = () => {} } = {}) => {
  if (wsInstance) {
    return Promise.resolve();
  }
  return new Promise((resolve, reject) => {
    wsInstance = new WebsocketHeartbeatJs({
      url,
      pingTimeout: 120000,
      pingMsg: 'snhb',
      repeatLimit: 3,
    });

    wsInstance.onreconnect = () => {
      onReconnect();
    };

    wsInstance.onclose = () => {
      console.log('WebSocket connection closed');
    };

    wsInstance.onmessage = (e) => {
      if (e.data === 'hb') return;
      try {
        const message = JSON.parse(e.data);
        handleMessage(message, bus);
        // 使用事件总线发送消息
        // bus.$emit('websocket-message', message);
      } catch (error) {
        console.error('WebSocket message parse error:', error);
      }
    };

    wsInstance.onopen = () => {
      resolve();
    };

    wsInstance.onerror = (error) => {
      reject(error);
    };
  });
};

// 新增 getWSUrl 方法，参照 App.vue 中 initOld 的 url 生成规则
export const getWSUrl = () => {
  const liveId = sessionStorage.getItem('liveId');
  return `${process.env.VUE_APP_CHAT_API}haimiao?splid=${liveId}&kind=remoteControl`;
};

// 新增 initWs 方法，结构与 initH5Ws 基本一致，默认 url 使用 getWSUrl
export const initWs = ({ url = getWSUrl(), onReconnect = () => {} } = {}) => {
  if (mainWsInstance) {
    return Promise.resolve();
  }
  return new Promise((resolve, reject) => {
    mainWsInstance = new WebsocketHeartbeatJs({
      url,
      pingTimeout: 120000,
      pingMsg: 'snhb',
      repeatLimit: 3,
    });

    mainWsInstance.onreconnect = () => {
      onReconnect();
    };

    mainWsInstance.onclose = () => {
      console.log('WebSocket connection closed');
    };

    mainWsInstance.onmessage = (e) => {
      if (e.data === 'hb') return;
      try {
        const message = JSON.parse(e.data);
        // 这里调用 handleRemoteControlMessage，bus 由外部共用
        handleRemoteControlMessage(message, bus);
      } catch (error) {
        console.error('WebSocket message parse error:', error);
      }
    };

    mainWsInstance.onopen = () => {
      resolve();
    };

    mainWsInstance.onerror = (error) => {
      reject(error);
    };
  });
};

// 导出事件总线以便组件使用
export { bus };
</file>

<file path="src/utils/websocket/v2/mainHelper.js">
import store from '@/store';
import * as multipleScreen from '@/utils/multipleScreenResolve';

const REPLYCODE = {
  ON_CARD_ANSWER: '5080',
  ON_HBYSET: '5007',
  ON_HBY: '5009',
  ON_CLICKHBSET: '5010',
  ON_SHOUTHBSET: '5093',
  ON_ALLHBYSET: '5091',
  ON_MINIGAMEANS: '5052',
  ON_QSDS: '5050',
  ON_ZFDMCHOOSE: '5066',
  ON_KBXCHOOSE: '5022',
  ON_KBXWAIT: '5024',
  ON_KBX: '5025',
  ON_KBXRANK: '5026',
  ON_KBXOPENED: '5027',
  ON_HBWALLCHOOSE: '5028', // 新增红包墙类型选择
  ON_HBWALLWAIT: '5030', // 红包墙等待页面
  ON_HBWALL: '5031', // 红包墙游戏页面
  ON_HBWALLRANK: '5032', // 红包墙排行榜
  ON_NEXTSONG: '5090',
  ON_VIDEOPLAY: '5074', // 视频播放页面
  ON_FIXEDSCREEN: '5075', // 定屏播放页面
  OTHERS: 'others',
  ON_XIEMUFAIL: '5059', // 谢幕打开失败
};

const HBY_SET_CODES = [
  REPLYCODE.ON_HBYSET,
  REPLYCODE.ON_CLICKHBSET,
  REPLYCODE.ON_SHOUTHBSET,
  REPLYCODE.ON_ALLHBYSET,
];

// 处理红包口袋充值消息
function handleRedkdMessage(message) {
  const miaoChiGold = message?.data?.miaoChiGold;
  if (miaoChiGold) {
    store.commit('live/SET_BALANCE', Number(miaoChiGold));
  }
}

// 处理数据传输的消息
function handleDataTransfer(miaoYkqCode) {
  if (miaoYkqCode.action === 'MusicPlayer') {
    // 音乐播放器数据传输
    store.commit('setMusicPlayerData', JSON.parse(miaoYkqCode.param));
  } else if (miaoYkqCode.action === 'moneyTreeShake') {
    store.commit('game/SET_MONEY_TREE_SHAKE_CHOOSE_MODE', miaoYkqCode.param === 'chooseMode');
  }
}

// 处理雀神大赛页面消息
function handleQsdsMessage(miaoYkqCode, store) {
  if (miaoYkqCode.param) {
    multipleScreen.setFromScreen(false);
  } else {
    multipleScreen.setFromScreen(true);
  }
  multipleScreen.setDifficulty(miaoYkqCode.param);
  store.commit('game/SET_TRIGGER_INIT_MAHJONG_PAGE', true);
}

// 处理遥控器消息
function handleYaokongqiMessage(message, bus) {
  const miaoYkqCodeRaw = message?.data?.miaoYkqCode;
  if (miaoYkqCodeRaw) {
    const miaoYkqCode = JSON.parse(miaoYkqCodeRaw);
    if (miaoYkqCode.type === 'message') {
      bus.$toast(miaoYkqCode.action);
    } else if (miaoYkqCode.type === 'dataTransfer') {
      handleDataTransfer(miaoYkqCode);
    } else if (miaoYkqCode.code === REPLYCODE.ON_CARD_ANSWER) {
      store.commit('updateCardAnswer', miaoYkqCode.param);
    } else if (HBY_SET_CODES.includes(miaoYkqCode.code)) {
      store.commit('setHbyStep', 0); // 设置红包雨为设置阶段
    } else if (miaoYkqCode.code === REPLYCODE.ON_HBY) {
      store.commit('setHbyStep', 1); // 设置红包雨为游戏阶段
    } else if (miaoYkqCode.code === REPLYCODE.ON_MINIGAMEANS) {
      store.commit('updateCurrentMiniGameAnswer', miaoYkqCode.param);
    } else if (miaoYkqCode.code === REPLYCODE.ON_ZFDMCHOOSE) {
      store.commit('setZfdmList', JSON.parse(miaoYkqCode.param));
    } else if (miaoYkqCode.code === REPLYCODE.OTHERS) {
      if (miaoYkqCode.param.type === 'GestureRiddleCategoryList') {
        store.commit('game/SET_CATEGORY_LIST', miaoYkqCode.param.data);
      }
    } else if (miaoYkqCode.code === REPLYCODE.ON_QSDS) {
      handleQsdsMessage(miaoYkqCode, store);
    } else if (miaoYkqCode.code === REPLYCODE.ON_KBXCHOOSE) {
      // 处理开宝箱类型选择页面
      const kbxTypeList = JSON.parse(miaoYkqCode.param);
      store.commit('game/SET_KBX_TYPE_LIST', kbxTypeList);
      store.commit('setKbxStep', 0);
    } else if (miaoYkqCode.code === REPLYCODE.ON_KBXWAIT) {
      store.commit('setKbxStep', 1);
    } else if (miaoYkqCode.code === REPLYCODE.ON_KBX) {
      store.commit('setKbxStep', 2);
    } else if (miaoYkqCode.code === REPLYCODE.ON_KBXRANK) {
      store.commit('setKbxStep', 3);
    } else if (miaoYkqCode.code === REPLYCODE.ON_HBWALLCHOOSE) {
      const hbwallTypeList = JSON.parse(miaoYkqCode.param);
      store.commit('game/SET_HBWALL_TYPE_LIST', hbwallTypeList);
      store.commit('setHbwallStep', 0);
    } else if (miaoYkqCode.code === REPLYCODE.ON_HBWALLWAIT) {
      store.commit('setHbwallStep', 1);
    } else if (miaoYkqCode.code === REPLYCODE.ON_HBWALL) {
      store.commit('setHbwallStep', 2);
    } else if (miaoYkqCode.code === REPLYCODE.ON_HBWALLRANK) {
      store.commit('setHbwallStep', 3);
    } else if (miaoYkqCode.code === REPLYCODE.ON_NEXTSONG) {
      store.commit('setCurrentSongId', miaoYkqCode.param);
    } else if (
      miaoYkqCode.code === REPLYCODE.ON_VIDEOPLAY
      || miaoYkqCode.code === REPLYCODE.ON_FIXEDSCREEN
    ) {
      store.commit('setMediaList', JSON.parse(miaoYkqCode.param));
    } else if (miaoYkqCode.code === REPLYCODE.ON_XIEMUFAIL) {
      bus.$toast('后台未设置谢幕信息!');
    }
  }
}

// handleRemoteControlMessage 事件名规则：必须以 remote- 开头
// 主ws消息处理
const handleRemoteControlMessage = (message, bus) => {
  // 远控消息处理逻辑
  console.log('handleRemoteControlMessage', message);
  try {
    if (message.type === 'redkd') {
      handleRedkdMessage(message);
    } else if (message.type === 'yaokongqi') {
      handleYaokongqiMessage(message, bus);
    }
  } catch (e) {
    console.error('解析miaoYkqCode失败', e);
  }
};
export default handleRemoteControlMessage;
</file>

<file path="src/views/basicFunctions/BasicFunctionsCommon.vue">
<!--
  * @description: 「基础功能」控制通用组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-09
  TODO 后续再将不同的控制组件抽离出来
-->
<template>
  <div class="baseMod">
    <div
      class="m1"
      v-if="currentMenuId === '8-1'"
    >
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="toggleMsgwall">祝福榜 开/关</funcButton>
      </div>
    </div>
    <div
      class="m2"
      v-if="currentMenuId === '8-2'"
    >
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="toggleDanmu">弹幕 开/关</funcButton>
      </div>
    </div>
    <div
      class="m3 publicVCenter"
      v-if="currentMenuId === '8-3'"
    >
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="toggleQrcode">二维码 开/关</funcButton>
      </div>
      <div class="operateItem publicVCenter">
        <label>宽:</label>
        <input
          type="number"
          @blur="handleWidthBlur"
          v-model="qWidth"
        />
        px
        <label class="tip">(默认400)</label>
      </div>
      <div class="operateItem publicVCenter">
        <label>高:</label>
        <input
          type="number"
          @blur="handleHeightBlur"
          v-model="qHeight"
        />
        px
        <label class="tip">(默认400)</label>
      </div>
      <div class="operateItem publicVCenter">
        <label>X:</label>
        <input
          type="number"
          @blur="handleXBlur"
          v-model="qX"
        />
        px
        <label class="tip">(默认1508)</label>
      </div>
      <div class="operateItem publicVCenter">
        <label>Y:</label>
        <input
          type="number"
          @blur="handleYBlur"
          v-model="qY"
        />
        px
        <label class="tip">(默认378)</label>
      </div>
    </div>
    <div
      class="m4"
      v-if="currentMenuId === '8-4'"
    >
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="toggleAudio">音乐 开/关</funcButton>
      </div>
    </div>
    <div
      class="m5"
      v-if="currentMenuId === '8-5'"
    >
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="openAutoPlay">自动播放 开</funcButton>
        <funcButton @clickEvent="closeAutoPlay">自动播放 关</funcButton>
      </div>
    </div>
    <div
      class="m6"
      v-if="currentMenuId === '8-6'"
    >
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="openXiemu">谢幕 开</funcButton>
        <funcButton @clickEvent="closeXiemu">谢幕 关</funcButton>
      </div>
    </div>
  </div>
</template>
<script>
import sendInstrunction from '@/api/sendCode';
import { CODE } from '@/assets/constant/index';
import funcButton from '@/components/funcButton.vue';
import { mapState } from 'vuex';

export default {
  name: 'BasicFunctionsCommon',
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
    }),
  },
  data() {
    return {
      qWidth: '',
      qHeight: '',
      qX: '',
      qY: '',
    };
  },
  components: {
    funcButton,
  },
  created() {},
  mounted() {},
  methods: {
    async openXiemu() {
      await sendInstrunction({
        code: CODE.XIEMU,
      });
    },
    async closeXiemu() {
      await sendInstrunction({
        code: CODE.HOME,
      });
    },
    async openAutoPlay() {
      await sendInstrunction({
        code: CODE.AUTODISPLAY,
      });
    },
    async closeAutoPlay() {
      await sendInstrunction({
        code: CODE.AUTODISPLAYEND,
      });
    },
    async toggleQrcode() {
      await sendInstrunction({
        code: CODE.QRCODE,
      });
    },
    async toggleAudio() {
      await sendInstrunction({
        code: CODE.AUDIO,
      });
    },
    async toggleDanmu() {
      await sendInstrunction({
        code: CODE.DANMU,
      });
    },
    async toggleMsgwall() {
      await sendInstrunction({
        code: CODE.MSGWALL,
      });
    },
    async handleWidthBlur() {
      if (!this.valideInput(this.qWidth)) {
        this.$toast('宽度必须为正整数!');
        return;
      }
      await sendInstrunction({
        code: CODE.QRCODEWIDTH,
        param: this.qWidth,
      });
      this.$toast('二维码宽度设置成功!');
    },
    async handleHeightBlur() {
      if (!this.valideInput(this.qHeight)) {
        this.$toast('高度必须为正整数!');
        return;
      }
      await sendInstrunction({
        code: CODE.QRCODEHEIGHT,
        param: this.qHeight,
      });
      this.$toast('二维码高度设置成功!');
    },
    async handleXBlur() {
      if (!this.valideInput(this.qX)) {
        this.$toast('X坐标必须为正整数!');
        return;
      }
      await sendInstrunction({
        code: CODE.QRCODEX,
        param: this.qX,
      });
      this.$toast('二维码X坐标设置成功!');
    },
    async handleYBlur() {
      if (!this.valideInput(this.qY)) {
        this.$toast('Y坐标必须为正整数!');
        return;
      }
      await sendInstrunction({
        code: CODE.QRCODEY,
        param: this.qY,
      });
      this.$toast('二维码Y坐标设置成功!');
    },
    valideInput(num) {
      const reg = /(^[1-9]\d*$)/;
      let flag = true;
      if (!reg.test(num)) {
        // 不是正整数
        flag = false;
      }
      if (!num) {
        flag = false;
      }
      return flag;
    },
  },
};
</script>
<style lang="less" scoped>
.baseMod {
  width: 100%;
  height: 100%;
  position: relative;
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }
  .m3 {
    flex-direction: column;
  }
  .operateItem {
    font-size: 38px;
    color: #fff;
    position: relative;
    margin-bottom: 20px;
    input {
      width: 240px;
      height: 6vw;
      border: none;
      outline: none;
      margin: 0 2vw;
      color: #000;
      padding: 0 2vw;
    }
    .tip {
      font-size: 24px;
      margin-left: 12px;
    }
  }
}
</style>
</file>

<file path="src/views/chooseSongMain.vue">
<template>
  <div class="main">
    <div class="header publicVCenter">
      <img
        src="@/assets/image/scanQRCode.png"
        @click="openQrcode"
      />
      <div class="title">驻场音乐</div>
      <img
        src="@/assets/image/toHome.png"
        @click="toHome"
      />
    </div>
    <div class="songList">
      <div
        class="songItem"
        @click="chooseTargetSongOrder(item)"
        @touchstart="startPress(item)"
        @touchend="stopPress"
        v-for="item in songOrderList"
        :key="item.heart_wall_id"
        :class="{
          wait: item.sort === 0 && currentSongOrderId !== item.heart_wall_id,
          end: item.sort === 1 && currentSongOrderId !== item.heart_wall_id,
          in: currentSongOrderId === item.heart_wall_id,
        }"
      >
        <div class="songName">{{ item.title }}</div>
        <div class="songStatus">{{ statusFilter(item.sort, item.heart_wall_id) }}</div>
      </div>
    </div>
    <div class="menusBottom">
      <div
        class="menuSong prev publicHvCenter"
        @click="prevSongOrder"
      >
        上一首
      </div>
      <div
        class="menuSong next publicHvCenter"
        @click="nextSongOrder"
      >
        下一首
      </div>
      <div
        class="menuToHome publicHvCenter"
        @click="toHome"
      >
        回到首页
      </div>
    </div>
  </div>
</template>
<script>
import { editMusicStatus, getMusicList } from '@/api/index';
import sendInstrunction from '@/api/sendCode';
import { CODE } from '@/assets/constant/index';
import { mapState } from 'vuex';

export default {
  name: 'chooseSongMain',
  computed: {
    ...mapState({
      currentSongId: (state) => state.currentSongId,
    }),
    currentSongOrderIndex() {
      return this.songOrderList.findIndex((item) => item.heart_wall_id === this.currentSongOrderId);
    },
    songOrderListLength() {
      return this.songOrderList.length;
    },
  },
  components: {},
  data() {
    return {
      pressTimer: null,
      songOrderList: [
        {
          id: 1,
          songName: '小幸运',
          status: 1, // 取值 0: 待唱 1: 已唱
        },
        {
          id: 2,
          songName: '暖暖',
          status: 1,
        },
        {
          id: 3,
          songName: '今天我要结婚了',
          status: 1,
        },
        {
          id: 4,
          songName: '青花瓷',
          status: 0,
        },
        {
          id: 5,
          songName: '今天我要结婚了',
          status: 1,
        },
        {
          id: 6,
          songName: '今天我要结婚了',
          status: 1,
        },
        {
          id: 7,
          songName: '今天我要结婚了',
          status: 1,
        },
        {
          id: 8,
          songName: '今天我要结婚了',
          status: 1,
        },
      ],
      currentSongOrderId: undefined, // 当前唱的点歌
    };
  },
  created() {
    this.requestMusicList();
  },
  watch: {
    currentSongId: {
      handler(newVal) {
        if (newVal) {
          this.currentSongOrderId = newVal;
          const targetIndex = this.songOrderList.findIndex((item) => item.heart_wall_id === this.currentSongOrderId);
          editMusicStatus({
            // heart_wall_id: targetSongOrder.heart_wall_id,
            heart_wall_id: this.currentSongOrderId,
            sort: 1,
          })
            .then((res) => {
              console.log('修改状态:', res);
              this.requestMusicList(targetIndex);
            })
            .catch((err) => {
              console.log(err);
            });
        }
      },
      setter(newVal) {
        return newVal;
      },
      immediate: true,
    },
  },
  mounted() {},
  methods: {
    async toHome() {
      await sendInstrunction({
        code: CODE.HOME,
      });
      this.$router.replace({
        path: '/controller',
      });
    },
    async openQrcode() {
      await sendInstrunction({
        code: CODE.QRCODE,
      });
    },
    async updateData(orderId) {
      await sendInstrunction({
        code: CODE.ORDERSONGUPDATE,
        param: orderId,
      });
    },
    chooseTargetSongOrder(targetSongOrder) {
      if (targetSongOrder.heart_wall_id === this.currentSongOrderId) {
        return;
      }
      const targetSongOrderIndex = this.songOrderList.findIndex((item) => item.heart_wall_id === targetSongOrder.heart_wall_id);
      if (targetSongOrder.sort === 1) {
        this.$dialog
          .confirm({
            title: '提示',
            message: '该歌曲已唱过,是否需要再唱一遍?',
          })
          .then(() => {
            editMusicStatus({
              // heart_wall_id: targetSongOrder.heart_wall_id,
              heart_wall_id: this.currentSongOrderId,
              sort: 1,
            })
              .then((res) => {
                console.log('修改状态:', res);
                this.requestMusicList(targetSongOrderIndex);
              })
              .catch((err) => {
                console.log(err);
              });
          })
          .catch(() => {});
      } else {
        editMusicStatus({
          // heart_wall_id: targetSongOrder.heart_wall_id,
          heart_wall_id: this.currentSongOrderId,
          sort: 1,
        })
          .then((res) => {
            console.log('修改状态:', res);
            this.requestMusicList(targetSongOrderIndex);
          })
          .catch((err) => {
            console.log(err);
          });
      }
    },
    resetTargetSongOrder(targetSongOrder) {
      if (targetSongOrder.heart_wall_id === this.currentSongOrderId) {
        return;
      }
      if (targetSongOrder.sort === 0) {
        return;
      }
      this.$dialog
        .confirm({
          title: '提示',
          message: '是否重置该歌曲状态为待唱?',
        })
        .then(() => {
          editMusicStatus({
            heart_wall_id: targetSongOrder.heart_wall_id,
            sort: 0,
          })
            .then((res) => {
              console.log('修改状态:', res);
              this.requestMusicList(-1);
            })
            .catch((err) => {
              console.log(err);
            });
        })
        .catch(() => {});
    },
    prevSongOrder() {
      if (this.currentSongOrderIndex === -1) {
        this.$toast('当前没有歌曲在唱!');
        return;
      }
      if (this.currentSongOrderIndex === 0) {
        this.$toast('已经是第一首了!');
        return;
      }
      const tmpPrevSongSort = this.songOrderList[this.currentSongOrderIndex - 1].sort;
      if (tmpPrevSongSort === 1) {
        this.$dialog
          .confirm({
            title: '提示',
            message: '该歌曲已唱过,是否需要再唱一遍?',
          })
          .then(() => {
            editMusicStatus({
              heart_wall_id: this.songOrderList[this.currentSongOrderIndex].heart_wall_id,
              sort: 1,
            })
              .then((res) => {
                console.log('修改状态:', res);
                this.requestMusicList(this.currentSongOrderIndex - 1);
              })
              .catch((err) => {
                console.log(err);
              });
          })
          .catch(() => {});
      } else {
        editMusicStatus({
          heart_wall_id: this.songOrderList[this.currentSongOrderIndex].heart_wall_id,
          sort: 1,
        })
          .then((res) => {
            console.log('修改状态:', res);
            this.requestMusicList(this.currentSongOrderIndex - 1);
          })
          .catch((err) => {
            console.log(err);
          });
      }
    },
    nextSongOrder() {
      if (this.currentSongOrderIndex === -1) {
        this.$toast('当前没有歌曲在唱!');
        return;
      }
      if (this.currentSongOrderIndex === this.songOrderListLength - 1) {
        this.$toast('已经是最后一首了!');
        return;
      }
      const tmpNextSongSort = this.songOrderList[this.currentSongOrderIndex + 1].sort;
      if (tmpNextSongSort === 1) {
        this.$dialog
          .confirm({
            title: '提示',
            message: '该歌曲已唱过,是否需要再唱一遍?',
          })
          .then(() => {
            editMusicStatus({
              heart_wall_id: this.songOrderList[this.currentSongOrderIndex].heart_wall_id,
              sort: 1,
            })
              .then((res) => {
                console.log('修改状态:', res);
                this.requestMusicList(this.currentSongOrderIndex + 1);
              })
              .catch((err) => {
                console.log(err);
              });
          })
          .catch(() => {});
      } else {
        editMusicStatus({
          heart_wall_id: this.songOrderList[this.currentSongOrderIndex].heart_wall_id,
          sort: 1,
        })
          .then((res) => {
            console.log('修改状态:', res);
            this.requestMusicList(this.currentSongOrderIndex + 1);
          })
          .catch((err) => {
            console.log(err);
          });
      }
    },
    statusFilter(status, id) {
      if (id === this.currentSongOrderId) {
        return '进行中';
      } if (status === 0) {
        return '待唱';
      } if (status === 1) {
        return '已唱';
      }
      return '其他状态';
    },
    requestMusicList(targetIndex) {
      getMusicList()
        .then((res) => {
          console.log('musicList:', res);
          this.songOrderList = res.data.list;
          if (targetIndex > -1) {
            this.currentSongOrderId = this.songOrderList[targetIndex].heart_wall_id;
            this.updateData(this.currentSongOrderId);
          } else if (targetIndex === -1) {
            console.log('空操作！');
            this.updateData('noneId');
          } else {
            const tmpIndex = this.songOrderList.findIndex((item) => item.sort === 0);
            if (tmpIndex > -1) {
              this.currentSongOrderId = this.songOrderList[tmpIndex].heart_wall_id;
            }
          }
        })
        .catch((err) => {
          console.log(err);
        });
    },
    startPress(targetSongOrder) {
      if (this.pressTimer) {
        return;
      }
      this.pressTimer = setTimeout(() => {
        console.log('长按事件结束');
        this.resetTargetSongOrder(targetSongOrder);
      }, 1000); // 这里设置为1秒，以区分长按和点击
    },
    stopPress() {
      if (this.pressTimer) {
        clearTimeout(this.pressTimer); // 清除定时器
        this.pressTimer = null;
      }
    },
  },
};
</script>
<style lang="less" scoped>
.main {
  width: 100vw;
  height: 100vh;
  position: relative;
  background-size: 100% 100%;
  background-image: url('../assets/image/song.png');
  padding-top: 180px;
  .header {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    padding: 50px 30px;
    padding-bottom: 0;
    display: flex;
    justify-content: space-between;
    z-index: 1;
    img {
      width: 68px;
      height: 68px;
    }
    .title {
      font-size: 32px;
      font-weight: 400;
      color: #ffffff;
    }
  }
  .songList {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 40px;
    height: calc(100vh - 440px);
    overflow-y: scroll;
    padding-bottom: 80px;
    .songItem {
      flex-shrink: 0;
      border-radius: 20px;
      display: flex;
      justify-content: space-between;
      width: 686px;
      height: 136px;
      padding: 0 32px;
      align-items: center;
      margin-bottom: 18px;
      .songName {
        font-size: 36px;
      }
      .songStatus {
        font-size: 36px;
      }
      &.wait {
        background: linear-gradient(180deg, #544ba8, #544ba8 100%);
        .songName {
          color: #ece9ff;
        }
        .songStatus {
          color: #ffffff;
        }
      }
      &.in {
        background-color: #ffffff;
        .songName {
          color: #333333;
        }
        .songStatus {
          color: #fb5aa7;
        }
      }
      &.end {
        background-color: #2b243f;
        .songName {
          color: #ece9ff;
        }
        .songStatus {
          color: #ffffff;
        }
      }
    }
  }
  .menusBottom {
    position: absolute;
    bottom: 0;
    height: 320px;
    width: 100%;
    padding: 40px;
    padding-top: 60px;
    background-color: #fff;
    border-top-left-radius: 40px;
    border-top-right-radius: 40px;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(2, 1fr);
    column-gap: 100px;
    row-gap: 20px;
    justify-items: center;
    .menuSong {
      padding: 10px 44px;
      border-radius: 8px;
      color: #fff;
      font-size: 36px;
      width: max-content;
      height: max-content;
      &.prev {
        background-color: #c5c5c5;
      }
      &.next {
        background-color: #6d46e5;
      }
      &:nth-child(1) {
        justify-self: end;
      }
      &:nth-child(2) {
        justify-self: start;
      }
    }
    .menuToHome {
      width: max-content;
      height: max-content;
      padding: 10px 56px;
      border-radius: 8px;
      color: #6d46e5;
      grid-area: 2 / 1 / span 2 / span 1;
      border: 2px solid #6d46e5;
    }
  }
}
</style>
</file>

<file path="src/views/home.vue">
<template>
  <div class="home">
    <myHead name="首页" />
    <div class="menus">
      <div
        class="menuItem publicHvCenter"
        v-for="item in menu"
        :key="item.id"
        @click="onClickMenuItem(item)"
      >
        <img :src="item.icon" />
        <label>{{ item.name }}</label>
      </div>
      <div
        class="menuItem publicHvCenter"
        v-if="chooseSongVisible"
        @click="openOrderSong"
      >
        <img src="@/assets/image/chooseSongIcon.png" />
        <label>驻场音乐</label>
      </div>
      <div class="slogan">嗨喵悦动,让互动更精彩</div>
      <div
        class="sendGiftEntry publicHCenter"
        @click="showSendGiftPopup"
        v-if="playGiftVisible"
      >
        免费礼物
      </div>
      <div
        class="fixedScreenEntry"
        @click="showMultiMediaPopup(2)"
        v-if="playPictureVisible"
      ></div>
      <div
        class="videoPlayEntry"
        @click="showMultiMediaPopup(1)"
        v-if="playVideoVisible"
      ></div>
    </div>
    <van-popup
      v-model="popupVisible"
      position="bottom"
      class="vanPopup"
    >
      <gift />
    </van-popup>
    <van-popup
      v-model="multiMediaPopupVisible"
      position="bottom"
      class="vanPopup"
    >
      <multiMedia :navIdProp="multiMediaNavId" />
    </van-popup>
  </div>
</template>
<script>
import sendInstrunction from '@/api/sendCode';
import { CODE, CONTROL_CODE } from '@/assets/constant/index';
import gift from '@/components/gift.vue';
import multiMedia from '@/components/multiMedia.vue';
import myHead from '@/components/myHead.vue';
import { generateMenuFromRouteMain } from '@/utils/index';
import { mapState } from 'vuex';

export default {
  name: 'home',
  data() {
    return {
      popupVisible: false,
      multiMediaPopupVisible: false,
      multiMediaNavId: 1,
    };
  },
  computed: {
    ...mapState(['chooseSongVisible', 'userRoutes', 'playPictureVisible', 'playVideoVisible', 'playGiftVisible']),
    menu() {
      return generateMenuFromRouteMain(this.userRoutes);
    },
  },
  components: {
    myHead,
    gift,
    multiMedia,
  },
  methods: {
    onClickMenuItem(menuItem) {
      // if (menuItem.id === '6' && getScreenStatus() === 'multiple') {
      //   this.$toast.fail('抽奖不能开启多个大屏!');
      //   return;
      // }
      if (menuItem.id === '8') {
        const firstMenuRouteName = menuItem?.subMenus?.[0]?.routeName;
        if (firstMenuRouteName) {
          this.$router.push({
            name: firstMenuRouteName,
          });
        }
        return;
      }

      const findToScreenMsgInChildren = (toScreenChildrenId, subMenus) => {
        if (!toScreenChildrenId || !subMenus) return undefined;
        return subMenus.find((item) => item.id === toScreenChildrenId)?.toScreen;
      };

      const toScreenMsg = findToScreenMsgInChildren(menuItem?.toScreenChildrenId, menuItem?.subMenus)
        || menuItem?.toScreen
        || menuItem?.subMenus?.[0]?.toScreen
        || menuItem?.subMenus?.[0]?.screenUrl;
      if (typeof toScreenMsg === 'object' && toScreenMsg !== null) {
        sendInstrunction(toScreenMsg);
      } else if (typeof toScreenMsg === 'string') {
        sendInstrunction({
          code: CONTROL_CODE.ROUTER_JUMP,
          param: { path: toScreenMsg },
        });
      }
    },
    showSendGiftPopup() {
      this.popupVisible = true;
      this.$store.dispatch('initGiftList');
    },
    showMultiMediaPopup(e) {
      this.multiMediaNavId = e;
      this.multiMediaPopupVisible = true;
      const tmpCode = e === 1 ? CODE.VIDEOPLAYOPEN : CODE.FIXEDSCREENOPEN;
      sendInstrunction({
        code: tmpCode,
      });
    },
    async openOrderSong() {
      await sendInstrunction({
        code: CODE.ORDERSONG,
      });
    },
  },
};
</script>
<style lang="less" scoped>
.home {
  width: 100vw;
  height: 100vh;
  position: relative;
  background-image: url('../assets/image/home.png');
  background-size: 100% 100%;
  .menus {
    position: absolute;
    bottom: 0;
    width: 100%;
    padding: 40px;
    background-color: #fff;
    border-top-left-radius: 40px;
    border-top-right-radius: 40px;
    gap: 20px;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    .slogan {
      position: absolute;
      left: 0;
      top: -80px;
      width: 100%;
      text-align: center;
      font-size: 20px;
      font-weight: 400;
      color: rgba(255, 255, 255, 0.6);
    }
    .sendGiftEntry {
      width: 96px;
      height: 96px;
      position: absolute;
      left: 32px;
      top: -150px;
      background-size: 100% 100%;
      background-image: url('../assets/image/sendGiftIconNew.png');
      padding-top: 58px;
      font-size: 16px;
      font-weight: 400;
      color: #ffffff;
    }
    .fixedScreenEntry {
      width: 96px;
      height: 96px;
      position: absolute;
      right: 32px;
      top: -278px;
      background-image: url('../assets/image/fixedScreenIcon.png');
      background-size: 100% 100%;
    }
    .videoPlayEntry {
      width: 96px;
      height: 96px;
      position: absolute;
      right: 32px;
      top: -150px;
      background-image: url('../assets/image/videoPlayIcon.png');
      background-size: 100% 100%;
    }
    .menuItem {
      flex-direction: column;
      width: 200px;
      height: 200px;
      border-radius: 20px;
      font-size: 32px;
      font-weight: 400;
      color: #777988;
      img {
        width: 100px;
        margin-bottom: 16px;
      }
      label {
        font-size: 32px;
        font-weight: 400;
      }
      &:nth-child(3n) {
        margin-right: 0;
      }
    }
  }
  .vanPopup {
    background-color: unset;
  }
}
</style>
</file>

<file path="src/views/lottery/LotteryCommon.vue">
<!--
  * @description: 「抽奖」游戏控制通用组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-09
  TODO 后续再将差异较大的抽奖游戏拆分出来
-->
<template>
  <div class="lotteryMod">
    <div
      class="mod"
      v-if="lotteryType === '3d'"
    >
      <van-form v-show="!lottyerInAni">
        <div class="fItem publicVCenter">
          <label>奖项切换：</label>
          <div class="arrowBtnGroup publicVCenter">
            <div
              class="btn left"
              @click="prevPrize"
            ></div>
            <div class="prize-name">{{ activePrizeName }}</div>
            <div
              class="btn right"
              @click="nextPrize"
            ></div>
          </div>
        </div>
        <div class="fItem publicVCenter">
          <label>一次抽取：</label>
          <input
            type="number"
            class="pickInput"
            @blur="confirmPick"
            v-model="pickNum"
          />
        </div>
        <van-field
          name="isPersonStopLottery"
          label="手动停止抽奖："
        >
          <template #input>
            <van-checkbox
              v-model="isPersonStopLottery"
              shape="square"
            />
          </template>
        </van-field>
      </van-form>
      <van-form v-show="!lottyerInAni">
        <div class="fItem publicVCenter">
          <label>获奖名单切换：</label>
          <div class="arrowBtnGroup publicVCenter">
            <div
              class="btn left"
              @click="prevSheet"
            ></div>
            <div
              class="btn right"
              @click="nextSheet"
            ></div>
          </div>
        </div>
      </van-form>
      <div class="funcMenus publicVCenter">
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="startLottery"
          v-show="!lottyerInAni"
        >
          开始抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="stopLottery"
          v-show="personStopBtnVisible"
        >
          停止抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="resetLottery"
          v-show="!lottyerInAni"
        >
          重置抽奖
        </funcButton>
      </div>
    </div>
    <!-- 弹幕抽奖 -->
    <div
      class="mod"
      v-if="lotteryType === 'danmu'"
    >
    <van-form>
        <div
          class="fItem publicVCenter"
          v-show="danmuLotteryStatus === '0'"
        >
          <label>奖项切换：</label>
          <div class="arrowBtnGroup publicVCenter">
            <div
              class="btn left"
              @click="prevPrize"
            ></div>
            <div class="prize-name">{{ activePrizeName }}</div>
            <div
              class="btn right"
              @click="nextPrize"
            ></div>
          </div>
        </div>
        <div
          class="fItem publicVCenter"
          v-show="danmuLotteryStatus === '0'"
        >
          <label>一次抽取：</label>
          <input
            type="number"
            class="pickInput"
            @blur="confirmPick"
            v-model="pickNum"
          />
        </div>
      </van-form>
      <div class="funcMenus publicVCenter">
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="startLottery"
          v-show="danmuLotteryStatus === '0'"
        >
          开始抽奖
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="openPrizeSheet"
          v-show="danmuLotteryStatus === '0'"
        >
          打开中奖名单
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="closeResult('sheet')"
          v-show="danmuLotteryStatus === '0'"
        >
          关闭中奖名单
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="stopLottery"
          v-show="danmuLotteryStatus === 1"
        >
          停止抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="closeResult('result')"
          v-show="danmuLotteryStatus === 2"
        >
          关闭中奖结果
        </funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="resetLottery"
          v-show="danmuLotteryStatus === '0'"
        >
          清空中奖名单
        </funcButton>
      </div>
    </div>
    <div
      class="mod"
      v-if="lotteryType === 'sheet' && !isSheetLotteryNoUpload"
    >
      <van-form>
        <div
          class="fItem publicVCenter"
          v-show="sheetLotteryStatus === '0' || sheetLotteryStatus === 1"
        >
          <label>奖项切换：</label>
          <div class="arrowBtnGroup publicVCenter">
            <div
              class="btn left"
              @click="prevPrize"
            ></div>
            <div class="prize-name">{{ activePrizeName }}</div>
            <div
              class="btn right"
              @click="nextPrize"
            ></div>
          </div>
        </div>
        <div
          class="fItem publicVCenter"
          v-show="sheetLotteryStatus === '0'"
        >
          <label>一次抽取：</label>
          <input
            type="number"
            class="pickInput"
            @blur="confirmPick"
            v-model="pickNum"
          />
        </div>
      </van-form>
      <div class="funcMenus publicVCenter">
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="startLottery"
          v-show="sheetLotteryStatus === '0'"
        >
          开始抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="stopLottery"
          v-show="sheetLotteryStatus === 2"
        >
          停止抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="closeResult('result')"
          v-show="sheetLotteryStatus === 3"
        >
          关闭中奖结果
        </funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="openPrizeSheet"
          v-show="sheetLotteryStatus === '0'"
        >
          打开中奖名单
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="closeResult('sheet')"
          v-show="sheetLotteryStatus === 1"
        >
          关闭中奖名单
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="resetLottery"
          v-show="sheetLotteryStatus === 1"
        >
          清空中奖名单
        </funcButton>
      </div>
    </div>
    <div
      class="mod"
      v-if="lotteryType === 'screen'"
    >
      <van-form>
        <div
          class="fItem publicVCenter"
          v-show="screenLotteryStatus === '0' || screenLotteryStatus === 1"
        >
          <label>奖项切换：</label>
          <div class="arrowBtnGroup publicVCenter">
            <div
              class="btn left"
              @click="prevPrize"
            ></div>
            <div class="prize-name">{{ activePrizeName }}</div>
            <div
              class="btn right"
              @click="nextPrize"
            ></div>
          </div>
        </div>
        <div
          class="fItem publicVCenter"
          v-show="screenLotteryStatus === '0'"
        >
          <label>一次抽取：</label>
          <input
            type="number"
            class="pickInput"
            @blur="confirmPick"
            v-model="pickNum"
          />
        </div>
      </van-form>
      <div class="funcMenus publicVCenter">
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="startLottery"
          v-show="screenLotteryStatus === '0'"
        >
          开始抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="stopLottery"
          v-show="screenLotteryStatus === 2"
        >
          停止抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="closeResult('result')"
          v-show="screenLotteryStatus === 3"
        >
          关闭中奖结果
        </funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="openPrizeSheet"
          v-show="screenLotteryStatus === '0'"
        >
          打开中奖名单
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="closeResult('sheet')"
          v-show="screenLotteryStatus === 1"
        >
          关闭中奖名单
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="resetLottery"
          v-show="screenLotteryStatus === 1"
        >
          清空中奖名单
        </funcButton>
      </div>
    </div>
    <div
      class="mod"
      v-if="lotteryType === 'earth'"
    >
      <van-form>
        <div
          class="fItem publicVCenter"
          v-show="earthLotteryStatus === '0'"
        >
          <label>奖项切换：</label>
          <div class="arrowBtnGroup publicVCenter">
            <div
              class="btn left"
              @click="prevPrize"
            ></div>
            <div class="prize-name">{{ activePrizeName }}</div>
            <div
              class="btn right"
              @click="nextPrize"
            ></div>
          </div>
        </div>
        <div
          class="fItem publicVCenter"
          v-show="earthLotteryStatus === '0'"
        >
          <label>一次抽取：</label>
          <input
            type="number"
            class="pickInput"
            @blur="confirmPick"
            v-model="pickNum"
          />
        </div>
      </van-form>
      <div class="funcMenus publicVCenter">
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="startLottery"
          v-show="earthLotteryStatus === '0'"
        >
          开始抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="stopLottery"
          v-show="earthLotteryStatus === 1"
        >
          停止抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="closeResult('result')"
          v-show="earthLotteryStatus === 2"
        >
          关闭中奖结果
        </funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="resetLottery"
          v-show="earthLotteryStatus === '0'"
        >
          清空中奖名单
        </funcButton>
      </div>
    </div>
    <div
      class="mod"
      v-if="lotteryType === 'picture' && !isSheetLotteryNoUpload"
    >
      <van-form>
        <div
          class="fItem publicVCenter"
          v-show="pictureLotteryStatus === '0'"
        >
          <label>奖项切换：</label>
          <div class="arrowBtnGroup publicVCenter">
            <div
              class="btn left"
              @click="prevPrize"
            ></div>
            <div class="prize-name">{{ activePrizeName }}</div>
            <div
              class="btn right"
              @click="nextPrize"
            ></div>
          </div>
        </div>
        <div
          class="fItem publicVCenter"
          v-show="pictureLotteryStatus === '0'"
        >
          <label>一次抽取：</label>
          <input
            type="number"
            class="pickInput"
            @blur="confirmPick"
            v-model="pickNum"
          />
        </div>
      </van-form>
      <van-form v-show="pictureLotteryStatus === 1">
        <div class="fItem publicVCenter">
          <label>获奖名单切换：</label>
          <div class="arrowBtnGroup publicVCenter">
            <div
              class="btn left"
              @click="prevSheet"
            ></div>
            <div
              class="btn right"
              @click="nextSheet"
            ></div>
          </div>
        </div>
      </van-form>
      <div class="funcMenus publicVCenter">
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="startLottery"
          v-show="pictureLotteryStatus === '0'"
        >
          开始抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="stopLottery"
          v-show="pictureLotteryStatus === 2"
        >
          停止抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="closeResult('result')"
          v-show="pictureLotteryStatus === 3"
        >
          关闭中奖结果
        </funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="openPrizeSheet"
          v-show="pictureLotteryStatus === '0'"
        >
          打开中奖名单
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="closeResult('sheet')"
          v-show="pictureLotteryStatus === 1"
        >
          关闭中奖名单
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="resetLottery"
          v-show="pictureLotteryStatus === 1"
        >
          清空中奖名单
        </funcButton>
      </div>
    </div>
    <div
      class="mod"
      v-if="lotteryType === 'card'"
    >
      <div class="funcMenus publicVCenter">
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="startLottery1"
          v-show="cardLotteryStatus === '0'"
        >
          开始抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="startLottery1"
          v-show="cardLotteryStatus === 1"
        >
          在玩一次
        </funcButton>
      </div>
      <div
        class="card_box"
        v-show="cardLotteryStatus === 1"
      >
        <div
          v-for="(item, index) in cardAnswer"
          :key="index"
          @click="getCardanswer(index)"
        >
          {{ item.text }}
        </div>
      </div>
    </div>
    <div
      class="mod"
      v-if="lotteryType === 'box'"
    >
      <van-form v-show="!lottyerInAni">
        <div class="fItem publicVCenter">
          <label>奖项切换：</label>
          <div class="arrowBtnGroup publicVCenter">
            <div
              class="btn left"
              @click="prevPrize"
            ></div>
            <div class="prize-name">{{ activePrizeName }}</div>
            <div
              class="btn right"
              @click="nextPrize"
            ></div>
          </div>
        </div>
        <div class="fItem publicVCenter">
          <label>一次抽取：</label>
          <input
            type="number"
            class="pickInput"
            @blur="confirmPick"
            v-model="pickNum"
          />
        </div>
      </van-form>
      <van-form v-show="!lottyerInAni">
        <div class="fItem publicVCenter">
          <label>获奖名单切换：</label>
          <div class="arrowBtnGroup publicVCenter">
            <div
              class="btn left"
              @click="prevSheet"
            ></div>
            <div
              class="btn right"
              @click="nextSheet"
            ></div>
          </div>
        </div>
      </van-form>
      <div class="funcMenus publicVCenter">
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="startLottery"
          v-show="!lottyerInAni"
        >
          开始抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="stopLottery"
          v-show="lottyerInAni"
        >
          停止抽奖
        </funcButton>
        <funcButton
          bWidth="32vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="resetLottery"
          v-show="!lottyerInAni"
        >
          重置抽奖
        </funcButton>
        <funcButton
          bWidth="35vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="openPrizeSheet"
          v-show="!lottyerInAni"
        >
          打开/关闭中奖名单
        </funcButton>
        <funcButton
          bWidth="35vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="closeResult('result')"
        >
          关闭中奖结果
        </funcButton>
      </div>
    </div>
    <div
      class="arranged-lottery-test"
      v-if="$route.meta.isShowArrangedLotteryTest"
    >
      <span class="label">开启内定抽奖测试</span>
      <van-popover
        v-model="isShowArrangedLotteryTestPopover"
        trigger="click"
        placement="top"
        :actions="[{ text: '内定抽奖测试打开后，抽奖过程中用户将不会收到抽奖通知，中奖数据将不会显示在手机端' }]"
      >
        <template #reference>
          <van-icon
            name="question-o"
            size="20px"
            color="#fff"
          />
        </template>
      </van-popover>
      <van-switch
        size="32px"
        active-color="#9100ff"
        style="margin-left: 10px"
        v-model="isSwitchOnArrangedLotteryTest"
        @change="onArrangedLotteryTestChange"
      ></van-switch>
    </div>
  </div>
</template>
<script>
import { reqGetActivityDetail, reqSwitchArrangedLotteryTest } from '@/api';
import sendInstrunction from '@/api/sendCode';
import { CODE } from '@/assets/constant/index';
import funcButton from '@/components/funcButton.vue';
import { Toast } from 'vant';
import { mapMutations, mapState } from 'vuex';

export default {
  name: 'LotteryCommon',
  components: {
    funcButton,
  },
  data() {
    return {
      isShowArrangedLotteryTestPopover: false,
      isPersonStopLottery: false,
      pickNum: '1',
      isSwitchOnArrangedLotteryTest: false,
      activeIndex: 0, // 当前激活的奖项
    };
  },
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
      lotteryType: (state) => state.lotteryType,
      isSheetLotteryNoUpload: (state) => state.isSheetLotteryNoUpload,
      personStopBtnVisible: (state) => state.personStopBtnVisible,
      lottyerInAni: (state) => state.lottyerInAni,
      sheetLotteryStatus: (state) => state.sheetLotteryStatus,
      sheetChoosePeople: (state) => state.sheetChoosePeople,
      screenLotteryStatus: (state) => state.screenLotteryStatus,
      earthLotteryStatus: (state) => state.earthLotteryStatus,
      danmuLotteryStatus: (state) => state.danmuLotteryStatus,
      pictureLotteryStatus: (state) => state.pictureLotteryStatus,
      cardLotteryStatus: (state) => state.cardLotteryStatus,
      cardAnswer: (state) => state.cardAnswer,
      lotteryPrizeInfo: (state) => state.lotteryPrizeInfo,
    }),
    activePrizeName() {
      return this.lotteryPrizeInfo.list[this.activeIndex] || '';
    },
  },
  watch: {
    async isPersonStopLottery() {
      await sendInstrunction({
        code: CODE.LOTTERYISPERSON,
      });
    },
    isSheetLotteryNoUpload(newVal) {
      if (newVal) {
        this.promptUploadSheet();
      }
    },
    sheetChoosePeople(newVal) {
      if (newVal) {
        if (typeof newVal === 'string' && newVal.indexOf('reset') > -1) {
          this.pickNum = 1;
        } else {
          this.pickNum = newVal;
        }
      }
    },
    lotteryPrizeInfo(newVal) {
      if (newVal) {
        this.activeIndex = newVal.activeIndex;
      }
    },
  },
  created() {
    this.getIsSwitchOnArrangedLotteryTest();
  },
  beforeDestroy() {},
  methods: {
    ...mapMutations([
      'updateSheetChoosePeople',
      'updateIsSheetLotteryNoUpload',
      'setCurrentMenuId',
      'setLotteryType',
      'updateSheetLotteryStatus',
    ]),
    async getIsSwitchOnArrangedLotteryTest() {
      const resData = await reqGetActivityDetail('isSwitchOnArrangedLotteryTest');
      this.isSwitchOnArrangedLotteryTest = resData?.isSwitchOnArrangedLotteryTest === '1';
    },
    async onArrangedLotteryTestChange(e) {
      try {
        const resData = await reqSwitchArrangedLotteryTest(e);
        if (resData !== 'SUCCESS') throw new Error(resData);

        Toast.success('修改成功，请刷新大屏');
      } catch (error) {
        Toast.fail(error.message);
        this.isSwitchOnArrangedLotteryTest = !e;
      }
    },
    async getCardanswer(index) {
      await sendInstrunction({
        code: CODE.CARDANSWER,
        param: index,
      });
    },
    async prevPrize() {
      await sendInstrunction({
        code: CODE.LOTTERYPREV,
      });
      if (this.activeIndex <= 0) {
        // 已经是第一个奖项，不可切换
        return;
      }
      this.activeIndex -= 1;
    },
    async nextPrize() {
      await sendInstrunction({
        code: CODE.LOTTERYNEXT,
      });
      if (this.activeIndex >= this.lotteryPrizeInfo.list.length - 1) {
        // 已经是最后一个奖项，不可切换
        return;
      }
      this.activeIndex += 1;
    },
    async prevSheet() {
      await sendInstrunction({
        code: CODE.LOTTERYPRIZEPREV,
      });
    },
    async nextSheet() {
      await sendInstrunction({
        code: CODE.LOTTERYPRIZENEXT,
      });
    },
    async startLottery() {
      this.$dialog
        .confirm({
          title: '提示',
          message: '是否要开始抽奖',
        })
        .then(async () => {
          // on confirm
          await sendInstrunction({
            code: CODE.LOTTERYSTART,
          });
        })
        .catch(() => {
          // on cancel
        });
    },
    async startLottery1() {
      await sendInstrunction({
        code: CODE.LOTTERYSTART,
      });
    },
    async stopLottery() {
      this.$dialog
        .confirm({
          title: '提示',
          message: '是否要停止抽奖',
        })
        .then(async () => {
          // on confirm
          await sendInstrunction({
            code: CODE.LOTTERYSTOP,
          });
          this.$store.commit('updatePersonStopBtnVisible', false);
        })
        .catch(() => {
          // on cancel
        });
    },
    promptUploadSheet() {
      this.$dialog
        .confirm({
          title: '提示',
          message: '请上传抽奖名单后刷新页面',
        })
        .then(() => {
          // on confirm
        })
        .catch(() => {
          // on cancel
        });
    },
    resetLottery() {
      this.$dialog
        .confirm({
          title: '提示',
          message: '是否要重置抽奖',
        })
        .then(async () => {
          // on confirm
          await sendInstrunction({
            code: CODE.LOTTERYRESET,
          });
        })
        .catch(() => {
          // on cancel
        });
    },
    async confirmPick() {
      const r = /^\+?[1-9][0-9]*$/; // 正整数
      if (!r.test(this.pickNum)) {
        this.pickNum = 1;
      }
      console.log(this.pickNum);
      await sendInstrunction({
        code: CODE.LOTTERYNUN,
        param: this.pickNum,
      });
    },
    async openPrizeSheet() {
      await sendInstrunction({
        code: CODE.LOTTERYSHEETOPEN,
      });
    },
    async closeResult(type) {
      await sendInstrunction({
        code: CODE.LOTTERYSHEETCLOSE,
        param: type,
      });
    },
  },
};
</script>
<style lang="less" scoped>
.lotteryMod {
  width: 100%;
  height: 100%;
  position: relative;

  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }

  .commonMenus {
    position: relative;
    justify-content: space-around;
    width: 100%;
    flex-wrap: wrap;
  }

  .mod::v-deep {
    .card_box {
      padding-left: 2vw;
      padding-right: 2vw;
      gap: 2vw;
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-template-rows: 10vw;
      grid-auto-rows: 10vw;

      div {
        background-color: #fff;
        border-radius: 4vw;
        display: flex;
        justify-content: center;
        align-items: center;
      }
    }

    @media screen and (max-height: 700px) {
      .card_box {
        grid-template-columns: repeat(4, 1fr);
      }
    }

    .van-form {
      margin-bottom: 40px;

      .van-cell {
        font-size: 3.8vw;
        line-height: 10vw;
        padding: 1.333vw 6vw;

        .van-cell__title {
          width: 27vw;
        }

        .van-field__error-message {
          font-size: 3vw;
        }
      }

      .van-button {
        height: 10vw;
        margin-bottom: 4vw;

        &.van-button--normal {
          font-size: 3.8vw;
        }
      }

      .van-checkbox__icon {
        font-size: 5.7vw;
        margin-top: 2vw;
      }
    }

    form {
      width: 80vw;
      margin: 0 auto;
    }

    .fItem {
      padding: 1.333vw 6vw;
      line-height: 10vw;
      background-color: #fff;

      label {
        font-size: 3.8vw;
        color: #646566;
        margin-right: 4vw;
      }

      .arrowBtnGroup {
        .btn {
          width: 88px;
          height: 88px;
          background-size: 100% 100%;

          &.left {
            background-image: url('~@/assets/image/leftArrow.png');
          }

          &.right {
            background-image: url('~@/assets/image/rightArrow.png');
          }
        }
        .prize-name {
          max-width: 37vw;
          text-overflow: ellipsis;
          white-space: nowrap;
          overflow: hidden;
        }
      }

      .pickInput {
        width: 200px;
        border: 2px solid #9e83ff;
        outline: none;
        border-radius: 10px;
      }
    }

    .van-popup {
      .van-picker__cancel,
      .van-picker__confirm {
        font-size: 3.8vw;
      }

      .van-picker-column {
        font-size: 4.2vw;
      }
    }
  }

  .arranged-lottery-test {
    margin-top: 30px;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    column-gap: 10px;

    .label {
      color: #fff;
      // color: #dfb2ff;
    }
  }
}
</style>

<style lang="less">
.van-popover {
  transform: scale(1.5) translateY(-10%);

  .van-popover__action {
    padding: 15px 10px;
    height: auto;

    .van-popover__action-text {
      text-align: justify;
    }
  }
}
</style>
</file>

<file path="src/views/lottery/wheelLottery.vue">
<!--
  * @Description: 「转盘抽奖」游戏控制组件
  * @Author: Ruan Jiazhen
  * @Date: 2023-12-13
-->
<template>
  <div>
    <div class="container">
      <button
        class="btn"
        @click="start"
      >
        开始抽奖
      </button>
      <button
        class="btn"
        @click="closeResult"
      >
        关闭中奖结果
      </button>
      <!-- 清空抽奖记录 -->
      <button
        class="btn"
        @click="clearLotteryRecord"
      >
        清空抽奖记录
      </button>
    </div>
  </div>
</template>

<script>
import sendInstrunction from '@/api/sendCode';
import { CONTROL_CODE } from '@/assets/constant';

export default {
  name: 'wheelLottery',
  methods: {
    async start() {
      try {
        await this.$dialog.confirm({
          title: '提示',
          message: '是否开始抽奖？',
        });
      } catch (err) {
        if (err === 'cancel') return;
        console.error(err);
      }
      sendInstrunction({
        code: CONTROL_CODE.GAME_CONTROL,
        param: { type: 'WheelLotteryStart' },
      });
    },
    closeResult() {
      sendInstrunction({
        code: CONTROL_CODE.GAME_CONTROL,
        param: { type: 'WheelLotteryCloseResult' },
      });
    },
    async clearLotteryRecord() {
      try {
        await this.$dialog.confirm({
          title: '提示',
          message: '是否清空抽奖记录？',
        });
      } catch (err) {
        if (err === 'cancel') return;
        console.error(err);
      }
      sendInstrunction({
        code: CONTROL_CODE.GAME_CONTROL,
        param: { type: 'WheelLotteryClearRecord' },
      });
    },
  },
};
</script>

<style scoped lang="less">
.container {

  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  row-gap: 40px;

  .btn {
    width: 32vw;
    height: 10.67vw;

    border-radius: 28px;
    background-color: transparent;
    color: #fff;
    border: 2px solid #fff;
    transition: all 0.2s linear;

    display: flex;
    justify-content: center;
    align-items: center;

    font-size: 3.47vw;
    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }
}
</style>
</file>

<file path="src/views/luckyTreasure/GuessRedPacket.vue">
<!--
  * @description: 「猜红包」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="xydbMod">
    <!-- 猜红包等待新人充值 -->
    <div
      class="funcMenus publicVCenter"
      v-show="guessHbStatus === 0"
    >
      <div class="guessHbModBox">
        <div class="modeTypes">
          <div
            class="modeTypeItem"
            v-for="(item, index) in ['模式一', '模式二', '模式三']"
            :key="index"
            :class="{ active: index === activeIndex }"
            @click="chooseModType(index)"
          >
            {{ item }}
          </div>
        </div>
        <!-- 模式一——扫码充值 -->
        <div
          class="qrcodeBox"
          v-if="activeIndex === 0"
        >
          <div class="title">猜红包</div>
          <img
            :src="guessHbQrcodeUrl"
            class="qrcodeImg"
          />
          <div class="tip">让新人扫描这个二维码，充值开启</div>
          <div class="status">状态: {{ hasGuessHbActive ? '已开启' : '未开启' }}</div>
        </div>
        <!-- 模式二——取红包口袋金额 -->
        <div
          class="hbkdBox"
          v-if="activeIndex === 1"
        >
          <div class="iptWrap">
            <div class="label">填写竞猜数字</div>
            <input
              class="numIpt"
              v-model="moneyIpt"
            />
          </div>
          <div class="smallTip">小提示：可输入两位小数</div>
          <div
            class="confirmBtn"
            @click="confirmMoney"
          >
            确定
          </div>
          <div class="otherTip">请不要把竞猜数字告诉他人</div>
        </div>
        <!-- 模式三——现金 -->
        <div
          class="hbkdBox"
          v-if="activeIndex === 2"
        >
          <div class="remainMoney">竞猜现金红包</div>
          <div class="iptWrap">
            <div class="label">填写竞猜数字</div>
            <input
              class="numIpt"
              v-model="moneyIpt2"
            />
          </div>
          <div class="smallTip">小提示：可输入两位小数</div>
          <div
            class="confirmBtn"
            @click="confirmMoney2"
          >
            确定
          </div>
          <div class="otherTip">请不要把竞猜数字告诉他人</div>
        </div>
        <!-- 各种模式玩法介绍 -->
        <div
          class="playTip"
          :class="{ multiLine: activeIndex === 2 }"
        >
          {{ currentTipText }}
        </div>
      </div>
      <button @click="sendInstrunction({ code: CODE.GUESSHB_STARTGAME })">开始游戏</button>
    </div>
    <!-- 猜红包游戏进行 -->
    <div
      class="funcMenus publicVCenter"
      v-show="guessHbStatus === 1"
    >
      <div class="tip2">新人放了一枚红包，请开始游戏</div>
      <button @click="sendInstrunction({ code: CODE.GUESSHB_NEXT })">揭晓/下一轮</button>
      <button @click="sendInstrunction({ code: CODE.GUESSHB_END })">结束游戏</button>
    </div>
    <div
      class="commonMenus publicHCenter"
      v-show="guessHbStatus === 1"
    >
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>
<script>
import { generateGuessHbQrcode, getGuessHbStatus, setGuessHbMod } from '@/api/index';
import sendInstrunction from '@/api/sendCode';
import { CODE } from '@/assets/constant/index';
import { mapMutations, mapState } from 'vuex';

let tmpInterval = null;
export default {
  name: 'GuessRedPacket',
  data() {
    return {
      CODE,
      guessHbQrcodeUrl: '',
      activeIndex: 0,
      hasGuessHbActive: false,
      moneyIpt: '',
      moneyIpt2: '',
    };
  },
  computed: {
    ...mapState({
      guessHbStatus: (state) => state.guessHbStatus,
    }),
    currentTipText() {
      const currentTipTextList = [
        '模式一玩法：请让新人扫码充值红包金额',
        '模式二玩法：输入的竞猜金额将从红包口袋扣除',
        '模式三玩法：请在现场准备现金，然后发给猜中的 来宾。系统不会给猜中的来宾发送红包。',
      ];
      return currentTipTextList[this.activeIndex];
    },
  },
  mounted() {
    this.getGuessHbQrcode();
  },
  beforeDestroy() {
    this.updateGuessHbStatus(0);
    this.endLoop();
  },
  methods: {
    ...mapMutations(['updateGuessHbStatus']),
    sendInstrunction,
    chooseModType(index) {
      this.activeIndex = index;
      if (this.activeIndex === 0) {
        this.loopGetGuessHbStatus();
      } else {
        this.endLoop();
      }
    },
    loopGetGuessHbStatus() {
      if (tmpInterval) return;
      tmpInterval = setInterval(() => {
        getGuessHbStatus()
          .then((res) => {
            console.log(res);
            if (res.chbInfo.pay_status === '200') {
              this.hasGuessHbActive = false;
            } else {
              this.hasGuessHbActive = true;
            }
          })
          .catch((err) => {
            console.log(err);
          });
      }, 2000);
    },
    endLoop() {
      if (tmpInterval) {
        clearInterval(tmpInterval);
        tmpInterval = null;
      }
    },
    getGuessHbQrcode() {
      const logStyle = 'background: #39C5BB; padding: 2px 4px; border-radius: 2px;';
      console.log('%c getGuessHbQrcode', logStyle, this.guessHbStatus);
      if (this.guessHbStatus === 0) {
        generateGuessHbQrcode()
          .then((res) => {
            console.log(res);
            this.guessHbQrcodeUrl = res.end_url;
            this.loopGetGuessHbStatus();
          })
          .catch((err) => {
            console.log(err);
          });
      }
    },
    validateIpt(numStr) {
      const reg = /^\d+(?=\.{0,1}\d+$|$)/;
      let flag = true;
      // 验证数字
      if (!reg.test(numStr)) {
        this.$toast('请输入正确的数字!');
        flag = false;
        return flag;
      }
      // 验证小数不超过两位,整数不超过4位
      if (numStr.indexOf('.') > -1) {
        if (numStr.split('.')[1].length > 2) {
          this.$toast('小数不能超过两位!');
          flag = false;
          return flag;
        } if (numStr.split('.')[0].length > 4) {
          this.$toast('整数不能超过四位!');
          flag = false;
          return flag;
        }
      } else if (numStr.length > 4) {
        this.$toast('整数不能超过四位!');
        flag = false;
        return flag;
      }
      return flag;
    },
    // 补零
    fillZero(numStr) {
      let resultStr = numStr;
      // .2 2.
      if (numStr.indexOf('.') > -1) {
        const tempNumArr = numStr.split('.');
        if (tempNumArr[0] === '') {
          resultStr = `0.${tempNumArr[1]}`;
        } else if (tempNumArr[1] === '') {
          resultStr = `${tempNumArr[1]}.0`;
        }
      }
      return resultStr;
    },
    // 去零
    removeZero(numStr) {
      let resultNumStr = numStr;
      // 05 005 5.0 5.10
      // 050
      if (numStr.indexOf('.') === -1) {
        // 整数
        const tempArr = numStr.split('');
        const tempLen = tempArr.length;
        let tempIndex = -1;
        // 遍历数组找到第一个非0数字的位置索引
        for (let i = 0; i < tempLen; i += 1) {
          if (tempArr[i] !== '0') {
            tempIndex = i;
            break;
          }
        }
        if (tempIndex > -1) {
          // 第一个非0数字前面的0全部清空
          for (let j = 0; j < tempIndex; j += 1) {
            tempArr[j] = '';
          }
          resultNumStr = tempArr.join('');
        } else {
          resultNumStr = '0';
        }
      } else {
        // 小数
        const interStr = numStr.split('.')[0];
        const decimalStr = numStr.split('.')[1];
        let interArr = interStr.split('');
        let decimalArr = decimalStr.split('');
        // 处理整数部分
        const tempLen = interArr.length;
        let tempIndex = -1;
        // 遍历数组找到第一个非0数字的位置索引
        for (let i = 0; i < tempLen; i += 1) {
          if (interArr[i] !== '0') {
            tempIndex = i;
            break;
          }
        }
        if (tempIndex > -1) {
          // 第一个非0数字前面的0全部清空
          for (let j = 0; j < tempIndex; j += 1) {
            if (interArr[j] === 0) {
              interArr[j] = '';
            }
          }
        } else {
          interArr = ['0'];
        }

        // 处理小数 .01 .10 .0 .1 .00
        const tempLen2 = decimalArr.length;
        let tempIndex2 = -1;
        // 遍历数组找到第一个非0数字的位置索引
        for (let i = 0; i < tempLen; i += 1) {
          if (decimalArr[i] !== '0') {
            tempIndex2 = i;
            break;
          }
        }
        if (tempIndex2 > -1) {
          // 第一个非0数字后面的0全部清空
          for (let i = tempIndex2 + 1; i < tempLen2; i += 1) {
            if (decimalArr[i] === 0) {
              decimalArr[i] = '';
            }
          }
        } else {
          decimalArr = ['0'];
        }

        resultNumStr = `${interArr.join('')}.${decimalArr.join('')}`;
      }
      return resultNumStr;
    },
    confirmMoney() {
      let tmpMoney = this.moneyIpt;
      if (!this.validateIpt(tmpMoney)) {
        return;
      }
      // 补零
      tmpMoney = this.fillZero(tmpMoney);
      // 去零
      tmpMoney = this.removeZero(tmpMoney);
      // 化整
      tmpMoney = parseFloat(tmpMoney);
      this.moneyIpt = tmpMoney.toString();
      setGuessHbMod({
        type: this.activeIndex === 1 ? '2' : '1',
        guessMoney: this.moneyIpt,
      })
        .then((res) => {
          console.log(res);
          if (res && res.code === '200') {
            this.$toast('开启成功!开始猜红包游戏吧!');
          } else if (res && res.code === '201') {
            this.$toast('红包口袋余额不足!');
          } else if (res && res.code === '202') {
            this.$toast('已经充值或者设置过了，不能重复操作');
          } else {
            this.$toast('开启失败!');
          }
        })
        .catch((err) => {
          console.log(err);
        });
    },
    confirmMoney2() {
      let tmpMoney = this.moneyIpt2;
      if (!this.validateIpt(tmpMoney)) {
        return;
      }
      // 补零
      tmpMoney = this.fillZero(tmpMoney);
      // 去零
      tmpMoney = this.removeZero(tmpMoney);
      // 化整
      tmpMoney = parseFloat(tmpMoney);
      this.moneyIpt2 = tmpMoney.toString();
      setGuessHbMod({
        type: this.activeIndex === 1 ? '2' : '1',
        guessMoney: this.moneyIpt2,
      })
        .then((res) => {
          console.log(res);
          if (res && res.code === '200') {
            this.$toast('开启成功!开始猜红包游戏吧!');
          } else if (res && res.code === '201') {
            this.$toast('红包口袋余额不足!');
          } else if (res && res.code === '202') {
            this.$toast('已经充值或者设置过了，不能重复操作');
          } else {
            this.$toast('开启失败!');
          }
        })
        .catch((err) => {
          console.log(err);
        });
    },
  },
};
</script>
<style lang="less" scoped>
.xydbMod {
  width: 100%;
  height: 100%;
  position: relative;
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
    .guessHbModBox {
      width: 100vw;
      margin-bottom: 20px;
      .modeTypes {
        display: flex;
        width: 100%;
        justify-content: space-around;
        margin-bottom: 50px;
        .modeTypeItem {
          width: 160px;
          height: 56px;
          background: #ab8b6e;
          border-radius: 8px;
          font-size: 24px;
          font-weight: 500;
          color: #ffffff;
          text-align: center;
          line-height: 56px;
          &.active {
            background: linear-gradient(139deg, #ffd33a 0%, #ff3d3d 100%);
          }
        }
      }
      .qrcodeBox {
        width: 440px;
        padding-bottom: 20px;
        background: #ffffff;
        border-radius: 16px;
        display: flex;
        flex-direction: column;
        align-items: center;
        margin: 0 auto;
        margin-top: 48px;
        .title {
          font-size: 32px;
          font-weight: 500;
          color: #333333;
          padding-top: 18px;
        }
        .qrcodeImg {
          width: 332px;
          height: 334px;
          margin-top: 18px;
        }
        .tip {
          margin-top: 16px;
          font-size: 24px;
          font-weight: 400;
          color: #333333;
        }
        .status {
          font-size: 24px;
          color: #6b9ba5;
          text-align: center;
          margin-top: 28px;
        }
      }
      .hbkdBox {
        width: 440px;
        height: 576px;
        background-image: url('https://static.hudongmiao.com/joymewAssistant/guessHbRecharge/guessHbPayBg2.png');
        background-size: 100% 100%;
        position: relative;
        margin: 0 auto;
        margin-top: 48px;
        display: flex;
        flex-direction: column;
        align-items: center;
        padding-top: 32px;
        .remainMoney {
          font-size: 28px;
          font-weight: 500;
          color: #ffffff;
          display: flex;
          align-items: center;
        }
        .iptWrap {
          width: 392px;
          height: 72px;
          background: #ffffff;
          position: relative;
          margin-top: 26px;
          padding-left: 200px;
          padding-right: 16px;
          overflow: hidden;
          .label {
            font-size: 24px;
            font-weight: 400;
            color: #ff0000;
            position: absolute;
            height: 100%;
            padding-left: 16px;
            left: 0;
            display: flex;
            align-items: center;
          }
          .numIpt {
            position: absolute;
            width: 50%;
            height: 100%;
            outline: none;
            border: none;
            color: #ff0000;
            right: 0;
            top: 0;
            padding-right: 16px;
            text-align: right;
            font-size: 24px;
          }
        }
        .smallTip {
          font-size: 24px;
          font-weight: 400;
          color: #ffffff;
          margin-top: 102px;
        }
        .confirmBtn {
          width: 160px;
          height: 56px;
          background: #edf1f6;
          border-radius: 46px;
          text-align: center;
          line-height: 56px;
          font-size: 24px;
          font-weight: 500;
          color: #6b9ba5;
          margin-top: 100px;
        }
        .otherTip {
          font-size: 24px;
          font-weight: 400;
          color: #ffffff;
          margin-top: 40px;
        }
      }
      .playTip {
        font-size: 28px;
        font-weight: 500;
        color: #333333;
        margin-top: 20px;
        padding: 0 60px;
        line-height: 45px;
        text-align: center;
        &.multiLine {
          text-align: left;
        }
      }
    }
    .tip2 {
      font-size: 32px;
      color: #fff;
      margin-bottom: 40px;
    }
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }
}

button {
  width: 24vw;
  height: 10.67vw;
  font-size: 3.47vw;

  &.to-home {
    width: 32vw;
    font-size: 4.27vw;
  }

  margin-bottom: 30px;
  border-radius: 28px;
  color: #fff;
  border: 2px solid #fff;
  background-color: rgba(0, 0, 0, 0);
  transition: all 0.2s linear;

  &:active {
    background-color: rgba(255, 255, 255, 0.6);
  }
}
</style>
</file>

<file path="src/views/luckyTreasure/LuckyWheel.vue">
<!--
  * @description: 「幸运小转盘」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="container">
    <div class="funcMenus publicVCenter">
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.LUCKYWHEELSTARTGAME })"
      >
        开始游戏
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.LUCKYWHEELENDGAME })"
      >
        结束游戏
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.LUCKYWHEELREPLAY })"
      >
        再玩一次
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.HOME })"
      >
        回到首页
      </button>
    </div>
    <div class="commonMenus publicHCenter">
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>
<script>
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'LuckyWheel',
  data() {
    return {
      CODE,
    };
  },
  methods: {
    sendInstrunction,
  },
};
</script>
<style lang="less" scoped>
.container {
  width: 100%;
  height: 100%;
  position: relative;

  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }

  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }

  button {
    width: 24vw;
    height: 10.67vw;
    font-size: 3.47vw;

    &.main {
      width: 32vw;
      font-size: 4.27vw;
    }

    margin-bottom: 30px;
    border-radius: 28px;
    color: #fff;
    border: 2px solid #fff;
    background-color: rgba(0, 0, 0, 0);
    transition: all 0.2s linear;

    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }
}
</style>
</file>

<file path="src/views/luckyTreasure/RaceAgainstTime.vue">
<!--
  * @description: 「争分夺秒」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="kbxMod">
    <div
      class="step"
      v-if="zfdmStep === 0"
    >
      <div class="funcMenus publicVCenter">
        <button
          class="start"
          @click="chooseType(item)"
          v-for="item in zfdmList"
          :key="item.race_type"
        >
          开启{{ item.raceTime }}秒挑战{{ item.lotteryMoney }}元红包
        </button>
        <button @click="sendInstrunction({ code: CODE.HOME })">回到首页</button>
      </div>
      <div class="commonMenus publicHCenter">
        <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
        <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
        <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
        <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
      </div>
    </div>
    <div
      class="step"
      v-if="zfdmStep === 1"
    >
      <div class="funcMenus publicVCenter">
        <button @click="sendInstrunction({ code: CODE.ZFDMSTARTGAME })">开始游戏</button>
      </div>
    </div>
    <div
      class="step"
      v-if="zfdmStep === 2"
    >
      <div class="funcMenus publicVCenter">
        <button @click="sendInstrunction({ code: CODE.ZFDMENDGAME })">结束游戏</button>
      </div>
    </div>
    <div
      class="step"
      v-if="zfdmStep === 3"
    >
      <div class="funcMenus publicVCenter">
        <button @click="sendInstrunction({ code: CODE.ZFDMREPLAYGAME })">再玩一次</button>
        <button @click="sendInstrunction({ code: CODE.HOME })">回到首页</button>
      </div>
      <div class="commonMenus publicHCenter">
        <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
        <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
        <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
        <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
      </div>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'RaceAgainstTime',
  computed: {
    ...mapState({
      zfdmStep: (state) => state.zfdmStep,
      zfdmList: (state) => state.zfdmList,
    }),
  },
  data() {
    return {
      CODE,
      activeBox: -1, // 当前被选中宝箱的编号
      activeIndex: -1, // 当前被选中宝箱的索引
    };
  },
  beforeDestroy() {
    this.$store.commit('clearOpenedBox');
  },
  methods: {
    sendInstrunction,
    chooseType(zfdmItem) {
      const param = {
        type: zfdmItem.race_type,
        raceTime: zfdmItem.raceTime,
      };
      sendInstrunction({
        code: CODE.ZFDMCHOOSETYPE,
        param: JSON.stringify(param),
      });
    },
  },
};
</script>
<style lang="less" scoped>
.kbxMod {
  width: 100%;
  height: 100%;
  position: relative;
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }
  .btnGroup::v-deep {
    margin: 6vw auto;
    width: 32vw;
    .van-button {
      height: 8vw;
      margin-bottom: 4vw;
      &.van-button--normal {
        font-size: 3.2vw;
      }
    }
  }
}

button {
  width: 24vw;
  height: 10.67vw;
  font-size: 3.47vw;

  &.start {
    width: auto;
    padding: 20px;
  }

  margin-bottom: 30px;
  border-radius: 28px;
  color: #fff;
  border: 2px solid #fff;
  background-color: rgba(0, 0, 0, 0);
  transition: all 0.2s linear;

  &:active {
    background-color: rgba(255, 255, 255, 0.6);
  }
}
</style>
</file>

<file path="src/views/luckyTreasure/SendBlessing.vue">
<!--
  * @description: 「送祝福」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="kbxMod">
    <div
      class="step"
      v-if="szfStep === 0"
    >
      <div class="funcMenus publicVCenter">
        <button
          class="second"
          @click="chooseType(item)"
          v-for="item in timeList"
          :key="item.id"
        >
          {{ item.name }}秒
        </button>
        <button @click="sendInstrunction({ code: CODE.HOME })">回到首页</button>
      </div>
      <div class="commonMenus publicHCenter">
        <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
        <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
        <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
        <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
      </div>
    </div>
    <div
      class="step"
      v-if="szfStep === 1"
    >
      <div class="funcMenus publicVCenter">
        <button @click="sendInstrunction({ code: CODE.SZFENDGAME })">结束游戏</button>
      </div>
    </div>
    <div
      class="step"
      v-if="szfStep === 2"
    >
      <div class="funcMenus publicVCenter">
        <button @click="sendInstrunction({ code: CODE.SZFREPLAYGAME })">再玩一次</button>
        <button @click="sendInstrunction({ code: CODE.HOME })">回到首页</button>
      </div>
      <div class="commonMenus publicHCenter">
        <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
        <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
        <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
        <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
      </div>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

const TIMES = [
  {
    id: 0,
    name: '120',
  },
  {
    id: 1,
    name: '150',
  },
  {
    id: 2,
    name: '180',
  },
];

export default {
  name: 'sendBlessing',
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
      szfStep: (state) => state.szfStep,
    }),
  },
  data() {
    return {
      timeList: TIMES,
      CODE,
    };
  },
  beforeDestroy() {
    this.$store.commit('clearOpenedBox');
  },
  methods: {
    sendInstrunction,
    chooseType(pObj) {
      const tParam = {
        time: pObj.name,
      };
      sendInstrunction({
        code: CODE.SZFCHOOSETIME,
        param: JSON.stringify(tParam),
      });
    },
  },
};
</script>

<style lang="less" scoped>
.kbxMod {
  width: 100%;
  height: 100%;
  position: relative;
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }
  .btnGroup::v-deep {
    margin: 6vw auto;
    width: 32vw;
    .van-button {
      height: 8vw;
      margin-bottom: 4vw;
      &.van-button--normal {
        font-size: 3.2vw;
      }
    }
  }
}

button {
  width: 24vw;
  height: 10.67vw;
  font-size: 3.47vw;

  &.second {
    width: 50vw;
  }

  margin-bottom: 30px;
  border-radius: 28px;
  color: #fff;
  border: 2px solid #fff;
  background-color: rgba(0, 0, 0, 0);
  transition: all 0.2s linear;

  &:active {
    background-color: rgba(255, 255, 255, 0.6);
  }
}
</style>
</file>

<file path="src/views/luckyTreasure/SpinItUp.vue">
<!--
  * @description: 「转一转」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="container">
    <div class="funcMenus publicVCenter">
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.ZYZSTARTGAME })"
      >
        开始游戏
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.ZYZENDGAME })"
      >
        结束游戏
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.ZYZREPLAY })"
      >
        再玩一次
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.HOME })"
      >
        回到首页
      </button>
    </div>
    <div class="commonMenus publicHCenter">
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>

<script>
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'SpinItUp',
  data() {
    return {
      CODE,
    };
  },
  methods: {
    sendInstrunction,
  },
};
</script>
<style lang="less" scoped>
.container {
  width: 100%;
  height: 100%;
  position: relative;

  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }

  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }

  button {
    width: 24vw;
    height: 10.67vw;
    font-size: 3.47vw;

    &.main {
      width: 32vw;
      font-size: 4.27vw;
    }

    margin-bottom: 30px;
    border-radius: 28px;
    color: #fff;
    border: 2px solid #fff;
    background-color: rgba(0, 0, 0, 0);
    transition: all 0.2s linear;

    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }
}
</style>
</file>

<file path="src/views/luckyTreasure/TwistItUp.vue">
<!--
  * @description: 「扭一扭」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="container">
    <div class="funcMenus publicVCenter">
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.NYNSTARTGAME })"
      >
        开始游戏
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.NYNENDGAME })"
      >
        结束游戏
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.NYNREPLAY })"
      >
        再玩一次
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.HOME })"
      >
        回到首页
      </button>
    </div>
    <div class="commonMenus publicHCenter">
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>
<script>
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'TwistItUp',
  data() {
    return {
      CODE,
    };
  },
  methods: {
    sendInstrunction,
  },
};
</script>
<style lang="less" scoped>
.container {
  width: 100%;
  height: 100%;
  position: relative;

  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }

  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }

  button {
    width: 24vw;
    height: 10.67vw;
    font-size: 3.47vw;

    &.main {
      width: 32vw;
      font-size: 4.27vw;
    }

    margin-bottom: 30px;
    border-radius: 28px;
    color: #fff;
    border: 2px solid #fff;
    background-color: rgba(0, 0, 0, 0);
    transition: all 0.2s linear;

    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }
}
</style>
</file>

<file path="src/views/main.vue">
<template>
  <div
    class="main"
    :style="{ backgroundImage: 'url(' + menuInfo.bg + ')' }"
  >
    <!-- 顶部 -->
    <myHead
      class="head"
      :name="menuInfo.name"
    />
    <router-view class="router-view"></router-view>
    <!-- 底部菜单 -->
    <menuBottom
      class="menu-bottom"
      ref="menuBottom"
      :name="menuInfo.name"
      :bg="menuInfo.bg"
      :subMenus="menuInfo.subMenus"
    />
  </div>
</template>
<script>
import { getMenuInfoByfLevelId } from '@/assets/constant/index';
import menuBottom from '@/components/menuBottom.vue';
import myHead from '@/components/myHead.vue';
import { mapState } from 'vuex';

export default {
  name: 'myMain',
  components: {
    myHead,
    menuBottom,
  },
  data() {
    return {

    };
  },
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
      userRoutes: (state) => state.userRoutes,
    }),
    // XXX 后续需要重构为从路由中获取
    /** 当前菜单信息 */
    menuInfo() {
      if (this.currentMenuId) {
        return getMenuInfoByfLevelId(this.currentMenuId, this.userRoutes);
      }
      return { name: '', bg: '', subMenus: [] };
    },
  },
};
</script>
<style lang="less" scoped>
.main {
  width: 100vw;
  height: 100vh;
  position: relative;
  background-size: 100% 100%;

  display: grid;
  grid-template:
    'head ' min-content
    'router-view' 1fr
    'menu-bottom' min-content
    ~'/' 1fr;
  row-gap: 30px;

  .head {
    grid-area: head;
  }

  .router-view {
    grid-area: router-view;
    height: 100%;
    overflow: scroll;
  }

  .menu-bottom {
    grid-area: menu-bottom;
  }
}
</style>
</file>

<file path="src/views/miniGame/components/pokerCard.vue">
<template>
    <div :class="cardClass" @click="onCardClick">
        <div :class="cardValueClass"></div>
        <div :class="cardHuaseClass"></div>
    </div>
</template>

<script>

export default {
  data: () => ({
  }),
  props: {
    cardType: {
      type: Number, // 1表示玩家手牌，
      default: 1,
    },
    cardValue: {
      type: String,
      default: '1-1',
    },
    cardSelected: {
      type: Boolean,
      default: false,
    },
    cardIndex: {
      type: Number,
      default: 0,
    },
    dragable: {
      type: Boolean,
      default: false,
    },
    dragging: {
      type: Boolean,
      default: false,
    },
  },
  computed: {
    cardClass() {
      const classes = [];
      const base = 'card-item';
      classes.push(base);
      classes.push(this.cardTypeClass);
      classes.push(this.cardSelected ? 'card-selected' : '');
      classes.push(this.dragging ? 'card-drag' : '');
      // console.log("classes",classes)
      return classes;
    },
    cardTypeClass() {
      switch (this.cardType) {
        case 1:
          return 'player';
        default:
          return 'player';
      }
    },
    cardValueClass() {
      return `card-value card-${this.cardValue}`;
    },
    cardHuaseClass() {
      const arr = this.cardValue.split('-');
      if (arr[0] === '5') {
        return '';
      }
      return `card-huase card-huase-${arr[0]}`;
    },
  },
  methods: {
    onCardClick(e) {
      // console.log('click事件')
      this.$emit('click', e);
    },
    onDragStart(e) {
      console.log('touchDown 事件', this.cardIndex);
      if (!this.dragable) { return; }
      if (e.button === 0) {
        this.$emit('dragstart', e, this.cardIndex);
      }
    },
    onDragEnd(e) {
      if (!this.dragable) { return; }
      console.log('touchup事件', e, this.cardIndex);
      this.$emit('dragend', e, this.cardIndex);
    },
    onDragMove(e) {
      if (!this.dragable) { return; }
      console.log('touchmove事件', this.cardIndex);
      this.$emit('dragmove', e, this.cardIndex);
    },
  },

};
</script>
<style scoped lang="less">
.card-item {
    position: relative;
    background-image: url('https://ustatic.joymew.com/%20miao/poker/poker-card.png');
    background-size: 100% 100%;

    cursor: pointer;
    transition: transform 0.3s ease;
    user-select: none;

    &.card-selected {
        transform: translateY(-10vw);
    }

    &.card-drag {
        background: linear-gradient(rgba(0, 0, 255, 0.3), rgba(0, 0, 255, 0.3)), url('https://ustatic.joymew.com/%20miao/poker/poker-card.png');
    }

    &.player {
        margin-left: -8vw;
        width: 15vw;
        height: 22vw;

        .card-value {
            position: absolute;
            background-image: url('https://ustatic.hudongmiao.com/joymewScreen/img/playPoker/large_card_num.png');
            background-repeat: no-repeat;
            top: 10px;
            left: 5px;
            width: 42px;
            height: 46px;
            background-size: 546px 138px;

            &.card-1-1 {
                background-position: 0px 0px;
            }

            &.card-2-1 {
                background-position: 0px 0px;
            }

            &.card-3-1 {
                background-position: 0px -92px;
            }

            &.card-4-1 {
                background-position: 0px -92px;
            }

            &.card-1-2 {
                background-position: -42px 0px;
            }

            &.card-2-2 {
                background-position: -42px 0px;
            }

            &.card-3-2 {
                background-position: -42px -92px;
            }

            &.card-4-2 {
                background-position: -42px -92px;
            }

            &.card-1-3 {
                background-position: -84px 0px;
            }

            &.card-2-3 {
                background-position: -84px 0px;
            }

            &.card-3-3 {
                background-position: -84px -92px;
            }

            &.card-4-3 {
                background-position: -84px -92px;
            }

            &.card-1-4 {
                background-position: -126px 0px;
            }

            &.card-2-4 {
                background-position: -126px 0px;
            }

            &.card-3-4 {
                background-position: -126px -92px;
            }

            &.card-4-4 {
                background-position: -126px -92px;
            }

            &.card-1-5 {
                background-position: -168px 0px;
            }

            &.card-2-5 {
                background-position: -168px 0px;
            }

            &.card-3-5 {
                background-position: -168px -92px;
            }

            &.card-4-5 {
                background-position: -168px -92px;
            }

            &.card-1-6 {
                background-position: -210px 0px;
            }

            &.card-2-6 {
                background-position: -210px 0px;
            }

            &.card-3-6 {
                background-position: -210px -92px;
            }

            &.card-4-6 {
                background-position: -210px -92px;
            }

            &.card-1-7 {
                background-position: -252px 0px;
            }

            &.card-2-7 {
                background-position: -252px 0px;
            }

            &.card-3-7 {
                background-position: -252px -92px;
            }

            &.card-4-7 {
                background-position: -252px -92px;
            }

            &.card-1-8 {
                background-position: -294px 0px;
            }

            &.card-2-8 {
                background-position: -294px 0px;
            }

            &.card-3-8 {
                background-position: -294px -92px;
            }

            &.card-4-8 {
                background-position: -294px -92px;
            }

            &.card-1-9 {
                background-position: -336px 0px;
            }

            &.card-2-9 {
                background-position: -336px 0px;
            }

            &.card-3-9 {
                background-position: -336px -92px;
            }

            &.card-4-9 {
                background-position: -336px -92px;
            }

            &.card-1-10 {
                background-position: -378px 0px;
            }

            &.card-2-10 {
                background-position: -378px 0px;
            }

            &.card-3-10 {
                background-position: -378px -92px;
            }

            &.card-4-10 {
                background-position: -378px -92px;
            }

            &.card-1-11 {
                background-position: -420px 0px;
            }

            &.card-2-11 {
                background-position: -420px 0px;
            }

            &.card-3-11 {
                background-position: -420px -92px;
            }

            &.card-4-11 {
                background-position: -420px -92px;
            }

            &.card-1-12 {
                background-position: -462px 0;
            }

            &.card-2-12 {
                background-position: -462px 0;
            }

            &.card-3-12 {
                background-position: -462px -92px;
            }

            &.card-4-12 {
                background-position: -462px -92px;
            }

            &.card-1-13 {
                background-position: -504px 0px;
            }

            &.card-2-13 {
                background-position: -504px 0px;
            }

            &.card-3-13 {
                background-position: -504px -92px;
            }

            &.card-4-13 {
                background-position: -504px -92px;
            }

            &.card-5-1 {
                background-image: url('https://ustatic.hudongmiao.com/joymewScreen/img/playPoker/large_card_king_num.png');
                top: 10px;
                left: 10px;
                background-size: 22px 77px;
                width: 11px;
                height: 77px;
                background-position: 0 0;
            }

            &.card-5-2 {
                background-image: url('https://ustatic.hudongmiao.com/joymewScreen/img/playPoker/large_card_king_num.png');
                top: 10px;
                left: 10px;
                background-size: 22px 77px;
                width: 11px;
                height: 77px;
                background-position: -11px 0;
            }
        }

        .card-huase {
            position: absolute;
            background-image: url('https://ustatic.hudongmiao.com/joymewScreen/img/playPoker/large_card_huase.png');
            background-repeat: no-repeat;
            top: 70px;
            left: 10px;
            width: 30px;
            height: 20px;
            background-size: 150px 20px;

            &.card-huase-1 {
                background-position: -30px 0;
            }

            &.card-huase-2 {
                background-position: -90px 0;
            }

            &.card-huase-3 {
                background-position: 0px 0;
            }

            &.card-huase-4 {
                background-position: -60px 0;
            }
        }
    }
}
</style>
</file>

<file path="src/views/miniGame/gestureRiddle.vue">
<!--
  * @Description: 「你划我猜」游戏遥控器
  * @Author: Ruan Jiazhen
  * @Date: 2023-12-22
-->
<template>
  <div>
    <div class="container">
      <button
        class="btn start"
        @click="start"
      >
        开始游戏
      </button>
      <div class="category-list">
        <button
          class="category-item"
          v-for="(item, index) in categoryList"
          :key="index"
          @click="selectCategory(item)"
        >
          {{ item }}
        </button>
      </div>
      <button
        v-for="(item, index) in btnList"
        :key="index"
        :class="`btn ${item.class}`"
        @click="clickBtn(item.type)"
      >
        {{ item.name }}
      </button>
    </div>
  </div>
</template>

<script>
import sendInstrunction from '@/api/sendCode';
import { CONTROL_CODE } from '@/assets/constant';
import { extractMessage, screenMessenger } from '@/modules/screenMessenger';

export default {
  name: 'gestureRiddle',
  data() {
    return {
      categoryList: ['生活', '食品', '物品', '人物', '电影', '成语'],
      btnList: [
        { name: '换一题', class: 'change-question', type: 'GestureRiddleChangeQuestion' },
        { name: '正确', class: 'answer-right', type: 'GestureRiddleAnswerRight' },
        { name: '提前结束', class: 'end-game', type: 'GestureRiddleEndGame' },
        { name: '再玩一次', class: 'play-again', type: 'GestureRiddlePlayAgain' },
        { name: '游戏成绩', class: 'score', type: 'GestureRiddleScore' },
        { name: '清空游戏成绩', class: 'clear-score', type: 'GestureRiddleClearScore' },
      ],
    };
  },
  mounted() {
    setTimeout(() => {
      this.sendCategoryListRequest();
    }, 1000);
    screenMessenger.on(this.handleMessage);
  },
  beforeDestroy() {
    screenMessenger.off(this.handleMessage);
  },
  methods: {
    sendCategoryListRequest() {
      sendInstrunction({
        code: CONTROL_CODE.GAME_CONTROL,
        param: { type: 'GestureRiddleCategoryList' },
      });
    },
    handleMessage(msg) {
      const { param } = extractMessage(msg);
      if (param.type === 'GestureRiddleCategoryList') {
        this.categoryList = param.data;
      }
    },
    async start() {
      sendInstrunction({
        code: CONTROL_CODE.GAME_CONTROL,
        param: { type: 'GestureRiddleStart' },
      });
    },
    selectCategory(category) {
      sendInstrunction({
        code: CONTROL_CODE.GAME_CONTROL,
        param: { type: 'GestureRiddleSelectCategory', category },
      });
    },
    async clickBtn(type) {
      switch (type) {
        case 'GestureRiddleEndGame':
          try {
            await this.$dialog.confirm({
              title: '提示',
              message: '是否提前结束游戏？',
            });
          } catch (err) {
            if (err === 'cancel') return;
            console.error(err);
          }
          break;
        case 'GestureRiddleClearScore':
          try {
            await this.$dialog.confirm({
              title: '提示',
              message: '是否清空游戏成绩？',
            });
          } catch (err) {
            if (err === 'cancel') return;
            console.error(err);
          }
          break;
        default:
          break;
      }
      sendInstrunction({
        code: CONTROL_CODE.GAME_CONTROL,
        param: { type },
      });
    },
  },
};
</script>

<style scoped lang="less">
.container {
  width: 100vw;

  padding: 0 10px;

  display: grid;
  grid-template-areas:
    'start start start'
    'category-list category-list category-list'
    'change-question answer-right end-game'
    'play-again score clear-score';
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(4, min-content);
  place-items: center;
  grid-gap: 20px;

  .btn {
    width: 30vw;
    height: 10.67vw;

    border-radius: 28px;
    background-color: transparent;
    color: #fff;
    border: 2px solid #fff;
    transition: all 0.2s linear;

    display: flex;
    justify-content: center;
    align-items: center;

    font-size: 3.47vw;
    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }

  .category-list {
    grid-area: category-list;

    border: 2px solid #fff;
    border-radius: 28px;

    padding: 10px;

    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, min-content);
    place-items: center;
    grid-gap: 10px;

    .category-item {
      width: 30vw;
      height: 10.67vw;

      border-radius: 28px;
      color: #fff;
      border: 2px solid #fff;
      transition: all 0.2s linear;

      display: flex;
      justify-content: center;
      align-items: center;

      font-size: 3.47vw;

      &:nth-child(1) {
        background-color: #ffa231;
      }

      &:nth-child(2) {
        background-color: #3289ff;
      }

      &:nth-child(3) {
        background-color: #e365c9;
      }

      &:nth-child(4) {
        background-color: #26beef;
      }

      &:nth-child(5) {
        background-color: #002b9a;
      }

      &:nth-child(6) {
        background-color: #9565e3;
      }

      &:active {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }

  .start {
    grid-area: start;
  }

  .change-question {
    grid-area: change-question;
  }

  .answer-right {
    grid-area: answer-right;
  }

  .end-game {
    grid-area: end-game;
  }

  .play-again {
    grid-area: play-again;
  }

  .score {
    grid-area: score;
  }

  .clear-score {
    grid-area: clear-score;
  }
}
</style>
</file>

<file path="src/views/miniGame/MiniGameCommon.vue">
<!--
  * @description: 「小游戏」控制通用组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-09
-->
<template>
    <div class="miniGameMod">
        <!-- 搞笑猜明星 猜明星 品牌达人-->
        <div class="m1" v-if="currentMenuId === '7-1' || currentMenuId === '7-2' || currentMenuId === '7-23'">
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="prev">
                    上一个
                </funcButton>
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="next">
                    下一个
                </funcButton>
            </div>
            <div class="commonMenus publicHCenter" v-if="currentMenuId === '7-23' || currentMenuId === '7-2'">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="getStart">
                    开始游戏
                </funcButton>
            </div>
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="getTip">
                    提示
                </funcButton>
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="getAnswer">
                    揭晓答案
                </funcButton>
            </div>
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="toHome">
                    回到首页
                </funcButton>
            </div>
            <div class="answers">
                <label>答案：</label>
                {{ currentMiniGameAnswer }}
            </div>
        </div>
        <!-- 猜成语 猜英雄 猜奥特曼 猜电影 猜台词 看图猜景-->
        <div class="m2" v-if="
        currentMenuId === '7-4' ||
        currentMenuId === '7-6' ||
        currentMenuId === '7-7' ||
        currentMenuId === '7-8' ||
        currentMenuId === '7-14' ||
        currentMenuId === '7-15' ||
        currentMenuId === '7-21' ||
        currentMenuId === '7-22' ||
        currentMenuId === '7-24'
      ">
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="prev">
                    上一个
                </funcButton>
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="next">
                    下一个
                </funcButton>
            </div>
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="getStart">
                    开始
                </funcButton>
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="getAnswer">
                    揭晓答案
                </funcButton>
            </div>
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="toHome">
                    回到首页
                </funcButton>
            </div>
            <div class="answers">
                <label>答案：</label>
                <!-- {{ currentMiniGameAnswer }} -->
                <div v-html="currentMiniGameAnswer"></div>
            </div>
        </div>
        <!-- 开心猜成语 -->
        <div class="m3" v-if="currentMenuId === '7-3'">
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="prev">
                    上一个
                </funcButton>
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="next">
                    下一个
                </funcButton>
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="getAnswer">
                    揭晓答案
                </funcButton>
            </div>
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="toHome">
                    回到首页
                </funcButton>
            </div>
            <div class="answers">
                <label>答案：</label>
                {{ currentMiniGameAnswer }}
            </div>
        </div>
        <!-- 投票 -->
        <div class="m4" v-if="currentMenuId === '7-5'">
            <div class="funcMenus publicVCenter">
                <funcButton bWidth="32vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="clearLate">
                    清空上一轮
                </funcButton>
                <funcButton bWidth="32vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="saveLate">
                    保留上一轮
                </funcButton>
                <funcButton bWidth="32vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="endVote">
                    结束投票
                </funcButton>
            </div>
        </div>
        <!-- 雀神大赛(旧版) -->
        <div class="m5" v-if="currentMenuId === '7-18'">
           <!-- <div style="display: flex; justify-content: center">
                <funcButton @clickEvent="sendDifficulty('easy')" bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw">
                    简单
                </funcButton>
                <funcButton @clickEvent="sendDifficulty('hard')" bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw">
                    困难
                </funcButton>
            </div> -->
            <div style="display: flex">
                <funcButton :style="qsNum == 1 && 'font-weight: bold; color: black; border: 2px solid black'"
                    @clickEvent="majiangAnswerNum(1)">
                    1张
                </funcButton>
                <funcButton :style="qsNum == 2 && 'font-weight: bold; color: black; border: 2px solid black'"
                    @clickEvent="majiangAnswerNum(2)">
                    2张
                </funcButton>
                <funcButton :style="qsNum == 3 && 'font-weight: bold; color: black; border: 2px solid black'"
                    @clickEvent="majiangAnswerNum(3)">
                    3张
                </funcButton>
                <funcButton :style="qsNum == 4 && 'font-weight: bold; color: black; border: 2px solid black'"
                    @clickEvent="majiangAnswerNum(4)">
                    4张
                </funcButton>
                <funcButton :style="qsNum == 5 && 'font-weight: bold; color: black; border: 2px solid black'"
                    @clickEvent="majiangAnswerNum(5)">
                    5张
                </funcButton>
                <funcButton :style="qsNum == 6 && 'font-weight: bold; color: black; border: 2px solid black'"
                    @clickEvent="majiangAnswerNum(6)">
                    6张
                </funcButton>
            </div>
            <div class="funcMenus publicVCenter">
                <funcButton bWidth="32vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="majiangHupai">
                    胡牌
                </funcButton>
                <funcButton bWidth="32vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="majiangHupai">
                    继续
                </funcButton>
            </div>
            <div class="answers">
                <label>答案：</label>
                {{ currentMiniGameAnswer }}
            </div>
        </div>
        <!-- 雀神大赛（新版） -->
        <div class="m5" v-if="currentMenuId === '7-9'">
            <div class="funcMenus publicVCenter">
                <funcButton @clickEvent="startGame">开始游戏</funcButton>
                <funcButton @clickEvent="endGame">结束游戏</funcButton>
                <funcButton @clickEvent="reStartGame">再玩一次</funcButton>
                <funcButton @clickEvent="majiangNext">下一题</funcButton>
            </div>
            <div class="answers">
                <label>答案：</label>
                {{ currentMiniGameAnswer }}
            </div>
        </div>
        <!-- 诗词大赛 -->
        <div class="m6" v-if="currentMenuId === '7-10'">
            <div class="funcMenus publicVCenter">
                <funcButton bWidth="32vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="getAnswer">
                    揭晓答案
                </funcButton>
                <funcButton bWidth="32vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="next">
                    下一题
                </funcButton>
            </div>
            <div class="answers">
                <label>答案：</label>
                {{ currentMiniGameAnswer }}
            </div>
        </div>
        <!-- 跳一跳 -->
        <div class="m7" v-if="currentMenuId === '7-11'">
            <div class="funcMenus publicVCenter">
                <funcButton @clickEvent="startGame">开始游戏</funcButton>
                <funcButton @clickEvent="endGame">结束游戏</funcButton>
                <funcButton @clickEvent="reStartGame">再玩一次</funcButton>
                <funcButton @clickEvent="toHome">回到首页</funcButton>
            </div>
        </div>
        <!-- 评分(新版) -->
        <div class="m4" v-if="currentMenuId === '7-12' && giveMarkVersion === 'new'">
            <div class="funcMenus publicVCenter">
                <funcButton @clickEvent="savePrev">保存上一轮数据</funcButton>
                <funcButton @clickEvent="clearPrev">清空上一轮数据</funcButton>
                <funcButton @clickEvent="toNext">下一位</funcButton>
                <funcButton @clickEvent="toPrev">上一位</funcButton>
                <funcButton @clickEvent="endGame">结束游戏</funcButton>
            </div>
        </div>
        <!-- 评分(旧版) -->
        <div class="m4" v-if="currentMenuId === '7-12' && giveMarkVersion === 'old'">
            <div class="funcMenus publicVCenter">
                <funcButton @clickEvent="startGiveMark">查看评分</funcButton>
                <funcButton @clickEvent="checkSumScore">查看总分</funcButton>
                <funcButton @clickEvent="toNext">下一位/排行榜</funcButton>
                <funcButton @clickEvent="endGame">结束游戏</funcButton>
            </div>
        </div>
        <!-- 说颜色 -->
        <div class="m6" v-if="currentMenuId === '7-13'">
            <div class="funcMenus publicVCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="startCwzys">
                    开始
                </funcButton>
                <funcButton bWidth="32vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="getAnswer">
                    揭晓答案
                </funcButton>
                <funcButton bWidth="32vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="nextCwzys">
                    下一题
                </funcButton>
            </div>
            <div class="answers">
                <label>答案：</label>
                {{ currentMiniGameAnswer }}
            </div>
        </div>
        <!-- 汉字 -->
        <div class="m7" v-if="currentMenuId === '7-16'">
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="next">
                    下一个
                </funcButton>
            </div>
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="getAnswer">
                    揭晓答案
                </funcButton>
            </div>
            <div class="commonMenus publicHCenter">
                <funcButton bWidth="24vw" bHeight="10.67vw" bFontSize="3.47vw" @clickEvent="toHome">
                    回到首页
                </funcButton>
            </div>
            <div class="answers">
                <label>答案：</label>
                {{ currentMiniGameAnswer }}
            </div>
        </div>
        <!-- 开心问答 -->
        <div class="m5" v-if="currentMenuId === '7-17' || currentMenuId === '7-20'">
            <div class="funcMenus publicVCenter">
                <funcButton @clickEvent="startGame">开始游戏</funcButton>
                <funcButton @clickEvent="endGame">结束游戏</funcButton>
                <funcButton @clickEvent="reStartGame">再玩一次</funcButton>
                <funcButton @clickEvent="getAnswer">揭晓答案</funcButton>
                <funcButton @clickEvent="next">下一题</funcButton>
            </div>
            <div class="answers">
                <label>答案：</label>
                {{ currentMiniGameAnswer }}
            </div>
        </div>
        <!-- 扑克残局 -->
        <!-- <div class="poker-game" v-if="currentMenuId === '7-25'">
            <div class="funcMenus publicVCenter">
                <funcButton bWidth="35vw" bHeight="8vw" bFontSize="4.47vw" @clickEvent="playpokerStart">开始/重新开始
                </funcButton>
            </div>
            <div class="poker-cards" v-if="$store.state.playpokerData.playerCards">
                <PokerCard v-for="(item, index) in $store.state.playpokerData.playerCards" :key="index"
                    :card-value="item" :style="{ zIndex: index + 1 }" :card-index='index' :dragable="true"
                    :card-selected="$store.state.playpokerData.playerCardsStatus[index]"
                    :dragging="$store.state.playpokerData.playerCardsDraggingStatus[index]"
                    @click.stop="(e) => { onPokerCardSwitch(e, index) }"></PokerCard>
            </div>
            <div class="poker-waiting" v-else="">等待数据...</div>
            <div class="poker-btns" v-if="$store.state.playpokerData.playerCards">
                <funcButton v-if="$store.state.playpokerData.playerCards.length>0" bWidth="35vw" bHeight="8vw"
                    bFontSize="4.47vw" @clickEvent="playpokerProduce">出牌</funcButton>
                <funcButton v-if="$store.state.playpokerData.playerCards.length>0 && $store.state.playpokerData.lastRobotPlayedCards.length>0" bWidth="35vw" bHeight="8vw"
                    bFontSize="4.47vw" @clickEvent="playpokerYaobuqi">要不起</funcButton>
            </div>
        </div> -->
    </div>
</template>
<script>
import { getMajiangRoundInfo } from '@/api/index';
import sendInstrunction from '@/api/sendCode';
import { CODE } from '@/assets/constant/index';
import funcButton from '@/components/funcButton.vue';
import { getFromScreen, getQuestioner, GuessColorQuestioner, setFromScreen } from '@/utils/multipleScreenResolve';
import { mapState } from 'vuex';
// import { setDifficulty } from '@/utils/multipleScreenResolve';
// import PokerCard from './components/pokerCard.vue';

export default {
  name: 'MiniGameCommon',
  // 雀神大赛的张数，如果主持人设置了一下道题目的答案张数，那么之后所有的题目都是该答案张数，加上data
  // 目的是为了给个显示，后续可以改一下
  /** @date 2024-11-08 */
  data: () => ({
    qsNum: 0,
    // 获取本次小游戏雀神大赛的题库
    questioner: getQuestioner(),
    showMahjongAnswer: true,
    /**
     * 猜文字游戏的10秒钟的倒计时
     */
    cwzys: {
      timer: false,
    },
    // 扑克残局游戏的拖拉状态
    // pokerDragging: false,
    // pokerDragDirection:0,
    // pokerDragStartIndex:0,
    // pokerLastDraggedIndex:-1,

  }),
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
      currentMiniGameAnswer: (state) => state.currentMiniGameAnswer,
      giveMarkVersion: (state) => state.giveMarkVersion,
    }),
  },
  components: {
    funcButton,
    // PokerCard,
  },
  watch: {
    currentMenuId: {
      handler(newVal) {
        if (newVal === '7-18') {
          // 当前打开的是雀神大赛
          this.generateMahjongSubjectThenSendToScreen();
        } else if (newVal === '7-13') {
          /** *********************************
           * 猜文字颜色多屏解决方案的若干要点:
           * 1.当遥控器回到猜文字页面时,无事发生,不发送任何指令
           * 2.此时,点击开始游戏发送小游戏开始游戏指令
           * 3.现有两种情况,不分先后,点击揭晓答案发送揭晓答案指令,点击下一题发送下一题指令0138
           *
           */
        }
      },
      immediate: true,
    },
  },
  created() {
    console.log('currentMenuId', this.currentMenuId);
  },
  mounted() {},
  methods: {
    // sendDifficulty(difficult) {
    //   setDifficulty(difficult);
    // },
    async prev() {
      await sendInstrunction({
        code: CODE.MINIGAME_PREV,
      });
    },
    async next() {
      await sendInstrunction({
        code: CODE.MINIGAME_NEXT,
      });
    },
    async getAnswer() {
      await sendInstrunction({
        code: CODE.MINIGAME_ANS,
      });
    },
    async getTip() {
      await sendInstrunction({
        code: CODE.MINIGAME_TIP,
      });
    },
    async getStart() {
      await sendInstrunction({
        code: CODE.MINIGAME_START,
      });
    },
    async toHome() {
      await sendInstrunction({
        code: CODE.HOME,
      });
    },
    async clearLate() {
      await sendInstrunction({
        code: CODE.VOTE_CLEAR,
      });
    },
    async saveLate() {
      await sendInstrunction({
        code: CODE.VOTE_SAVE,
      });
    },
    async endVote() {
      await sendInstrunction({
        code: CODE.VOTE_END,
      });
    },
    async startGame() {
      await sendInstrunction({
        code: CODE.HYHSTARTGAME,
      });
    },
    async endGame() {
      await sendInstrunction({
        code: CODE.HYHENDGAME,
      });
    },
    async reStartGame() {
      await sendInstrunction({
        code: CODE.HYHREPLAY,
      });
    },
    async savePrev() {
      await sendInstrunction({
        code: CODE.GIVEMARK_SAVEPREV,
      });
    },
    async clearPrev() {
      await sendInstrunction({
        code: CODE.GIVEMARK_CLEARPREV,
      });
    },
    async toNext() {
      await sendInstrunction({
        code: CODE.GIVEMARK_TONEXT,
      });
    },
    async toPrev() {
      await sendInstrunction({
        code: CODE.GIVEMARK_TOPREV,
      });
    },
    async startGiveMark() {
      await sendInstrunction({
        code: CODE.GIVEMARK_STARTGIVEMARK,
      });
    },
    async checkSumScore() {
      await sendInstrunction({
        code: CODE.GIVEMARK_CHECKSUMSCORE,
      });
    },
    /** 麻将的下一题 */
    async majiangNext() {
      // 获取当前轮次剩余时间，如果不为0，提示
      const res = await getMajiangRoundInfo();
      console.log('轮次信息', res);
      if (!res || !res.data) return;
      const { remainTime } = res.data;
      // 剩余时间未到，弹窗提示
      if (Number(remainTime || 0) !== 0) {
        this.$toast('来宾正在答题中，待答题时间结束再进行下一题');
        return;
      }
      this.next();
    },

    /** ******************************
     * @date 2024-11-07
     * 决定下一题的答案张数
     */
    async majiangAnswerNum(n) {
      /**
       * @date 2024-11-22
       */
      // 由遥控器生成题目的情况下，不需要再向大屏发送指令控制下一道题的张数，
      // 直接在本地修改即可
      this.qsNum = n;
      await sendInstrunction({
        code: CODE.MINIGAME_QSDS_ANSWER_NUM,
        param: n,
      });
    },
    majiangHupai() {
      /**
       * 如果由遥控器控制，大屏此时不可以主动翻牌
       * 那么一开始是答案未揭晓，答案揭晓……如此循环往复
       */
      if (this.showMahjongAnswer) {
        /**
         * 如果揭晓答案
         */
        sendInstrunction({
          code: CODE.MINIGAME_ANS,
        });

        this.showMahjongAnswer = false;
        return;
      }
      this.showMahjongAnswer = true;

      /**
       * 否则，就发送下一道题目的内容
       */

      const question = this.qsNum !== 0 ? this.questioner.next(this.qsNum) : this.questioner.next();
      if (question) {
        let answerStr = '';
        question.answerList
          .map((i) => i.value)
          .forEach((number) => {
            if (number < 10) {
              answerStr += `${number}万`;
            } else if (number < 20) {
              answerStr += `${number - 10}筒`;
            } else {
              answerStr += `${number - 20}条`;
            }
          });
        // 将遥控器自己生成的题目的答案回显到页面上去
        this.$store.commit('updateCurrentMiniGameAnswer', answerStr);
        sendInstrunction({
          code: CODE.MINIGAME_QSDS_SEND_QUESTION,
          param: question ? JSON.stringify(question) : '',
        });
      } else {
        sendInstrunction({
          code: CODE.MINIGAME_QSDS_SEND_QUESTION,
          param: '',
        });
      }
    },
    /**
     * 遥控器生成下一道麻将题目并发送给大屏
     */
    generateMahjongSubjectThenSendToScreen() {
      // 如果来自于大屏主动控制的跳转则不发送题目
      if (getFromScreen()) {
        setFromScreen(false);
        return;
      }

      const question = this.questioner.next();
      if (question) {
        let answerStr = '';
        question.answerList
          .map((i) => i.value)
          .forEach((number) => {
            if (number < 10) {
              answerStr += `${number}万`;
            } else if (number < 20) {
              answerStr += `${number - 10}筒`;
            } else {
              answerStr += `${number - 20}条`;
            }
          });
        // 将遥控器自己生成的题目的答案回显到页面上去
        this.$store.commit('updateCurrentMiniGameAnswer', answerStr);
        sendInstrunction({
          code: CODE.MINIGAME_QSDS_SEND_QUESTION,
          param: question ? JSON.stringify(question) : '',
        });
      } else {
        sendInstrunction({
          code: CODE.MINIGAME_QSDS_SEND_QUESTION,
          param: '',
        });
      }
    },

    /**
     * 猜文字颜色的下一题
     */
    async nextCwzys() {
      if (this.cwzys.timer) {
        // 如果有猜文字倒计时，则不发送指令
        return;
      }
      this.cwzys.timer = true;
      setTimeout(() => {
        this.cwzys.timer = false;
      }, 10e3);
      const question = GuessColorQuestioner.getQuestion();
      const answer = question.map(({ color }) => GuessColorQuestioner.qToA(color)).toString();
      // alert(answer);
      this.$store.commit('updateCurrentMiniGameAnswer', answer);
      await sendInstrunction({
        code: CODE.MINIGAME_CWZYS_SEND_QUESTION,
        param: JSON.stringify(question),
      });
    },

    /**
     * 猜文字颜色的开始游戏
     */
    async startCwzys() {
      await sendInstrunction({
        code: CODE.MINIGAME_START,
      });
      this.nextCwzys();
    },
    async playpokerStart() {
      this.$store.commit('setNewPokerData', {});
      await sendInstrunction({
        code: CODE.MINIGAME_PLAYPOKER_START,
      });
    },
    onPokerCardSwitch(e, index) {
      this.$store.commit('setSwitchedPokerCardsStatus', index);
    },
    async playpokerProduce() {
      if (!this.$store.state.playpokerData.playerCardsStatus.includes(true)) return;
      if (!this.$store.state.playpokerData.producable) return;
      this.$store.commit('setPokerProducable');
      await sendInstrunction({
        code: CODE.MINIGAME_PLAYPOKER_PRODUCE,
        param: this.$store.state.playpokerData.playerCardsStatus,
      });
    },
    async playpokerYaobuqi() {
      if (!this.$store.state.playpokerData.producable) return;
      this.$store.commit('setPokerProducable');
      await sendInstrunction({
        code: CODE.MINIGAME_PLAYPOKER_YAOBUQI,
      });
    },
    // onPokerCardDragStart(e, index) {
    //         // console.log('onDragStart',index)
    //         this.pokerDragging = true;
    //         this.pokerDragStartIndex = index;
    // },
    // onPokerCardDragEnd(e, index) {
    //         // console.log('onDragEnd', e,index);
    //         e.stopPropagation();
    //         if (!this.pokerDragging) {
    //             this.onPokerCardReset(e);
    //             return;
    //         }
    //         this.pokerDragging = false;
    //         this.pokerDragDirection = 0;
    //         this.pokerLastDraggedIndex = -1;
    //         if (this.pokerDragStartIndex === index) {
    //             return;
    //         }
    //         this.$store.commit('setDragEndPokerCardsStatus')
    //         // console.log('onDragEnd')
    // },
    // onPokerCardDragMove(e, index) {
    //   if (!this.pokerDragging)
    //   return
    //   if (index === this.pokerDragStartIndex) {
    //   if(this.pokerLastDraggedIndex === -1)
    //     this.pokerLastDraggedIndex = index;
    //         this.pokerDragDirection = 0;
    //         this.$store.commit('setDragMiddlePokerCardsStatus',index)
    // }else if (index < this.pokerDragStartIndex) {
    //         this.pokerDragDirection = 1;
    //         // console.log('onDragMove', 'left')
    //     } else if (index > this.pokerDragStartIndex) {
    //         this.pokerDragDirection = 2;
    //         // console.log('onDragMove', 'right')
    //     }

    //     if (this.pokerDragDirection === 0) {
    //        this.$store.commit('setDraggedPokerCardsStatus',index)
    //     } else if (this.pokerDragDirection === 1) {
    //         if (this.pokerLastDraggedIndex < index) {
    //             this.$store.commit('setPokerCardsMutipleDraggingStatus',{start:index,end:this.pokerDragStartIndex,status:true})
    //             this.$store.commit('setPokerCardsMutipleDraggingStatus',{start:this.pokerLastDraggedIndex,end:index,status:false})
    //         } else if (this.pokerLastDraggedIndex > index ) {
    //             this.$store.commit('setPokerCardsMutipleDraggingStatus',{start:index,end:this.pokerDragStartIndex,status:true})
    //         }
    //     } else if (this.pokerDragDirection === 2) {
    //         if (this.pokerLastDraggedIndex > index) {
    //             this.$store.commit('setPokerCardsMutipleDraggingStatus',{start:this.pokerDragStartIndex,end:index,status:true})
    //             this.$store.commit('setPokerCardsMutipleDraggingStatus',{start:index,end:this.pokerLastDraggedIndex,status:false})
    //         } else if (this.pokerLastDraggedIndex < index) {
    //           this.setMultipleDraggingStatus(this.dragStartIndex, index, true)
    //         }
    //     }
    //     this.pokerLastDraggedIndex = index;
    //     // console.log('onDragMove',index)
    // },
    onPokerCardReset() {
      // console.log("onCardReset")
      // if (this.pokerDragging)
      // return;
      // this.$store.commit('setPokerCardsStatusReset')
      // this.pokerDragging = false;
      // this.dragStartIndex = 0;
      // this.pokerLastDraggedIndex = -1;
      // this.pokerDragDirection = 0;
      this.$store.commit('setPokerCardsStatusReset');
    },
  },
};
</script>
<style lang="less" scoped>
.miniGameMod {
    width: 100%;
    height: 100%;
    position: relative;

    .funcMenus {
        position: relative;
        width: 100%;
        flex-direction: column;
    }

    .answers {
        position: relative;
        font-weight: 600;
        font-size: 4.8vw;
        text-align: center;
        margin-top: 40px;

        label {
            font-size: 3.8vw;
            color: #000;
            font-weight: 400;
            margin-right: 12px;
        }
    }
}

.poker-game {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    // align-items: center;
    height: 100%;
    overflow: hidden;

    .poker-cards {
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        margin-top: 5vw;
        margin-right: -8vw;
        height: 30vw;
    }

    .poker-waiting {
        font-size: 30px;
        color: red;
        text-align: center;
        // margin-left: 40vw;
    }

    .poker-btns {
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        align-items: center;
        margin-top: 5vw;
    }
}
</style>
</file>

<file path="src/views/openTreasure/OpenTreasureBox.vue">
<!--
  * @description: 「开宝箱」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-09
-->
<template>
  <div class="kbxMod">
    <div class="step" v-if="kbxStep === 0">
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="chooseType('kbx_888')" bWidth="50vw">
          开启钻石宝箱(888元)
        </funcButton>
        <funcButton @clickEvent="chooseType('kbx_588')" bWidth="50vw">
          开启铂金宝箱(588元)
        </funcButton>
        <funcButton @clickEvent="chooseType('kbx_388')" bWidth="50vw">
          开启金宝箱(388元)
        </funcButton>
        <funcButton @clickEvent="chooseType('kbx_288')" bWidth="50vw">
          开启银宝箱(288元)
        </funcButton>
        <funcButton @clickEvent="toHome">回到首页</funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleAudio"
        >
          音乐 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleDanmu"
        >
          弹幕 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleMsgwall"
        >
          祝福榜 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleQrcode"
        >
          二维码 开/关
        </funcButton>
      </div>
    </div>
    <div class="step" v-if="kbxStep === 1">
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="startGame">开始游戏</funcButton>
        <funcButton @clickEvent="toHome">回到首页</funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleAudio"
        >
          音乐 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleDanmu"
        >
          弹幕 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleMsgwall"
        >
          祝福榜 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleQrcode"
        >
          二维码 开/关
        </funcButton>
      </div>
    </div>
    <div class="step" v-if="kbxStep === 2">
      <div class="boxList publicVCenter">
        <div
          class="boxItem publicHvCenter"
          :class="{
            boxOutline: activeBox === item,
            buyed: openedBox.indexOf(index) > -1,
          }"
          @click="selectBox(item, index)"
          v-for="(item, index) in boxList"
          :key="item"
        >
          <div class="num">{{ item }}</div>
          <!-- <img src="@/assets/image/box.png" /> -->
        </div>
      </div>
      <div class="btnGroup">
        <van-button round block type="info" @click="openBox">
          确认开宝箱
        </van-button>
        <van-button round block type="default" @click="openBoxAll">
          一键开宝箱
        </van-button>
      </div>
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="endGame">结束游戏</funcButton>
      </div>
    </div>
    <div class="step" v-if="kbxStep === 3">
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="reStartGame">再玩一次</funcButton>
        <funcButton @clickEvent="toHome">回到首页</funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleAudio"
        >
          音乐 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleDanmu"
        >
          弹幕 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleMsgwall"
        >
          祝福榜 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleQrcode"
        >
          二维码 开/关
        </funcButton>
      </div>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import funcButton from '@/components/funcButton.vue';
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'OpenTreasureBox',
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
      kbxStep: (state) => state.kbxStep,
      openedBox: (state) => state.openedBox, // 已经购买的宝箱索引列表
    }),
  },
  data() {
    return {
      boxList: [],
      activeBox: -1, // 当前被选中宝箱的编号
      activeIndex: -1, // 当前被选中宝箱的索引
    };
  },
  components: {
    funcButton,
  },
  created() {
    this.initBoxList();
  },
  beforeDestroy() {
    this.$store.commit('clearOpenedBox');
  },
  mounted() {},
  methods: {
    initBoxList() {
      for (let i = 0; i < 18; i += 1) {
        if (i < 3) {
          this.boxList.push(`0${i + 1}`);
        } else if (i >= 3 && i < 8) {
          this.boxList.push(`0${i + 2}`);
        } else if (i >= 8 && i < 12) {
          this.boxList.push(`${i + 2}`);
        } else if (i >= 12 && i < 18) {
          this.boxList.push(`${i + 3}`);
        }
      }
    },
    selectBox(num, index) {
      this.activeBox = num;
      this.activeIndex = index;
    },
    async openBox() {
      if (this.activeBox === -1) {
        this.$toast('请选择一个宝箱!');
        return;
      }
      if (this.openedBox.indexOf(this.activeIndex) > -1) {
        this.$toast('宝箱已经开启!');
        return;
      }
      console.log(this.activeIndex);
      this.activeIndex = this.activeIndex === 0 ? '0' : this.activeIndex;
      await sendInstrunction({
        code: CODE.KBXCHOOSEBOX,
        param: this.activeIndex,
      });
    },
    async openBoxAll() {
      await sendInstrunction({
        code: CODE.KBXBREAKALL,
      });
    },
    async chooseType(type) {
      await sendInstrunction({
        code: CODE.KBXCHOOSETYPE,
        param: type,
      });
    },
    async startGame() {
      await sendInstrunction({
        code: CODE.KBXSTARTGAME,
      });
    },
    async endGame() {
      await sendInstrunction({
        code: CODE.KBXENDGAME,
      });
    },
    async reStartGame() {
      await sendInstrunction({
        code: CODE.KBXREPLAY,
      });
    },
    async toHome() {
      await sendInstrunction({
        code: CODE.HOME,
      });
    },
    async toggleQrcode() {
      await sendInstrunction({
        code: CODE.QRCODE,
      });
    },
    async toggleAudio() {
      await sendInstrunction({
        code: CODE.AUDIO,
      });
    },
    async toggleDanmu() {
      await sendInstrunction({
        code: CODE.DANMU,
      });
    },
    async toggleMsgwall() {
      await sendInstrunction({
        code: CODE.MSGWALL,
      });
    },
  },
};
</script>
<style lang="less" scoped>
.kbxMod {
  width: 100%;
  height: 100%;
  position: relative;
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }
  .boxList {
    width: 100%;
    position: relative;
    flex-wrap: wrap;
    padding: 0 5vw;
    z-index: 1;
    .boxItem {
      display: flex;
      width: 18vw;
      height: 18vw;
      position: relative;
      flex-direction: column;
      .num {
        color: #ffffff;
        font-size: 32px;
        position: absolute;
        left: 6vw;
        bottom: 0;
      }
      img {
        width: 82%;
      }
      &.boxOutline {
        box-shadow: 0px 0px 10px 0px rgba(0, 93, 106, 0.41);
        border-radius: 4px;
        border: 1px solid #ffffff;
      }
      &.buyed {
        filter: gray(1);
      }
    }
  }
  .btnGroup::v-deep {
    margin: 6vw auto;
    width: 32vw;
    .van-button {
      height: 8vw;
      margin-bottom: 4vw;
      &.van-button--normal {
        font-size: 3.2vw;
      }
    }
  }
}
</style>
</file>

<file path="src/views/openTreasure/RedPacketWall.vue">
<!--
  * @description: 「红包墙」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-09
-->
<template>
  <div class="hbwallMod">
    <div
      class="step"
      v-if="hbwallStep === 0"
    >
      <div class="funcMenus publicVCenter">
        <funcButton
          @clickEvent="chooseType('hbq_588')"
          bWidth="50vw"
        >
          开启五福临门(588元)
        </funcButton>
        <funcButton
          @clickEvent="chooseType('hbq_888')"
          bWidth="50vw"
        >
          开启才高八斗(888元)
        </funcButton>
        <funcButton
          @clickEvent="chooseType('hbq_1288')"
          bWidth="50vw"
        >
          开启恭喜发财(1288元)
        </funcButton>
        <funcButton
          @clickEvent="chooseType('hbq_1588')"
          bWidth="50vw"
        >
          开启大吉大利(1588元)
        </funcButton>
        <funcButton
          @clickEvent="chooseType('hbq_1888')"
          bWidth="50vw"
        >
          开启一诺千金(1888元)
        </funcButton>
        <funcButton @clickEvent="toHome">回到首页</funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleAudio"
        >
          音乐 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleDanmu"
        >
          弹幕 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleMsgwall"
        >
          祝福榜 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleQrcode"
        >
          二维码 开/关
        </funcButton>
      </div>
    </div>
    <div
      class="step"
      v-if="hbwallStep === 1"
    >
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="startGame">开始游戏</funcButton>
        <funcButton @clickEvent="toHome">回到首页</funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleAudio"
        >
          音乐 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleDanmu"
        >
          弹幕 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleMsgwall"
        >
          祝福榜 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleQrcode"
        >
          二维码 开/关
        </funcButton>
      </div>
    </div>
    <div
      class="step"
      v-if="hbwallStep === 2"
    >
      <div class="hbList publicVCenter">
        <div
          class="hbItem publicHvCenter"
          :class="{ boxOutline: activeHb === item, buyed: openedHb.indexOf(index) > -1 }"
          @click="selectHb(item, index)"
          v-for="(item, index) in hbList"
          :key="item"
        >
          <div class="num">{{ item }}</div>
          <!-- <img src="@/assets/image/hbF.png" /> -->
        </div>
      </div>
      <div class="btnGroup">
        <van-button
          round
          block
          type="info"
          @click="openBox"
        >
          确认开红包
        </van-button>
        <van-button
          round
          block
          type="default"
          @click="openBoxAll"
        >
          一键开红包
        </van-button>
      </div>
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="endGame">结束游戏</funcButton>
      </div>
    </div>
    <div
      class="step"
      v-if="hbwallStep === 3"
    >
      <div class="funcMenus publicVCenter">
        <funcButton @clickEvent="reStartGame">再玩一次</funcButton>
        <funcButton @clickEvent="toHome">回到首页</funcButton>
      </div>
      <div class="commonMenus publicHCenter">
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleAudio"
        >
          音乐 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleDanmu"
        >
          弹幕 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleMsgwall"
        >
          祝福榜 开/关
        </funcButton>
        <funcButton
          bWidth="24vw"
          bHeight="10.67vw"
          bFontSize="3.47vw"
          @clickEvent="toggleQrcode"
        >
          二维码 开/关
        </funcButton>
      </div>
    </div>
  </div>
</template>
<script>
import sendInstrunction from '@/api/sendCode';
import { CODE } from '@/assets/constant/index';
import funcButton from '@/components/funcButton.vue';
import { mapState } from 'vuex';

export default {
  name: 'RedPacketWall',
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
      hbwallStep: (state) => state.hbwallStep,
      openedHb: (state) => state.openedHb, // 已经购买的红包索引列表
    }),
  },
  data() {
    return {
      hbList: [],
      activeHb: -1, // 当前被选中红包的编号
      activeIndex: -1, // 当前被选中红包的索引
    };
  },
  components: {
    funcButton,
  },
  created() {
    this.initHbList();
  },
  beforeDestroy() {
    this.$store.commit('clearOpenedHb');
  },
  mounted() {},
  methods: {
    initHbList() {
      for (let i = 0; i < 28; i += 1) {
        if (i < 3) {
          this.hbList.push(`${i + 1}`);
        } else if (i >= 3 && i < 12) {
          this.hbList.push(`${i + 2}`);
        } else if (i >= 12 && i < 21) {
          this.hbList.push(`${i + 3}`);
        } else {
          this.hbList.push(`${i + 4}`);
        }
      }
    },
    selectHb(num, index) {
      this.activeHb = num;
      this.activeIndex = index;
    },
    async openBox() {
      if (this.activeHb === -1) {
        this.$toast('请选择一个红包!');
        return;
      }
      if (this.openedHb.indexOf(this.activeIndex) > -1) {
        this.$toast('红包已经开启!');
        return;
      }
      this.activeIndex = this.activeIndex === 0 ? '0' : this.activeIndex;
      await sendInstrunction({
        code: CODE.HBWALLCHOOSEHB,
        param: this.activeIndex,
      });
    },
    async openBoxAll() {
      await sendInstrunction({
        code: CODE.HBWALLBREAKALL,
      });
    },
    async chooseType(type) {
      await sendInstrunction({
        code: CODE.HBWALLCHOOSETYPE,
        param: type,
      });
    },
    async startGame() {
      await sendInstrunction({
        code: CODE.HBWALLSTARTGAME,
      });
    },
    async endGame() {
      await sendInstrunction({
        code: CODE.HBWALLENDGAME,
      });
    },
    async reStartGame() {
      await sendInstrunction({
        code: CODE.HBWALLREPLAY,
      });
    },
    async toHome() {
      await sendInstrunction({
        code: CODE.HOME,
      });
    },
    async toggleQrcode() {
      await sendInstrunction({
        code: CODE.QRCODE,
      });
    },
    async toggleAudio() {
      await sendInstrunction({
        code: CODE.AUDIO,
      });
    },
    async toggleDanmu() {
      await sendInstrunction({
        code: CODE.DANMU,
      });
    },
    async toggleMsgwall() {
      await sendInstrunction({
        code: CODE.MSGWALL,
      });
    },
  },
};
</script>
<style lang="less" scoped>
.hbwallMod {
  width: 100%;
  height: 100%;
  position: relative;
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }
  .hbList {
    width: 100%;
    position: relative;
    flex-wrap: wrap;
    padding: 0 8vw;
    z-index: 1;
    .hbItem {
      display: flex;
      width: 12vw;
      height: 17vw;
      position: relative;
      flex-direction: column;
      .num {
        color: #ffffff;
        font-size: 32px;
        position: absolute;
        bottom: 6vw;
      }
      img {
        width: 82%;
      }
      &.boxOutline {
        box-shadow: 0px 0px 10px 0px rgba(0, 93, 106, 0.41);
        border-radius: 4px;
        border: 1px solid #ffffff;
      }
      &.buyed {
         filter: gray(1);
      }
    }
  }
  .btnGroup::v-deep {
    margin: 6vw auto;
    width: 32vw;
    .van-button {
      height: 8vw;
      margin-bottom: 4vw;
      &.van-button--normal {
        font-size: 3.2vw;
      }
    }
  }
}
</style>
</file>

<file path="src/views/redPacketRain/PeopleRedPacketRain.vue">
<!--
  * @description: 「全民红包雨」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="hbyMod">
    <div
      class="moneySet"
      v-show="hbyStep === 0"
    >
      <van-form @submit="onSubmit">
        <van-field
          v-model="hbVal"
          name="hbVal"
          label="红包金额："
          placeholder="红包金额"
          :rules="[{ required: true, message: '请输入红包金额' }]"
        />
        <van-field
          v-model="hbNum"
          name="hbNum"
          label="红包个数："
          placeholder="红包个数"
          :rules="[{ required: true, message: '请输入红包个数' }]"
          v-if="currentMenuId !== '2-3'"
        />
        <div style="margin: 6vw">
          <van-button
            round
            block
            type="info"
            native-type="submit"
          >
            确认
          </van-button>
          <van-button
            round
            block
            type="default"
            @click="cancelInput"
          >
            取消
          </van-button>
        </div>
      </van-form>
    </div>
    <div
      class="funcMenus publicVCenter"
      v-show="hbyStep === 1"
    >
      <button @click="sendInstrunction({ code: CODE.HBYSTARTGAME })">开始游戏</button>
      <button @click="sendInstrunction({ code: CODE.HBYENDGAME })">结束游戏</button>
      <button @click="sendInstrunction({ code: CODE.HBYREPLAY })">再玩一次</button>
      <button @click="sendInstrunction({ code: CODE.HOME })">回到首页</button>
    </div>
    <div
      class="commonMenus publicHCenter"
      v-show="hbyStep === 1"
    >
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'PeopleRedPacketRain',
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
      hbyStep: (state) => state.hbyStep,
    }),
  },
  data() {
    return {
      CODE,
      hbVal: '',
      hbNum: '',
    };
  },
  methods: {
    sendInstrunction,
    onSubmit(values) {
      console.log(values);
      sendInstrunction({
        code: CODE.HBYSET,
        param: JSON.stringify(values),
      });
    },
    async cancelInput() {
      await sendInstrunction({
        code: CODE.HOME,
      });
      this.hbVal = '';
      this.hbNum = '';
    },
  },
};
</script>
<style lang="less" scoped>
.hbyMod {
  width: 100%;
  height: 100%;
  position: relative;
  .moneySet::v-deep {
    position: relative;
    width: 90%;
    margin: 0 auto;
    .van-form {
      .van-cell {
        font-size: 3.8vw;
        line-height: 10vw;
        .van-field__error-message {
          font-size: 3vw;
        }
      }
      .van-button {
        height: 10vw;
        margin-bottom: 4vw;
        &.van-button--normal {
          font-size: 3.8vw;
        }
      }
    }
  }
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;

    button {
      width: 32vw;
      height: 10.67vw;
      font-size: 4.27vw;

      margin-bottom: 30px;
      border-radius: 28px;
      color: #fff;
      border: 2px solid #fff;
      background-color: rgba(0, 0, 0, 0);
      transition: all 0.2s linear;

      &:active {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;

    button {
      width: 24vw;
      height: 10.67vw;
      font-size: 3.47vw;

      margin-bottom: 30px;
      border-radius: 28px;
      color: #fff;
      border: 2px solid #fff;
      background-color: rgba(0, 0, 0, 0);
      transition: all 0.2s linear;

      &:active {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }
}
</style>
</file>

<file path="src/views/redPacketRain/ShakeRedPacket.vue">
<!--
  * @description: 「摇红包」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="hbyMod">
    <div
      class="moneySet"
      v-show="hbyStep === 0"
    >
      <van-form @submit="onSubmit">
        <van-field
          v-model="hbVal"
          name="hbVal"
          label="红包金额："
          placeholder="红包金额"
          :rules="[{ required: true, message: '请输入红包金额' }]"
        />
        <van-field
          v-model="hbNum"
          name="hbNum"
          label="红包个数："
          placeholder="红包个数"
          :rules="[{ required: true, message: '请输入红包个数' }]"
          v-if="currentMenuId !== '2-3'"
        />
        <div style="margin: 6vw">
          <van-button
            round
            block
            type="info"
            native-type="submit"
          >
            确认
          </van-button>
          <van-button
            round
            block
            type="default"
            @click="cancelInput"
          >
            取消
          </van-button>
        </div>
      </van-form>
    </div>
    <div
      class="funcMenus publicVCenter"
      v-show="hbyStep === 1"
    >
      <button @click="sendInstrunction({ code: CODE.HBYSTARTGAME })">开始游戏</button>
      <button @click="sendInstrunction({ code: CODE.HBYENDGAME })">结束游戏</button>
      <button @click="sendInstrunction({ code: CODE.HBYREPLAY })">再玩一次</button>
      <button @click="sendInstrunction({ code: CODE.HOME })">回到首页</button>
    </div>
    <div
      class="commonMenus publicHCenter"
      v-show="hbyStep === 1"
    >
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'ShakeRedPacket',
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
      hbyStep: (state) => state.hbyStep,
    }),
  },
  data() {
    return {
      hbVal: '',
      hbNum: '',
      CODE,
    };
  },
  methods: {
    sendInstrunction,
    async onSubmit(values) {
      console.log(values);
      await sendInstrunction({
        code: CODE.HBYSET,
        param: JSON.stringify(values),
      });
    },
    async cancelInput() {
      await sendInstrunction({
        code: CODE.HOME,
      });
      this.hbVal = '';
      this.hbNum = '';
    },
  },
};
</script>
<style lang="less" scoped>
.hbyMod {
  width: 100%;
  height: 100%;
  position: relative;
  .moneySet::v-deep {
    position: relative;
    width: 90%;
    margin: 0 auto;
    .van-form {
      .van-cell {
        font-size: 3.8vw;
        line-height: 10vw;
        .van-field__error-message {
          font-size: 3vw;
        }
      }
      .van-button {
        height: 10vw;
        margin-bottom: 4vw;
        &.van-button--normal {
          font-size: 3.8vw;
        }
      }
    }
  }
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;

    button {
      width: 32vw;
      height: 10.67vw;
      font-size: 4.27vw;

      margin-bottom: 30px;
      border-radius: 28px;
      color: #fff;
      border: 2px solid #fff;
      background-color: rgba(0, 0, 0, 0);
      transition: all 0.2s linear;

      &:active {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;

    button {
      width: 24vw;
      height: 10.67vw;
      font-size: 3.47vw;

      margin-bottom: 30px;
      border-radius: 28px;
      color: #fff;
      border: 2px solid #fff;
      background-color: rgba(0, 0, 0, 0);
      transition: all 0.2s linear;

      &:active {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }
}
</style>
</file>

<file path="src/views/redPacketRain/ShoutRedPacket.vue">
<template>
  <div class="hbyMod">
    <div
      class="moneySet"
      v-show="hbyStep === 0"
    >
      <van-form @submit="onSubmit">
        <van-field
          v-model="hbVal"
          name="hbVal"
          label="红包金额："
          placeholder="红包金额"
          :rules="[{ required: true, message: '请输入红包金额' }]"
        />
        <van-field
          v-model="hbNum"
          name="hbNum"
          label="包个数："
          placeholder="红包个数"
          :rules="[{ required: true, message: '请输入红包个数' }]"
        />
        <div style="margin: 6vw">
          <van-button
            round
            block
            type="info"
            native-type="submit"
          >
            确认
          </van-button>
          <van-button
            round
            block
            type="default"
            @click="cancelInput"
          >
            取消
          </van-button>
        </div>
      </van-form>
    </div>
    <div
      class="funcMenus publicVCenter"
      v-show="hbyStep === 1"
    >
      <button @click="sendInstrunction({ code: CODE.HBYSTARTGAME })">开始游戏</button>
      <button @click="sendInstrunction({ code: CODE.HBYENDGAME })">结束游戏</button>
      <button @click="sendInstrunction({ code: CODE.HBYREPLAY })">再玩一次</button>
      <button @click="sendInstrunction({ code: CODE.SHOUTHB_EXPOSE_NEXT })" v-if="currentMenuId === '2-4'">揭晓/下一个</button>
      <button @click="sendInstrunction({ code: CODE.HOME })">回到首页</button>
    </div>
    <div
      class="commonMenus publicHCenter"
      v-show="hbyStep === 1"
    >
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'ShoutRedPacket',
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
      hbyStep: (state) => state.hbyStep,
    }),
  },
  data() {
    return {
      CODE,
      hbVal: '',
      hbNum: '',
    };
  },
  methods: {
    sendInstrunction,
    onSubmit(values) {
      console.log(values);
      sendInstrunction({
        code: CODE.HBYSET,
        param: JSON.stringify(values),
      });
    },
    async cancelInput() {
      await sendInstrunction({
        code: CODE.HOME,
      });
      this.hbVal = '';
      this.hbNum = '';
    },
  },
};
</script>
<style lang="less" scoped>
.hbyMod {
  width: 100%;
  height: 100%;
  position: relative;
  .moneySet::v-deep {
    position: relative;
    width: 90%;
    margin: 0 auto;
    .van-form {
      .van-cell {
        font-size: 3.8vw;
        line-height: 10vw;
        .van-field__error-message {
          font-size: 3vw;
        }
      }
      .van-button {
        height: 10vw;
        margin-bottom: 4vw;
        &.van-button--normal {
          font-size: 3.8vw;
        }
      }
    }
  }
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;

    button {
      width: 32vw;
      height: 10.67vw;
      font-size: 4.27vw;

      margin-bottom: 30px;
      border-radius: 28px;
      color: #fff;
      border: 2px solid #fff;
      background-color: rgba(0, 0, 0, 0);
      transition: all 0.2s linear;

      &:active {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;

    button {
      width: 24vw;
      height: 10.67vw;
      font-size: 3.47vw;

      margin-bottom: 30px;
      border-radius: 28px;
      color: #fff;
      border: 2px solid #fff;
      background-color: rgba(0, 0, 0, 0);
      transition: all 0.2s linear;

      &:active {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }
}
</style>
</file>

<file path="src/views/redPacketRain/TapRedPacket.vue">
<!--
  * @description: 「点红包」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="hbyMod">
    <div
      class="moneySet"
      v-show="hbyStep === 0"
    >
      <van-form @submit="onSubmit">
        <van-field
          v-model="hbVal"
          name="hbVal"
          label="红包金额："
          placeholder="红包金额"
          :rules="[{ required: true, message: '请输入红包金额' }]"
        />
        <van-field
          v-model="hbNum"
          name="hbNum"
          label="红包个数："
          placeholder="红包个数"
          :rules="[{ required: true, message: '请输入红包个数' }]"
          v-if="currentMenuId !== '2-3'"
        />
        <div class="form-btns">
          <van-button
            round
            block
            type="info"
            native-type="submit"
          >
            确认
          </van-button>
          <van-button
            round
            block
            type="default"
            @click="cancelInput"
          >
            取消
          </van-button>
        </div>
      </van-form>
    </div>
    <div
      class="funcMenus publicVCenter"
      v-show="hbyStep === 1"
    >
      <button @click="sendInstrunction({ code: CODE.HBYSTARTGAME })">开始游戏</button>
      <button @click="sendInstrunction({ code: CODE.HBYENDGAME })">结束游戏</button>
      <button @click="sendInstrunction({ code: CODE.HBYREPLAY })">再玩一次</button>
      <button @click="sendInstrunction({ code: CODE.HOME })">回到首页</button>
    </div>
    <div
      class="commonMenus publicHCenter"
      v-show="hbyStep === 1"
    >
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'TapRedPacket',
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
      hbyStep: (state) => state.hbyStep,
    }),
  },
  data() {
    return {
      hbVal: '',
      hbNum: '',
      CODE,
    };
  },
  methods: {
    sendInstrunction,
    onSubmit(values) {
      console.log(values);
      sendInstrunction({
        code: CODE.HBYSET,
        param: JSON.stringify(values),
      });
    },
    async cancelInput() {
      await sendInstrunction({
        code: CODE.HOME,
      });
      this.hbVal = '';
      this.hbNum = '';
    },
  },
};
</script>
<style lang="less" scoped>
.hbyMod {
  width: 100%;
  height: 100%;
  position: relative;
  .moneySet::v-deep {
    position: relative;
    width: 90%;
    margin: 0 auto;
    .van-form {
      .van-cell {
        font-size: 3.8vw;
        line-height: 10vw;
        .van-field__error-message {
          font-size: 3vw;
        }
      }

      .form-btns {
        margin-top: 30px;
        display: flex;
        flex-direction: column;
        align-items: center;
        row-gap: 20px;
        .van-button {
          width: 80%;
          height: 10vw;
          font-size: 3.8vw;
          &.van-button--normal {
            font-size: 3.8vw;
          }
        }
      }
    }
  }
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
    button {
      width: 32vw;
      height: 10.67vw;
      font-size: 4.27vw;

      margin-bottom: 30px;
      border-radius: 28px;
      color: #fff;
      border: 2px solid #fff;
      background-color: rgba(0, 0, 0, 0);
      transition: all 0.2s linear;

      &:active {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
    button {
      width: 24vw;
      height: 10.67vw;
      font-size: 3.47vw;

      margin-bottom: 30px;
      border-radius: 28px;
      color: #fff;
      border: 2px solid #fff;
      background-color: rgba(0, 0, 0, 0);
      transition: all 0.2s linear;

      &:active {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }
}
</style>
</file>

<file path="src/views/shake/ShakeCommon.vue">
<!--
  * @description: 「摇一摇」游戏通用控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-09
  TODO 待重构组件内部代码（参考红包雨）
-->
<template>
  <div class="shakeMod">
    <div class="funcMenus publicVCenter">
      <funcButton @clickEvent="startGame">开始游戏</funcButton>
      <funcButton @clickEvent="endGame">结束游戏</funcButton>
      <funcButton @clickEvent="reStartGame">再玩一次</funcButton>
      <funcButton @clickEvent="toHome">回到首页</funcButton>
    </div>
    <div class="commonMenus publicHCenter">
      <funcButton
        bWidth="24vw"
        bHeight="10.67vw"
        bFontSize="3.47vw"
        @clickEvent="toggleAudio"
      >
        音乐 开/关
      </funcButton>
      <funcButton
        bWidth="24vw"
        bHeight="10.67vw"
        bFontSize="3.47vw"
        @clickEvent="toggleDanmu"
      >
        弹幕 开/关
      </funcButton>
      <funcButton
        bWidth="24vw"
        bHeight="10.67vw"
        bFontSize="3.47vw"
        @clickEvent="toggleMsgwall"
      >
        祝福榜 开/关
      </funcButton>
      <funcButton
        bWidth="24vw"
        bHeight="10.67vw"
        bFontSize="3.47vw"
        @clickEvent="toggleQrcode"
      >
        二维码 开/关
      </funcButton>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import funcButton from '@/components/funcButton.vue';
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'ShakeCommon',
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
    }),
  },
  components: {
    funcButton,
  },
  methods: {
    async startGame() {
      await sendInstrunction({
        code: CODE.SHAKESTARTGAME,
      });
    },
    async endGame() {
      await sendInstrunction({
        code: CODE.SHAKEENDGAME,
      });
    },
    async reStartGame() {
      await sendInstrunction({
        code: CODE.SHAKEREPLAY,
      });
    },
    async toHome() {
      await sendInstrunction({
        code: CODE.HOME,
      });
    },
    async toggleQrcode() {
      await sendInstrunction({
        code: CODE.QRCODE,
      });
    },
    async toggleAudio() {
      await sendInstrunction({
        code: CODE.AUDIO,
      });
    },
    async toggleDanmu() {
      await sendInstrunction({
        code: CODE.DANMU,
      });
    },
    async toggleMsgwall() {
      await sendInstrunction({
        code: CODE.MSGWALL,
      });
    },
  },
};
</script>
<style lang="less" scoped>
.shakeMod {
  width: 100%;
  height: 100%;
  position: relative;
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }
}
</style>
</file>

<file path="src/views/signIn/3DSignIn.vue">
<!--
  * @description: 「3D签到」游戏控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-05
-->
<template>
  <div class="container">
    <div class="funcMenus publicVCenter">
      <button
        @click="sendInstrunction({ code: CODE.HOME })"
        class="to-home"
      >
        回到首页
      </button>
    </div>
    <div class="commonMenus publicHCenter">
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>
<script>
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'ThreeDimensionalSignIn',
  data() {
    return {
      CODE,
    };
  },
  methods: {
    sendInstrunction,
  },
};
</script>
<style lang="less" scoped>
.container {
  width: 100%;
  height: 100%;
  position: relative;

  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }

  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }

  button {
    width: 24vw;
    height: 10.67vw;
    font-size: 3.47vw;

    &.to-home {
      width: 32vw;
      font-size: 4.27vw;
    }

    margin-bottom: 30px;
    border-radius: 28px;
    color: #fff;
    border: 2px solid #fff;
    background-color: rgba(0, 0, 0, 0);
    transition: all 0.2s linear;

    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }
}
</style>
</file>

<file path="src/views/signIn/HandwrittenSignIn.vue">
<!--
  * @description: 「手写签到」控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="container">
    <div class="funcMenus publicVCenter">
      <button
        @click="sendInstrunction({ code: CODE.HOME })"
        class="to-home"
      >
        回到首页
      </button>
    </div>
    <div class="commonMenus publicHCenter">
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>
<script>
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'HandwrittenSignIn',
  data() {
    return {
      CODE,
    };
  },
  methods: {
    sendInstrunction,
  },
};
</script>
<style lang="less" scoped>
.container {
  width: 100%;
  height: 100%;
  position: relative;

  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }

  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }

  button {
    width: 24vw;
    height: 10.67vw;
    font-size: 3.47vw;

    &.to-home {
      width: 32vw;
      font-size: 4.27vw;
    }

    margin-bottom: 30px;
    border-radius: 28px;
    color: #fff;
    border: 2px solid #fff;
    background-color: rgba(0, 0, 0, 0);
    transition: all 0.2s linear;

    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }
}
</style>
</file>

<file path="src/views/signIn/SignBook.vue">
<!--
  * @description: 「签到簿」控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="container">
    <div class="funcMenus publicVCenter">
      <button
        @click="sendInstrunction({ code: CODE.HOME })"
        class="to-home"
      >
        回到首页
      </button>
    </div>
    <div class="commonMenus publicHCenter">
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>
<script>
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'SignBook',
  data() {
    return {
      CODE,
    };
  },
  methods: {
    sendInstrunction,
  },
};
</script>
<style lang="less" scoped>
.container {
  width: 100%;
  height: 100%;
  position: relative;

  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }

  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }

  button {
    width: 24vw;
    height: 10.67vw;
    font-size: 3.47vw;

    &.to-home {
      width: 32vw;
      font-size: 4.27vw;
    }

    margin-bottom: 30px;
    border-radius: 28px;
    color: #fff;
    border: 2px solid #fff;
    background-color: rgba(0, 0, 0, 0);
    transition: all 0.2s linear;

    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }
}
</style>
</file>

<file path="src/views/signIn/SignWeddingBook.vue">
<!--
  * 「签婚书」模块
  * @author: Ruan Jiazhen
  * @date: 2024-04-19  15:45:01
-->
<template>
  <div class="container">
    <div class="funcMenus publicVCenter">
      <button
        class="main"
        @click="sendInstrunction({ code: CONTROL_CODE.GAME_CONTROL, param: { type: SING_WEDDING_BOOK_CONTROL_TYPE.SHOW_BRIDEGROOM_NAME } })"
      >
        新郎签名
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CONTROL_CODE.GAME_CONTROL, param: { type: SING_WEDDING_BOOK_CONTROL_TYPE.SHOW_BRIDE_NAME } })"
      >
        新娘签名
      </button>
      <button
        class="main"
        @click="onClickClearSign"
      >
        清空签名
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.HOME })"
      >
        回到首页
      </button>
    </div>
    <div class="commonMenus publicHCenter">
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>

<script>
import sendInstrunction from '@/api/sendCode';
import { CODE, CONTROL_CODE } from '@/assets/constant/index';

export default {
  name: 'SignWeddingBook',
  data() {
    return {
      CODE,
      CONTROL_CODE,
      SING_WEDDING_BOOK_CONTROL_TYPE: {
        // 显示新郎姓名
        SHOW_BRIDEGROOM_NAME: 'show_bridegroom_name',
        // 显示新娘姓名
        SHOW_BRIDE_NAME: 'show_bride_name',
        // 清空签名
        CLEAR_SIGN: 'clear_sign',
      },
    };
  },
  methods: {
    sendInstrunction,
    // 模态框确认
    async onClickClearSign() {
      try {
        await this.$dialog.confirm({
          title: '确认清空签名？',
        });
        sendInstrunction({
          code: CONTROL_CODE.GAME_CONTROL,
          param: {
            type: this.SING_WEDDING_BOOK_CONTROL_TYPE.CLEAR_SIGN,
          },
        });
      } catch (e) {
        if (e === 'cancel') return;
        console.error(e);
      }
    },
  },
};
</script>

<style scoped lang="less">
.container {
  width: 100%;
  height: 100%;
  position: relative;

  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }

  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }

  button {
    width: 24vw;
    height: 10.67vw;
    font-size: 3.47vw;

    &.to-home {
      width: 32vw;
      font-size: 4.27vw;
    }

    margin-bottom: 30px;
    border-radius: 28px;
    color: #fff;
    border: 2px solid #fff;
    background-color: rgba(0, 0, 0, 0);
    transition: all 0.2s linear;

    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }
}
</style>
</file>

<file path="src/views/signIn/StartRite.vue">
<!--
  * @description: 「启动仪式」控制组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-08
-->
<template>
  <div class="container">
    <div class="funcMenus publicVCenter">
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.STARTRITESTARTGAME })"
      >
        开始游戏
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.STARTRITEENDGAME })"
      >
        结束游戏
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.STARTRITEREPLAY })"
      >
        再玩一次
      </button>
      <button
        class="main"
        @click="sendInstrunction({ code: CODE.HOME })"
      >
        回到首页
      </button>
    </div>
    <div class="commonMenus publicHCenter">
      <button @click="sendInstrunction({ code: CODE.AUDIO })">音乐 开/关</button>
      <button @click="sendInstrunction({ code: CODE.DANMU })">弹幕 开/关</button>
      <button @click="sendInstrunction({ code: CODE.MSGWALL })">祝福榜 开/关</button>
      <button @click="sendInstrunction({ code: CODE.QRCODE })">二维码 开/关</button>
    </div>
  </div>
</template>
<script>
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'StartRite',
  data() {
    return {
      CODE,
    };
  },
  methods: {
    sendInstrunction,
  },
};
</script>
<style lang="less" scoped>
.container {
  width: 100%;
  height: 100%;
  position: relative;

  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }

  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }

  button {
    width: 24vw;
    height: 10.67vw;
    font-size: 3.47vw;

    &.main {
      width: 32vw;
      font-size: 4.27vw;
    }

    margin-bottom: 30px;
    border-radius: 28px;
    color: #fff;
    border: 2px solid #fff;
    background-color: rgba(0, 0, 0, 0);
    transition: all 0.2s linear;

    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }
}
</style>
</file>

<file path="src/views/swipe/SwipeCommon.vue">
<!--
  * @description: 「划一划」游戏通用组件
  * @author: Ruan Jiazhen
  * @date: 2024-01-09
-->
<template>
  <div class="hyhMod">
    <div class="funcMenus publicVCenter">
      <funcButton @clickEvent="startGame">开始游戏</funcButton>
      <funcButton @clickEvent="endGame">结束游戏</funcButton>
      <funcButton @clickEvent="reStartGame">再玩一次</funcButton>
      <funcButton @clickEvent="toHome">回到首页</funcButton>
    </div>
    <div class="commonMenus publicHCenter">
      <funcButton
        bWidth="24vw"
        bHeight="10.67vw"
        bFontSize="3.47vw"
        @clickEvent="toggleAudio"
      >
        音乐 开/关
      </funcButton>
      <funcButton
        bWidth="24vw"
        bHeight="10.67vw"
        bFontSize="3.47vw"
        @clickEvent="toggleDanmu"
      >
        弹幕 开/关
      </funcButton>
      <funcButton
        bWidth="24vw"
        bHeight="10.67vw"
        bFontSize="3.47vw"
        @clickEvent="toggleMsgwall"
      >
        祝福榜 开/关
      </funcButton>
      <funcButton
        bWidth="24vw"
        bHeight="10.67vw"
        bFontSize="3.47vw"
        @clickEvent="toggleQrcode"
      >
        二维码 开/关
      </funcButton>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import funcButton from '@/components/funcButton.vue';
import { CODE } from '@/assets/constant/index';
import sendInstrunction from '@/api/sendCode';

export default {
  name: 'SwipeCommon',
  computed: {
    ...mapState({
      currentMenuId: (state) => state.currentMenuId,
    }),
  },
  data() {
    return {};
  },
  components: {
    funcButton,
  },
  created() {},
  mounted() {},
  methods: {
    async startGame() {
      await sendInstrunction({
        code: CODE.HYHSTARTGAME,
      });
    },
    async endGame() {
      await sendInstrunction({
        code: CODE.HYHENDGAME,
      });
    },
    async reStartGame() {
      await sendInstrunction({
        code: CODE.HYHREPLAY,
      });
    },
    async toHome() {
      await sendInstrunction({
        code: CODE.HOME,
      });
    },
    async toggleQrcode() {
      await sendInstrunction({
        code: CODE.QRCODE,
      });
    },
    async toggleAudio() {
      await sendInstrunction({
        code: CODE.AUDIO,
      });
    },
    async toggleDanmu() {
      await sendInstrunction({
        code: CODE.DANMU,
      });
    },
    async toggleMsgwall() {
      await sendInstrunction({
        code: CODE.MSGWALL,
      });
    },
  },
};
</script>
<style lang="less" scoped>
.hyhMod {
  width: 100%;
  height: 100%;
  position: relative;
  .funcMenus {
    position: relative;
    width: 100%;
    flex-direction: column;
  }
  .commonMenus {
    position: relative;
    width: 100%;
    flex-wrap: wrap;
  }
}
</style>
</file>

<file path="src/views/v2/components/FuncButton.vue">
<template>
    <div class="func-button" @click="handleClick">
        <div class="button-content">
            <slot></slot>
        </div>
    </div>
</template>

<script>
export default {
  name: 'FuncButton',
  props: {
    disabled: {
      type: Boolean,
      default: false,
    },
  },
  methods: {
    handleClick(event) {
      if (!this.disabled) {
        this.$emit('click', event);
      }
    },
  },
};
</script>

<style scoped>
.func-button {
    display: inline-block;
    background: #FFFFFF;
    border-radius: 19px 19px 19px 19px;
    font-size: 30px;
    font-weight: bold;
    color: #3E80F8;
    padding: 11px 19px 6px 19px;
}
</style>
</file>

<file path="src/views/v2/components/multiMedia.vue">
<template>
  <div class="multiMediaBox">
    <div class="nav">
      <div class="navItem publicHCenter" :class="{ active: currentNavId === item.id }" v-for="item in navList"
        :key="item.id" @click="chooseNav(item.id)">
        {{ item.name }}
      </div>
    </div>
    <div class="listWrap publicHCenter">
      <div class="listItem publicHvCenter" v-for="item in mediaList" :key="item.id"
        :class="{ active: item.id === currentMediaId }" @click="chooseMedia(item.id)">
        {{ item.title }}
      </div>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';

const NAVS = [
  {
    id: 1,
    name: '播放视频',
  },
  {
    id: 2,
    name: '画面定格',
  },
];
export default {
  name: 'multiMedia',
  computed: {
    ...mapState({
      mediaList: (state) => state.mediaList,
    }),
  },
  props: {
    navIdProp: {
      type: Number,
      default: 1,
    },
  },
  watch: {
    navIdProp: {
      handler(newVal) {
        this.currentNavId = newVal;
      },
      immediate: true,
    },
  },
  data() {
    return {
      navList: NAVS,
      currentNavId: 1,
      currentMediaId: '',
    };
  },
  methods: {
    chooseNav(id) {
      const path = id === 1 ? '/videoPlayer' : '/fixedScreen';
      this.sendInstruction('router_jump', path, null);
      this.currentNavId = id;
    },
    chooseMedia(id) {
      this.currentMediaId = id;
      this.sendInstruction('game_control', 'mediaPlay', id);
    },
    async sendInstruction(type, action, param) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type,
        action,
        param,
      });
      this.$toast.clear();
    },
  },
};
</script>
<style lang="less" scoped>
.multiMediaBox {
  width: 750px;
  padding-bottom: 144px;
  border-top-right-radius: 40px;
  border-top-left-radius: 40px;
  background-color: rgba(1, 9, 22, 0.96);

  .nav {
    height: 72px;
    position: relative;
    display: flex;
    align-items: flex-end;

    .navItem {
      font-size: 26px;
      font-weight: 400;
      margin-left: 35px;
      color: rgba(255, 255, 255, 0.4);
      position: relative;

      &.active {
        font-size: 28px;
        font-weight: 500;
        color: #ffffff;

        &::after {
          display: block;
          content: '';
          width: 20px;
          height: 4px;
          background: #ffffff;
          border-radius: 4px;
          position: absolute;
          bottom: -8px;
        }
      }
    }
  }

  .listWrap {
    flex-wrap: wrap;
    margin-top: 40px;

    .listItem {
      margin: 0 10px;
      margin-bottom: 20px;
      width: 216px;
      height: 84px;
      background: rgba(255, 255, 255, 0.16);
      border: 2px solid #65697c;
      border-radius: 78px;
      font-size: 28px;
      font-weight: 400;
      color: #ffffff;

      &.active {
        background: linear-gradient(90deg, #fc4d88, #fd024f 100%);
      }
    }
  }
}
</style>
</file>

<file path="src/views/v2/components/PageTitle.vue">
<template>
    <div class="page-title">
        {{ pageTitle }}
    </div>
  </template>

<script>

export default {
  name: 'pageWithTitle',
  props: {
    pageTitle: {
      type: String,
      default: '',
    },
  },
};
</script>

  <style scoped>
 .page-title{
    color: #fff;
    font-size: 34px;
    font-weight: 500;
    padding-top: 37px;
    text-align: center;
 }
  </style>
</file>

<file path="src/views/v2/index.vue">
<template>
  <div class="v2-container">
    <!-- 顶部内容 -->
    <V2Top />
    <!-- 底部菜单 - 当键盘可见时隐藏 -->
    <V2Bottom v-show="!isKeyboardVisible" />
    <!-- 全局礼物播放器 -->
    <EffectPlayer />
  </div>
</template>

<script>
import { mapActions, mapState } from 'vuex';
import EffectPlayer from '@/views/v2/modules/effectPlayer/index.vue';
import V2Top from './layout/top.vue';
import V2Bottom from './layout/bottom.vue';

export default {
  name: 'V2',
  components: {
    V2Top,
    V2Bottom,
    EffectPlayer,
  },
  computed: {
    ...mapState('menu', ['isKeyboardVisible']),
  },
  created() {
    this.init();
  },
  methods: {
    ...mapActions('menu', ['initMenu']),
    ...mapActions('chat', ['getChatList', 'listenChatMessage']),
    ...mapActions('live', ['fetchSplInfo']),
    ...mapActions('gift', ['listenGiftMessage']),
    async init() {
      this.initMenu();
      await this.fetchSplInfo();
      await this.$store.dispatch('gift/fetchGiftSenderRankList');
      await this.$store.dispatch('gift/fetchGiftListAll');
      await this.getChatList();
      this.listenChatMessage();
      this.listenGiftMessage();
    },
  },
};
</script>
<style lang="less" scoped>
.v2-container {
  width: 100vw;
  height: 100vh;
  position: relative;
  background: linear-gradient(180deg, #4b7cfb 0%, #79b4ff 100%);
  display: flex;
  flex-direction: column;
  overflow-y: hidden;
}
</style>
</file>

<file path="src/views/v2/layout/bottom.vue">
<template>
    <div class="v2-bottom">
        <!-- 返回首页 -->
        <div class="back-home" v-show="selectedLeafMenu" @click="resetSelectedLeafMenu">
            <i class="iconfont icon-fanhui"></i>
            <span>返回首页</span>
        </div>
        <!-- 展开/收起按钮 -->
        <div class="toggle-btn" @click="toggleBtn">
            <!-- 移除了文字中的箭头符号 -->
            {{ isOpen ? '收起' : '展开' }}
            <!-- 添加下箭头图片，默认显示 -->
            <i class="iconfont icon-arrow-down" :class="{ 'rotate-arrow': !isOpen }"></i>
        </div>
        <!-- 全局控制菜单 -->
        <div class="global-control-menu_wrap">
            <GlobalControlMenu v-show="isOpen" :is-open="isOpen" />
        </div>
        <!-- 页面交互面菜单 -->
        <div class="page-interaction-menu_wrap">
            <PageInteractionMenu />
        </div>
    </div>
</template>

<script>
import { mapState, mapMutations } from 'vuex';
import GlobalControlMenu from './components/globalControlMenu.vue';
import PageInteractionMenu from './components/pageInteractionMenu.vue';

export default {
  name: 'V2Bottom',
  components: {
    GlobalControlMenu,
    PageInteractionMenu,
  },
  data() {
    return {
      isOpen: true,
    };
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    toggleBtnText() {
      // 原来的方法内容已修改，移除了返回的箭头符号
      return this.isOpen ? '收起' : '展开';
    },
  },
  methods: {
    ...mapMutations('menu', {
      resetSelectedLeafMenu: (state) => state.setSelectedLeafMenu,
    }),
    toggleBtn() {
      this.isOpen = !this.isOpen;
    },
    async resetSelectedLeafMenu() {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'router_jump',
        action: '/',
      });
      this.$toast.clear();
      this.$store.commit('menu/setSelectedLeafMenu', null);
    },
  },
};
</script>

<style scoped>
.v2-bottom {
    position: relative;
    background: #fff;
    border-radius: 30px 30px 0px 0px;
    padding-bottom: 10px;
}

.back-home {
    position: absolute;
    left: 19px;
    top: -35px;
    color: #fff;
    font-size: 22px;
    .icon-fanhui {
        font-size: 26px;
    }
    span {
        margin-left: 4px;
    }
}

.toggle-btn {
    width: 151px;
    height: 41px;
    background: #D4EBFE;
    font-size: 22px;
    font-weight: 500;
    color: #4D4E50;
    text-align: center;
    line-height: 41px;
    margin: 0 auto;
    border-radius: 0 0 60px 60px;
    margin-bottom: 30px;
    /* 新增flex布局样式以支持内部元素对齐 */
    display: flex;
    justify-content: center;
    align-items: center;
}

/* 新增旋转动画样式 */
.toggle-btn .icon-arrow-down {
   font-size: 16px;
   margin-left: 6px;
}
.toggle-btn .icon-arrow-down.rotate-arrow {
    transform: rotate(180deg);
    transition: transform 0.3s ease;
}

.global-control-menu_wrap {
    position: relative;
}

.page-interaction-menu_wrap {
    padding: 0 49px 108px 48px;
    margin-top: 28px;
}
</style>
</file>

<file path="src/views/v2/layout/components/globalControlMenu.vue">
<template>
  <div class="global-control-menu" :class="{ 'is-open': isOpen }">
    <div
      class="menu-item"
      v-for="item in menuList"
      :key="item.id"
      @click="handleMenuItemClick(item)"
    >
      <div class="icon-placeholder">
        <img :src="item.icon" :alt="item.name" class="menu-icon" />
      </div>
      <div class="item-text">{{ item.name }}</div>
    </div>

    <van-popup v-model="giftPopupVisible" position="bottom" class="vanPopup">
      <gift />
    </van-popup>

    <van-popup
      v-model="multiMediaPopupVisible"
      position="bottom"
      class="vanPopup"
    >
      <multiMedia :navIdProp="multiMediaNavId" />
    </van-popup>
  </div>
</template>

<script>
import gift from '@/components/gift.vue';
import multiMedia from '@/views/v2/components/multiMedia.vue';
import { mapState } from 'vuex';

export default {
  name: 'GlobalControlMenu',
  components: {
    gift,
    multiMedia,
  },
  props: {
    isOpen: {
      type: Boolean,
      default: true,
    },
  },
  computed: {
    ...mapState('menu', ['globalMenu']),
    menuList() {
      return this.globalMenu;
    },
  },
  data() {
    return {
      giftPopupVisible: false,
      multiMediaPopupVisible: false,
      multiMediaNavId: 1,
    };
  },
  methods: {
    async handleMenuItemClick(item) {
      if (item.id === 'freeGift') {
        this.giftPopupVisible = true;
        this.$store.dispatch('initGiftList');
      } else if (item.id === 'videoPlay') {
        this.sendInstruction('router_jump', '/videoPlayer', null);
        this.showMultiMediaPopup(1);
      } else if (item.id === 'photoFix') {
        this.sendInstruction('router_jump', '/fixedScreen', null);
        this.showMultiMediaPopup(2);
      } else if (item.id === 'curtainCall') {
        this.sendInstruction('router_jump', '/closing', null);
      } else if (item.id === 'wishRank') {
        this.sendInstruction('router_jump', '/sendGift', null);
      } else if (item.id === 'refresh') {
        await this.sendInstruction('global_control', item.id, null);
        this.$toast('已刷新');
      } else {
        this.sendInstruction('global_control', item.id, null);
      }
    },
    showMultiMediaPopup(e) {
      this.multiMediaNavId = e;
      this.multiMediaPopupVisible = true;
    },
    async sendInstruction(type, action, param) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type,
        action,
        param,
      });
      this.$toast.clear();
    },
  },
  watch: {
    multiMediaPopupVisible(newVal, oldVal) {
      if (oldVal === true && newVal === false) {
        this.sendInstruction('router_jump', '/', null);
      }
    },
  },
};
</script>

<style scoped>
.global-control-menu {
  display: grid;
  grid-template-columns: repeat(6, 76px);
  grid-template-rows: repeat(2, 1fr);
  gap: 24px 32px;
  width: 100%;
  justify-content: center;
  padding-bottom: 32px;
}

.menu-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  width: 76px;
  cursor: pointer;
}

.icon-placeholder {
  width: 76px;
  height: 76px;
  background: #5998ff;
  box-shadow: inset 0 7px 19px 0 #79b4ff;
  border-radius: 50%;
  margin-bottom: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.icon-placeholder:hover {
  transform: scale(1.05);
}

.menu-icon {
  width: 32px;
  height: 32px;
  object-fit: contain;
}

.item-text {
  font-size: 22px;
  color: #000;
  font-weight: bold;
  text-align: center;
  white-space: nowrap;
}

.global-control-menu::after {
  content: "";
  display: block;
  width: 653px;
  height: 1px;
  background: #cccccc;
  margin: 0 auto;
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  transition: opacity 0.3s;
  opacity: 1;
}

.global-control-menu:not(.is-open)::after {
  opacity: 0;
  pointer-events: none;
}

.van-popup {
  background-color: unset;
}
</style>
</file>

<file path="src/views/v2/layout/components/pageInteractionMenu.vue">
<template>
  <div class="page-menu">
    <div class="main-sub-menu_wrap" :class="{ 'has-sub-menu': subMenuItemsToDisplay.length > 0 }">
      <!-- 主菜单 (一级菜单) -->
      <div class="main-menu">
        <template v-for="item in menu">
          <span :key="item.id" :class="['main-menu-item', { active: activeMainId === item.id }]"
            @click="selectMainMenuItem(item)">
            {{ item.name }}
            <span v-if="hasThirdMenu(item)" class="arrow">
              <i class="iconfont icon-arrow-down"></i>
            </span>
          </span>
        </template>
      </div>

      <!-- 二级菜单 (横向列表) -->
      <div class="sub-menu" v-if="subMenuItemsToDisplay.length > 0">
        <span v-for="item in subMenuItemsToDisplay" :key="item.id"
          :class="['sub-menu-item', { active: activeSubId === item.id }]" @click="selectSubMenuItem(item)">
          {{ item.name }}
        </span>
      </div>
    </div>
    <!-- 三级菜单 (网格) -->
    <div class="third-menu" v-if="thirdMenuItemsToDisplay.length > 0">
      <span v-for="item in thirdMenuItemsToDisplay" :key="item.id"
        :class="['third-menu-item', { active: activeThirdId === item.id }]" @click="selectThirdMenuItem(item)">
        {{ item.name }}
      </span>
    </div>
  </div>
</template>

<script>
import { mapState, mapMutations } from 'vuex';
import { excludeProperty } from '@/utils/index';

export default {
  name: 'PageInteractionMenu',
  data() {
    return {
      activeMainId: null,
      activeSubId: null,
      activeThirdId: null,
    };
  },
  computed: {
    ...mapState('menu', ['menu', 'selectedLeafMenu']),
    activeMainItem() {
      if (!this.activeMainId || !this.menu) return null;
      return this.menu.find((item) => item.id === this.activeMainId);
    },
    // 判断当前一级菜单的 children 是否还有 children
    mainSelectionLeadsToIntermediateSubMenu() {
      if (!this.activeMainItem || !this.activeMainItem.children || this.activeMainItem.children.length === 0) {
        return false;
      }
      // 只要有一个 child 有 children 就认为需要二级菜单
      return this.activeMainItem.children.some((child) => child.children && child.children.length > 0);
    },
    subMenuItemsToDisplay() {
      if (this.activeMainItem && this.mainSelectionLeadsToIntermediateSubMenu) {
        return this.activeMainItem.children || [];
      }
      return [];
    },
    activeSubItem() {
      if (!this.activeSubId || this.subMenuItemsToDisplay.length === 0) return null;
      return this.subMenuItemsToDisplay.find((item) => item.id === this.activeSubId);
    },
    thirdMenuItemsToDisplay() {
      if (this.activeMainItem) {
        if (this.mainSelectionLeadsToIntermediateSubMenu) {
          if (this.activeSubItem && this.activeSubItem.children) {
            return this.activeSubItem.children;
          }
          return [];
        }
        if (this.activeMainItem.children) {
          return this.activeMainItem.children;
        }
      }
      return [];
    },
  },
  watch: {
    menu: {
      immediate: true,
      handler(newMenu) {
        if (newMenu && newMenu.length > 0) {
          if (!this.activeMainId || !newMenu.some((item) => item.id === this.activeMainId)) {
            this.selectMainMenuItem(newMenu[0]);
          }
        } else {
          this.activeMainId = null;
          this.activeSubId = null;
          this.activeThirdId = null;
        }
      },
    },
    activeMainId() {
      this.activeSubId = null;
      this.activeThirdId = null;
      if (this.activeMainItem) {
        if (this.mainSelectionLeadsToIntermediateSubMenu) {
          // 有二级菜单，只选中第一个二级菜单
          if (this.subMenuItemsToDisplay.length > 0) {
            this.activeSubId = this.subMenuItemsToDisplay[0].id;
          }
          // 不选中三级菜单
        } else {
          // 没有二级菜单，不选中三级菜单
        }
      }
    },
    activeSubId() {
      this.activeThirdId = null;
      // 不自动选中三级菜单
    },
    selectedLeafMenu(newVal) {
      if (!newVal) {
        // 只清空二级、三级菜单选中，主菜单保持默认（比如第一个）
        this.activeSubId = null;
        this.activeThirdId = null;
      }
    },
  },
  methods: {
    ...mapMutations('menu', ['setSelectedLeafMenu']),
    isLeafInChildren(children, leafId) {
      if (!children) return false;
      return children.some((child) => {
        if (child.id === leafId) return true;
        if (child.children && this.isLeafInChildren(child.children, leafId)) return true;
        return false;
      });
    },
    selectMainMenuItem(item) {
      this.activeMainId = item.id;
      this.checkAndSetLeafMenu(item);
      // 检查store中的selectedLeafMenu是否在当前主菜单的子树下
      if (
        this.selectedLeafMenu
        && this.selectedLeafMenu.id
        && this.isLeafInChildren(item.children, this.selectedLeafMenu.id)
      ) {
        this.setSelectedItemId(this.selectedLeafMenu.id);
      }
    },
    selectSubMenuItem(item) {
      this.activeSubId = item.id;
      this.checkAndSetLeafMenu(item);
      // 检查store中的selectedLeafMenu是否在当前二级菜单的子树下
      if (
        this.selectedLeafMenu
        && this.selectedLeafMenu.id
        && this.isLeafInChildren(item.children, this.selectedLeafMenu.id)
      ) {
        this.setSelectedItemId(this.selectedLeafMenu.id);
      }
    },
    async selectThirdMenuItem(item) {
      // 调用sendInstruction发送路由跳转指令
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      const paramObj = {
        type: 'router_jump',
        action: item.meta.path,
      };
      // 使用excludeProperty工具函数，排除path属性，组装param
      const param = excludeProperty(item.meta, 'path');
      if (Object.keys(param).length > 0) {
        paramObj.param = param;
      }

      await this.$store.dispatch('instructions/sendInstruction', paramObj);
      this.$toast.clear();
      this.activeThirdId = item.id;
      this.setSelectedLeafMenu(item);
    },
    checkAndSetLeafMenu(item) {
      if (!item.children || item.children.length === 0) {
        this.activeThirdId = null;
        this.setSelectedLeafMenu(item);
      }
    },
    setSelectedItemId(id) {
      let itemToSelect = null;
      let parentItem = null;
      let grandParentItem = null;
      const find = (items, currentGrandParent, currentParent) => {
        items.forEach((item) => {
          if (item.id === id) {
            itemToSelect = item;
            parentItem = currentParent;
            grandParentItem = currentGrandParent;
          }
          if (item.children) {
            find(item.children, currentParent || item, item);
          }
        });
      };
      find(this.menu, null, null);
      if (itemToSelect) {
        if (grandParentItem) {
          this.activeMainId = grandParentItem.id;
          this.$nextTick(() => {
            this.activeSubId = parentItem.id;
            this.$nextTick(() => {
              this.activeThirdId = itemToSelect.id;
            });
          });
        } else if (parentItem) {
          this.activeMainId = parentItem.id;
          this.$nextTick(() => {
            if (this.mainSelectionLeadsToIntermediateSubMenu) {
              this.activeSubId = itemToSelect.id;
            } else {
              this.activeSubId = null;
              this.activeThirdId = itemToSelect.id;
            }
          });
        } else {
          this.activeMainId = itemToSelect.id;
        }
      } else {
        this.activeMainId = null;
        this.activeSubId = null;
        this.activeThirdId = null;
      }
    },
    hasThirdMenu(item) {
      if (!item.children) return false;
      return item.children.some((child) => child.children && child.children.length > 0);
    },
  },
};
</script>

<style scoped>
.page-menu {
  position: relative;
}

.main-sub-menu_wrap {
  margin-bottom: 22px;
}
.main-sub-menu_wrap.has-sub-menu {
  width: 653px;
  height: 144px;
  border-radius: 30px;
  border: 2px solid #5998FF;
}

.main-menu {
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 11px;
  height: 71px;
  background: #5998FF;
  border-radius: 22px 22px 22px 22px;
}

.main-menu .main-menu-item:not(:last-child)::after {
  content: '';
  display: block;
  width: 1px;
  height: 26px;
  background: rgba(255, 255, 255, 0.5);
  position: absolute;
  right: 0;
}

.main-menu-item {
  color: #fff;
  font-weight: 500;
  width: 153px;
  height: 47px;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 26px;
  font-weight: bold;
  position: relative;
}

.main-menu-item.active {
  background: #FFFFFF;
  border-radius: 11px 11px 11px 11px;
  color: #5998FF;
}

.arrow {
  font-size: 12px;
  margin-left: 4px;
  transition: transform 0.2s;
}

.main-menu-item.active .arrow {
  transform: rotate(-90deg);
}

.sub-menu {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
}

.sub-menu-item {
  font-size: 24px;
  color: #3E80F8;
  font-weight: 500;
  width: 153px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  line-height: 50px;
}

.sub-menu-item.active::after {
  content: '';
  display: block;
  width: 97px;
  height: 7px;
  background: #5998FF;
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%);
}

.third-menu {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 12px 16px;
  justify-content: center;
}

.third-menu-item {
  width: 149px;
  height: 56px;
  border-radius: 187px;
  border: 1px solid #CCCCCC;
  background: #fff;
  color: #4D4E50;
  font-size: 21px;
  font-weight: bold;
  cursor: pointer;
  margin-bottom: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.third-menu-item.active {
  background: #5998FF;
  color: #fff;
  border: none;
}
</style>
</file>

<file path="src/views/v2/layout/top.vue">
<template>
  <div class="v2-top">
    <!-- 切换新版/旧版按钮 -->
    <button class="switch-version-btn" @click="switchVersion">{{ switchBtnText }}</button>
    <!-- 动态组件将在这里渲染 -->
    <component :is="currentComponent" v-if="currentComponent" />
  </div>
</template>

<script>
import CommonGame from '@/views/v2/modules/commonGame/index.vue';
import GiveMark from '@/views/v2/modules/giveMark/index.vue';
import GestureRiddle from '@/views/v2/modules/guessGame/gestureRiddle.vue';
import GuessGame from '@/views/v2/modules/guessGame/index.vue';
import GuessTextColor from '@/views/v2/modules/guessTextColor/index.vue';
import HbWall from '@/views/v2/modules/hbWall/index.vue';
import Hby from '@/views/v2/modules/hby/index.vue';
import Home from '@/views/v2/modules/home/index.vue';
import Kbx from '@/views/v2/modules/kbx/index.vue';
import CardLottery from '@/views/v2/modules/lottery/card/index.vue';
import PictureLottery from '@/views/v2/modules/lottery/picture/index.vue';
import SheetLottery from '@/views/v2/modules/lottery/sheet/index.vue';
import SignLottery from '@/views/v2/modules/lottery/sign/index.vue';
import WheelLottery from '@/views/v2/modules/lottery/wheel/index.vue';
import OrderSong from '@/views/v2/modules/orderSong/index.vue';
import QaGame from '@/views/v2/modules/qaGame/index.vue';
import QaMahjong from '@/views/v2/modules/qaMahjong/index.vue';
import SendBless from '@/views/v2/modules/sendBless/index.vue';
import Sign from '@/views/v2/modules/sign/index.vue';
import SignWeddingBook from '@/views/v2/modules/sign/signWeddingBook.vue';
import Vote from '@/views/v2/modules/vote/index.vue';
import Zfdm from '@/views/v2/modules/zfdm/index.vue';
import { mapState } from 'vuex';

export default {
  name: 'V2Top',
  components: {
    Home,
    Sign,
    CommonGame,
    QaGame,
    Vote,
    GiveMark,
    SignLottery,
    SheetLottery,
    WheelLottery,
    CardLottery,
    PictureLottery,
    Hby,
    GuessGame,
    GestureRiddle,
    QaMahjong,
    GuessTextColor,
    Zfdm,
    Kbx,
    HbWall,
    SignWeddingBook,
    OrderSong,
    SendBless,
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    currentComponent() {
      // 根据 selectedLeafMenu 动态渲染组件
      return this.selectedLeafMenu ? this.selectedLeafMenu.component : 'Home';
    },
    switchBtnText() {
      // 根据当前hash显示按钮文案
      return window.location.hash.includes('controllerV2') ? '切换新版' : '切换旧版';
    },
  },
  methods: {
    switchVersion() {
      console.log('switchVersion', window.location.hash);
      if (window.location.hash.includes('controllerV2')) {
        window.location.hash = '#/controller';
        // 切换到新版时，存储版本信息
        localStorage.setItem('version', 'new');
      } else {
        window.location.hash = '#/controllerV2';
        // 切换到旧版时，存储版本信息
        localStorage.setItem('version', 'old');
      }
      window.location.reload();
    },
  },
};
</script>

<style scoped>
.v2-top {
  flex: 1;
  overflow-y: auto;
  position: relative;
}

.switch-version-btn {
  background: rgba(255, 255, 255, 1);
  color: #333;
  border: none;
  border-radius: 16px;
  padding: 6px 16px;
  font-size: 18px;
  z-index: 10;
  margin-right: 10px;
  position: absolute;
  top: 0;
  left: 50%;
  transform: translateX(-50%);
}

.switch-version-btn:hover {
  background: rgba(255, 255, 255, 0.8);
}
</style>
</file>

<file path="src/views/v2/modules/commonGame/index.vue">
<template>
    <div class="sign-wrap">
      <PageTitleWrap :pageTitle="pageTitle" />
      <div class="func-button-horizontal" v-if="selectedLeafMenu.id === 'moneyTreeShake' && moneyTreeShakeChooseMode">
        <FuncButton @click="chooseMode('normal')" class="func-button">普通模式</FuncButton>
        <FuncButton @click="chooseMode('redPacket')" class="func-button">红包模式</FuncButton>
      </div>
      <div class="func-button-container">
        <FuncButton @click="gameControl('start')" class="func-button">开始游戏</FuncButton>
        <FuncButton @click="gameControl('end')" class="func-button">结束游戏</FuncButton>
        <FuncButton @click="gameControl('replay')" class="func-button">再玩一次</FuncButton>
      </div>
    </div>
  </template>

<script>
import FuncButton from '@/views/v2/components/FuncButton.vue';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import { mapState } from 'vuex';

export default {
  methods: {
    async gameControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
    async chooseMode(param) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'chooseMode',
        param,
      });
      this.$toast.clear();
    },
  },
  name: 'pageWithTitle',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    // 从 store 的 menu 模块映射 selectedLeafMenu 状态
    ...mapState('menu', ['selectedLeafMenu']),
    ...mapState('game', ['moneyTreeShakeChooseMode']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
};
</script>

  <style scoped>
  .sign-wrap {
    height: 100%;
  }
  .func-button-horizontal {
    display: flex;
    justify-content: center;
    column-gap: 40px;
    margin-top: 20px;
  }
  .func-button-container {
    display: flex;
    justify-content: center;
    margin-top: 5.2vw;
    flex-direction: column;
    align-items: center;
    row-gap: 4vw;
  }
  </style>
</file>

<file path="src/views/v2/modules/effectPlayer/index.vue">
<template>
  <div class="effect-area">
    <!-- SVGA 动画容器 -->
    <div ref="svgaContainer" class="svga-container" />
  </div>
</template>
<script>
import { mapState } from 'vuex';
import SVGA from 'svgaplayerweb';

export default {
  name: 'EffectPlayer',
  data() {
    return {
      player: null,
      parser: null,
    };
  },
  computed: {
    // 监听 gift 模块的 currentGiftEffect
    ...mapState({
      currentGiftEffect: (state) => state.gift.currentGiftEffect,
    }),
  },
  watch: {
    // 当 currentGiftEffect 变化时，触发播放
    currentGiftEffect(newGift) {
      if (newGift && newGift.id && newGift.path) {
        this.playSvga(newGift.path);
      }
    },
  },
  created() {
    // 初始化 svga parser
    this.parser = new SVGA.Parser();
  },
  methods: {
    playSvga(path) {
      // 如果已经有播放器实例，先清理
      if (this.player) {
        this.player.stopAnimation(true); // stop and clear
      }

      // 创建新的播放器实例
      this.player = new SVGA.Player(this.$refs.svgaContainer);
      this.player.loops = 1; // 播放一次

      // 监听播放完成事件
      this.player.onFinished(() => {
        // 动画播放完成后，通知 Vuex 移除当前礼物，以便播放下一个
        this.$store.commit('gift/removeFromGiftQueue');
        this.player.clear();
        this.player = null;
      });

      // 解析并播放动画
      this.parser.load(path, (videoItem) => {
        if (this.player) {
          this.player.setVideoItem(videoItem);
          this.player.startAnimation();
        }
      }, (error) => {
        console.error('SVGA load error:', error);
        // 如果加载失败，也应该从队列中移除，避免阻塞
        this.$store.commit('gift/removeFromGiftQueue');
      });
    },
  },
};
</script>
<style lang="less" scoped>
// 样式从 joymewH5 的 effectArea.vue 迁移过来
.effect-area {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  pointer-events: none; // 不阻挡下层元素的点击事件
  z-index: 999; // 确保在顶层
  overflow: hidden;

  .svga-container {
    position: absolute;
    width: 100%;
    height: 100%;
  }
}
</style>
</file>

<file path="src/views/v2/modules/giveMark/index.vue">
<template>
  <div class="sign-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div class="func-button-container">
      <FuncButton @click="giveMarkControl('clearPrev')" class="func-button">清空上一轮</FuncButton>
      <FuncButton @click="giveMarkControl('savePrev')" class="func-button">保留上一轮</FuncButton>
      <FuncButton @click="giveMarkControl('prev')" class="func-button">上一个</FuncButton>
      <FuncButton @click="giveMarkControl('next')" class="func-button">下一个</FuncButton>
      <FuncButton @click="giveMarkControl('end')" class="func-button">结束游戏</FuncButton>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  methods: {
    async giveMarkControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
  },
  name: 'GiveMark',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
};
</script>

<style scoped>
.sign-wrap {
  height: 100%;
}

.func-button-container {
  display: flex;
  justify-content: center;
  margin-top: 39px;
  flex-direction: column;
  align-items: center;
  row-gap: 4vw;
}
</style>
</file>

<file path="src/views/v2/modules/guessGame/gestureRiddle.vue">
<template>
  <div>
    <div class="container">
      <button
        class="btn start"
        @click="start"
      >
        开始游戏
      </button>
      <div class="category-list">
        <button
          class="category-item"
          v-for="(item, index) in categoryList"
          :key="index"
          @click="selectCategory(item)"
        >
          {{ item }}
        </button>
      </div>
      <button
        v-for="(item, index) in btnList"
        :key="index"
        :class="`btn ${item.class}`"
        @click="clickBtn(item.type)"
      >
        {{ item.name }}
      </button>
    </div>
  </div>
</template>

<script>
export default {
  name: 'gestureRiddle',
  data() {
    return {
      btnList: [
        { name: '换一题', class: 'change-question', type: 'GestureRiddleChangeQuestion' },
        { name: '正确', class: 'answer-right', type: 'GestureRiddleAnswerRight' },
        { name: '提前结束', class: 'end-game', type: 'GestureRiddleEndGame' },
        { name: '再玩一次', class: 'play-again', type: 'GestureRiddlePlayAgain' },
        { name: '游戏成绩', class: 'score', type: 'GestureRiddleScore' },
        { name: '清空游戏成绩', class: 'clear-score', type: 'GestureRiddleClearScore' },
      ],
    };
  },
  computed: {
    categoryList() {
      return this.$store.state.game.categoryList;
    },
  },
  methods: {
    async start() {
      await this.gameControl('GestureRiddleStart');
    },
    selectCategory(category) {
      if (this.$toast && this.$toast.loading) {
        this.$toast.loading({
          message: '加载中...',
          duration: 0,
        });
      }
      this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'GestureRiddleSelectCategory',
        param: category,
      }).finally(() => {
        if (this.$toast && this.$toast.clear) {
          this.$toast.clear();
        }
      });
    },
    async gameControl(action) {
      if (this.$toast && this.$toast.loading) {
        this.$toast.loading({
          message: '加载中...',
          duration: 0,
        });
      }
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      if (this.$toast && this.$toast.clear) {
        this.$toast.clear();
      }
    },
    async clickBtn(type) {
      switch (type) {
        case 'GestureRiddleEndGame':
          try {
            await this.$dialog.confirm({
              title: '提示',
              message: '是否提前结束游戏？',
            });
          } catch (err) {
            if (err === 'cancel') return;
            console.error(err);
          }
          break;
        case 'GestureRiddleClearScore':
          try {
            await this.$dialog.confirm({
              title: '提示',
              message: '是否清空游戏成绩？',
            });
          } catch (err) {
            if (err === 'cancel') return;
            console.error(err);
          }
          break;
        default:
          break;
      }
      await this.gameControl(type);
    },
  },
};
</script>

<style scoped lang="less">
.container {
  width: 100vw;

  padding: 40px 10px 0 10px;

  display: grid;
  grid-template-areas:
    'start start start'
    'category-list category-list category-list'
    'change-question answer-right end-game'
    'play-again score clear-score';
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(4, min-content);
  place-items: center;
  grid-gap: 20px;

  .btn {
    width: 30vw;
    height: 10.67vw;

    border-radius: 28px;
    background-color: transparent;
    color: #fff;
    border: 2px solid #fff;
    transition: all 0.2s linear;

    display: flex;
    justify-content: center;
    align-items: center;

    font-size: 3.47vw;
    &:active {
      background-color: rgba(255, 255, 255, 0.6);
    }
  }

  .category-list {
    grid-area: category-list;

    border: 2px solid #fff;
    border-radius: 28px;

    padding: 10px;

    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(2, min-content);
    place-items: center;
    grid-gap: 10px;

    .category-item {
      width: 30vw;
      height: 10.67vw;

      border-radius: 28px;
      color: #fff;
      border: 2px solid #fff;
      transition: all 0.2s linear;

      display: flex;
      justify-content: center;
      align-items: center;

      font-size: 3.47vw;

      &:nth-child(1) {
        background-color: #ffa231;
      }

      &:nth-child(2) {
        background-color: #3289ff;
      }

      &:nth-child(3) {
        background-color: #e365c9;
      }

      &:nth-child(4) {
        background-color: #26beef;
      }

      &:nth-child(5) {
        background-color: #002b9a;
      }

      &:nth-child(6) {
        background-color: #9565e3;
      }

      &:active {
        background-color: rgba(255, 255, 255, 0.6);
      }
    }
  }

  .start {
    grid-area: start;
  }

  .change-question {
    grid-area: change-question;
  }

  .answer-right {
    grid-area: answer-right;
  }

  .end-game {
    grid-area: end-game;
  }

  .play-again {
    grid-area: play-again;
  }

  .score {
    grid-area: score;
  }

  .clear-score {
    grid-area: clear-score;
  }
}
</style>
</file>

<file path="src/views/v2/modules/guessGame/index.vue">
<template>
  <div class="sign-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div class="func-button-container">
      <FuncButton @click="gameControl('prev')" class="func-button">上一题</FuncButton>
      <FuncButton @click="gameControl('next')" class="func-button">下一题</FuncButton>
      <FuncButton @click="gameControl('tip')" class="func-button" v-if="tipButtonGameIds.includes(selectedLeafMenu.id)">提示</FuncButton>
      <FuncButton @click="gameControl('start')" class="func-button" v-if="!startButtonGameIds.includes(selectedLeafMenu.id)">开始游戏</FuncButton>
      <FuncButton @click="gameControl('exposeAnswer')" class="func-button">揭晓答案</FuncButton>
    </div>
    <div class="answer-wrap">
      <label>答案：</label>
      <div v-html="currentMiniGameAnswer"></div>
    </div>
  </div>
</template>
<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  data() {
    return {
      tipButtonGameIds: ['guessStar', 'funnyGuessStar', 'guessBrand'],
      startButtonGameIds: ['happyGuessIdioms', 'funnyGuessStar', 'poetryQuiz'],
    };
  },
  methods: {
    async gameControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
  },
  name: 'pageWithTitle',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
  // 从 store 的 menu 模块映射 selectedLeafMenu 状态
    ...mapState('menu', ['selectedLeafMenu']),
    ...mapState(['currentMiniGameAnswer']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
  watch: {
    selectedLeafMenu(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.$store.commit('updateCurrentMiniGameAnswer', '');
      }
    },
  },
};
</script>
<style scoped>
.sign-wrap {
  height: 100%;
}
.func-button-container {
  display: flex;
  margin-top: 39px;
  justify-content: center;
  margin-top: 5.2vw;
  flex-wrap: wrap;
  align-items: center;
  row-gap: 4vw;
  column-gap: 4vw;
  padding: 0 4vw;
}
.answer-wrap {
  position: relative;
  font-weight: 600;
  font-size: 4.8vw;
  margin-top: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  padding: 0 4vw;
}
.answer-wrap label {
  font-size: 3.8vw;
  color: #000;
  font-weight: 400;
  margin-right: 12px;
}
</style>
</file>

<file path="src/views/v2/modules/guessTextColor/index.vue">
<template>
  <div class="mahjong-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div class="func-button-container">
      <FuncButton @click="gameControl('start')" class="func-button"
        >开始</FuncButton
      >
       <FuncButton @click="gameControl('expose')" class="func-button"
        >揭晓答案</FuncButton
      >
             <FuncButton @click="next" class="func-button"
        >下一题</FuncButton
      >
    </div>
    <div class="answer-wrap">
      <label>答案：</label>
      <div v-html="currentMiniGameAnswer"></div>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';
import { GuessColorQuestioner } from '@/utils/multipleScreenResolve';

export default {
  name: 'GuessTextColor',
  data() {
    return {
      cwzys: {
        timer: false,
      },
    };
  },
  computed: {
    ...mapState(['currentMiniGameAnswer']),
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
  methods: {
    async gameControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0,
      });
      const payload = {
        type: 'game_control',
        action,
      };
      await this.$store.dispatch('instructions/sendInstruction', payload);
      this.$toast.clear();
      if (action === 'start') {
        await this.next();
      }
    },
    async next() {
      if (this.cwzys.timer) {
        return;
      }
      this.cwzys.timer = true;
      setTimeout(() => {
        this.cwzys.timer = false;
      }, 10000);
      const question = GuessColorQuestioner.getQuestion();
      const answer = question.map(({ color }) => GuessColorQuestioner.qToA(color)).toString();
      this.$store.commit('updateCurrentMiniGameAnswer', answer);
      const payload = {
        type: 'game_control',
        action: 'sendQuestion',
        param: JSON.stringify(question),
      };
      await this.$store.dispatch('instructions/sendInstruction', payload);
    },
  },
  components: {
    PageTitleWrap,
    FuncButton,
  },
};
</script>

<style scoped>
.mahjong-wrap {
  height: 100%;
}

.func-button-container {
  display: flex;
  justify-content: center;
  margin-top: 39px;
  justify-content: center;
  margin-top: 5.2vw;
  flex-wrap: wrap;
  align-items: center;
  row-gap: 4vw;
  column-gap: 4vw;
  padding: 0 4vw;
}
.answer-wrap {
  position: relative;
  font-weight: 600;
  font-size: 4.8vw;
  margin-top: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  padding: 0 4vw;
}
.answer-wrap label {
  font-size: 3.8vw;
  color: #000;
  font-weight: 400;
  margin-right: 12px;
}
.func-button.active {
  font-weight: bold;
  color: black;
  border: 2px solid black;
}
</style>
</file>

<file path="src/views/v2/modules/hbWall/index.vue">
<template>
  <div class="hbwall-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div class="step" v-if="hbwallStep === 0">
      <FuncButton v-for="item in hbwallTypeList" :key="item.type + '-' + item.text" @click="chooseType(item.type)"
        class="func-button">
        {{ item.text }}
      </FuncButton>
    </div>
    <div class="func-button-container" v-if="hbwallStep === 1">
      <FuncButton class="func-button" @click="gameControl('start')">
        开始游戏
      </FuncButton>
    </div>
    <div class="func-button-container" v-if="hbwallStep === 2">
      <div class="boxList publicVCenter">
        <div class="boxItem publicHvCenter"
          :class="{ boxOutline: activeIndex === index, buyed: openedBox.indexOf(index) > -1 }" @click="selectBox(index)"
          v-for="(item, index) in boxList" :key="item">
          <div class="num">{{ item }}</div>
        </div>
      </div>
      <div class="func-button-container">
        <FuncButton class="func-button" @click="gameControl('openBox')">
          确认开红包
        </FuncButton>
        <FuncButton class="func-button" @click="gameControl('openBoxAll')">
          一键开红包
        </FuncButton>
      </div>
      <div class="func-button-container">
        <FuncButton @click="gameControl('end')">结束游戏</FuncButton>
      </div>
    </div>
    <div class="func-button-container" v-if="hbwallStep === 3">
      <FuncButton @click="gameControl('replay')">再玩一次</FuncButton>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  name: 'HbWall',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  data() {
    return {
      // boxList、activeIndex、openedBox 保留，去除hbwallTypeList
      boxList: [],
      activeIndex: -1,
      openedBox: [],
    };
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    ...mapState(['hbwallStep']),
    ...mapState('game', ['hbwallTypeList']),
    pageTitle() {
      return this.selectedLeafMenu?.name || '';
    },
  },
  created() {
    this.initBoxList();
  },
  methods: {
    initBoxList() {
      // Generate 28 red envelope numbers
      for (let i = 0; i < 28; i += 1) {
        if (i < 3) {
          this.boxList.push(`${i + 1}`);
        } else if (i >= 3 && i < 12) {
          this.boxList.push(`${i + 2}`);
        } else if (i >= 12 && i < 21) {
          this.boxList.push(`${i + 3}`);
        } else {
          this.boxList.push(`${i + 4}`);
        }
      }
    },
    selectBox(index) {
      this.activeIndex = index;
    },
    setHbwallStep(step) {
      this.$store.commit('setHbwallStep', step);
    },
    async chooseType(type) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0,
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'chooseType',
        param: type,
      });
      this.$toast.clear();
    },
    async gameControl(action) {
      if (action === 'openBox') {
        if (this.activeIndex === -1) {
          this.$toast('请选择一个红包!');
          return;
        }
        if (this.openedBox.indexOf(this.activeIndex) > -1) {
          this.$toast('红包已经开启!');
          return;
        }
        console.log(this.activeIndex);
        await this.$store.dispatch('instructions/sendInstruction', {
          type: 'game_control',
          action: 'openBox',
          param: this.activeIndex,
        });
        this.openedBox.push(this.activeIndex);
      } else if (action === 'openBoxAll') {
        await this.$store.dispatch('instructions/sendInstruction', {
          type: 'game_control',
          action: 'openBoxAll',
        });
      } else if (action === 'start') {
        await this.$store.dispatch('instructions/sendInstruction', {
          type: 'game_control',
          action: 'start',
        });
      } else if (action === 'end') {
        await this.$store.dispatch('instructions/sendInstruction', {
          type: 'game_control',
          action: 'end',
        });
      } else if (action === 'replay') {
        await this.$store.dispatch('instructions/sendInstruction', {
          type: 'game_control',
          action: 'replay',
        });
      }
    },
  },
};
</script>

<style scoped>
.hbwall-wrap {
  height: 100%;
}

.func-button-container {
  display: flex;
  justify-content: center;
  margin-top: 5.2vw;
  flex-direction: column;
  align-items: center;
  row-gap: 4vw;
}

.boxList {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  column-gap: 2px;
  row-gap: 5px;
  justify-content: center;
}

.boxItem {
  width: 18vw;
  height: 18vw;
  background-color: #fff;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.boxItem.boxOutline {
  border: 5px solid #FFD700;
  background-color: #F0F8FF;
}
.boxItem.buyed {
  background-color: #E6E6E6;
  border: 1px solid #CCCCCC;
}
.boxItem.buyed > .num {
  color: #999999;
}
.step {
  display: flex;
  justify-content: center;
  margin-top: 39px;
  justify-content: center;
  margin-top: 5.2vw;
  flex-direction: column;
  align-items: center;
  row-gap: 4vw;
}
</style>
</file>

<file path="src/views/v2/modules/hby/index.vue">
<template>
  <div class="sign-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div
      v-if="hbyStep === 0"
      class="config-set-container"
    >
      <div class="form-box">
        <div class="input-item">
          <span class="label">红包金额:</span>
          <input
            type="number"
            v-model.number="redPacketMoney"
            class="input-field"
          />
          <span class="unit">元</span>
        </div>
        <div
          class="input-item"
          v-if="selectedLeafMenu.id !== 'nationalRedEnvelopeRain'"
        >
          <span class="label">红包个数:</span>
          <input
            type="number"
            v-model.number="redPacketNum"
            class="input-field"
          />
          <span class="unit">个</span>
        </div>
      </div>
      <FuncButton
        @click="confirmConfig"
        class="config-button"
      >
        确认
      </FuncButton>
      <FuncButton
        @click="cancelConfig"
        class="config-button cancel-button"
      >
        取消
      </FuncButton>
    </div>
    <div
      v-else
      class="func-button-container"
    >
      <FuncButton
        @click="gameControl('start')"
        class="func-button"
      >
        开始游戏
      </FuncButton>
      <FuncButton
        @click="gameControl('end')"
        class="func-button"
      >
        结束游戏
      </FuncButton>
      <FuncButton
        @click="gameControl('replay')"
        class="func-button"
      >
        再玩一次
      </FuncButton>
      <FuncButton
        @click="gameControl('exposeOrShowNext')"
        class="func-button"
        v-if="selectedLeafMenu.id === 'shoutRedEnvelope'"
      >
        开始/下一个/结束
      </FuncButton>
      <FuncButton
        @click="goBackToConfig"
        class="func-button cancel-button"
      >
        返回
      </FuncButton>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';
import keyboardDetectionMixin from '@/mixins/keyboardDetection';

export default {
  name: 'pageWithTitle',
  mixins: [keyboardDetectionMixin],
  data() {
    return {
      hbyStep: 0,
      redPacketMoney: null,
      redPacketNum: null,
    };
  },
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    // 从 store 的 menu 模块映射 selectedLeafMenu 状态
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
  methods: {
    async gameControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
    async confirmConfig() {
      // 发送指令到服务器
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'configSet',
        param: {
          money: this.redPacketMoney,
          num: this.redPacketNum,
        },
      });
      this.hbyStep = 1;
      this.$toast.clear();
    },
    cancelConfig() {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      this.$store
        .dispatch('instructions/sendInstruction', {
          type: 'router_jump',
          action: '/',
        })
        .then(() => {
          this.$toast.clear();
          this.$store.commit('menu/setSelectedLeafMenu', null);
        });
    },
    goBackToConfig() {
      this.hbyStep = 0;
    },
  },
};
</script>

<style scoped>
.sign-wrap {
  height: 100%;
}

.func-button-container {
  display: flex;
  justify-content: center;
  margin-top: 39px;
  justify-content: center;
  margin-top: 5.2vw;
  flex-direction: column;
  align-items: center;
  row-gap: 4vw;
}

.config-set-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-top: 35px;
}

.form-box {
  width: 687px;
  height: 203px;
  background: linear-gradient(180deg, #ffffff 0%, #c1daff 100%);
  box-shadow: inset 0px 7 19px 0px rgba(255, 255, 255, 0.3);
  border-radius: 19px 19px 19px 19px;
  border: 2px solid #ffffff;
  margin-bottom: 49px;
  padding-top: 10px;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.input-item {
  display: flex;
  align-items: center;
  margin-bottom: 20px;
  width: 595px;
  height: 97px;
}

.input-item:first-child {
  border-bottom: 1px solid #fff;
}

.label {
  font-size: 30px;
  color: #000;
  margin-right: 10px;
  width: 164px;
}

.input-field {
  outline: none;
  border: none;
  font-size: 16px;
  width: 150px;
  background: transparent;
  color: #ff80a0;
  font-size: 30px;
}

.unit {
  margin-left: 5px;
  font-size: 16px;
  color: #666;
  color: #3e80f8;
  font-size: 30px;
}

.config-set-container .config-button {
  margin-top: 20px;
  width: 463px;
  height: 73px;
  background: #ffffff;
  border-radius: 38px 38px 38px 38px;
  display: flex;
  justify-content: center;
  align-items: center;
}
.config-set-container .config-button.cancel-button {
  background: transparent;
  border: 2px solid #ffffff;
  color: #ffffff;
}
</style>
</file>

<file path="src/views/v2/modules/home/index.vue">
<template>
  <div class="home-container">
    <!-- 顶部区域 -->
    <div class="top-section">
      <div
        class="gift-rank"
        @click="showGiftRankPopup"
      >
        <i class="iconfont icon-bangdan"></i>
        礼物榜
        <div class="user-avatars">
          <img
            v-for="user in giftRankUsersTop3"
            :key="user.userId"
            :src="user.avator"
            class="avatar"
          />
          <span
            v-if="giftSenderRankList.length > 3"
            class="more"
          >
            ...
          </span>
        </div>
      </div>
    </div>
    <!-- 底部区域 -->
    <div class="bottom-section">
      <!-- 左侧区域（消息列表） -->
      <div class="left-section">
        <MessageItem
          v-for="(message, index) in messages"
          :key="index"
          :message="message"
          @block-user="handleBlockUser"
        />
      </div>
      <!-- 右侧区域（数字统计） -->
      <div class="right-section">
        <div class="stat-item" @click="toggleHeaderIcon('hb')">
          <i class="iconfont icon-hongbao"></i>
          {{ balance }}
        </div>
        <div class="stat-item" @click="toggleHeaderIcon('sign')">
          <i class="iconfont icon-lianxiren"></i>
          {{ person }}
        </div>
        <div
          class="stat-item"
          @click="toggleSongLib"
        >
          <i class="iconfont icon-diange"></i>
        </div>
      </div>
    </div>

    <!-- 礼物榜弹窗 -->
    <van-popup
      v-model="giftRankVisible"
      position="bottom"
      :style="{ height: '60%' }"
      round
    >
      <div class="gift-rank-popup">
        <div class="popup-header">祝福礼物排行榜</div>
        <div class="gift-rank-list">
          <div
            v-for="(user, index) in giftSenderRankList"
            :key="user.userId"
            class="gift-rank-item"
          >
            <div class="avatar-wrap">
              <img
                :src="user.avator"
                class="avatar"
              />
              <span class="num">{{ index + 1 }}</span>
            </div>
            <div class="relative">{{ user.positionName }}</div>
            <div class="nickname">{{ user.wx_name }}</div>
            <div class="consume-wrap">
              <span class="key">祝福礼物总金额</span>
              <span class="value">{{ user.money }}元</span>
            </div>
          </div>
        </div>
      </div>
    </van-popup>

    <!-- 音乐库播放控制弹窗 -->
      <van-popup
      v-model="musicLibraryVisible"
      position="bottom"
      :style="{ height: '80%' }"
      round
    >
      <MusicLibPlay />
    </van-popup>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import MessageItem from './MessageItem.vue';
import MusicLibPlay from './MusicLibPlay.vue';

export default {
  name: 'Home',
  components: {
    MessageItem,
    MusicLibPlay,
  },
  data() {
    return {
      giftRankVisible: false,
      musicLibraryVisible: false,
    };
  },
  computed: {
    ...mapState({
      messages: (state) => state.chat.chatList,
      giftSenderRankList: (state) => state.gift.giftSenderRankList,
      balance: (state) => state.live.balance,
      person: (state) => state.live.person,
    }),
    giftRankUsersTop3() {
      return this.giftSenderRankList.slice(0, 3);
    },
  },
  methods: {
    showGiftRankPopup() {
      this.giftRankVisible = true;
    },
    handleBlockUser(message) {
      // 处理用户被加入黑名单的逻辑
      console.log('用户已被加入黑名单:', message);
      // 这里可以调用API或更新本地状态
    },
    async toggleSongLib(needTogglePopup = true) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'toggleSongLib',
      });
      if (needTogglePopup) {
        this.musicLibraryVisible = !this.musicLibraryVisible;
      }
      this.$toast.clear();
    },
    async toggleHeaderIcon(type) {
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'global_control',
        action: 'toggle_header_icon',
        param: type,
      });
    },
  },
  watch: {
    messages: {
      handler() {
        this.$nextTick(() => {
          const container = this.$el.querySelector('.left-section');
          if (container) {
            container.scrollTo({
              top: container.scrollHeight,
              behavior: 'smooth',
            });
          }
        });
      },
      deep: true,
    },
    musicLibraryVisible(newVal, oldVal) {
      // 当弹窗从打开状态变为关闭状态时执行
      if (oldVal === true && newVal === false) {
        this.toggleSongLib(false);
      }
    },
  },
  mounted() {},
};
</script>

<style lang="less" scoped>
.home-container {
  padding: 0 28px 0 32px;
  display: flex;
  flex-direction: column;
  height: 100%;

  .top-section {
    padding-top: 50px;
    margin-bottom: 37px;
    font-size: 22px;
    color: #fff;

    .gift-rank {
      display: flex;
      align-items: center;
      padding-left: 24px;
      width: 302px;
      height: 54px;
      border-radius: 27px 27px 27px 27px;
      border: 2px solid #ffffff;
      margin-left: auto;
      cursor: pointer;
      transition: all 0.3s ease;

      &:hover {
        background-color: rgba(255, 255, 255, 0.1);
      }

      .icon-bangdan {
        margin-right: 8px;
        font-size: 28px;
      }

      .user-avatars {
        margin-left: 14px;

        .avatar {
          width: 31px;
          height: 31px;
          border-radius: 50%;
          margin-right: 2px;

          &:nth-child(3) {
            margin-right: 0;
          }
        }

        .more {
          font-size: 28px;
          margin-left: 12px;
          vertical-align: 10px;
        }
      }
    }
  }

  .bottom-section {
    display: flex;
    flex: 1;
    overflow-y: auto;
    .left-section {
      scroll-behavior: smooth;
      flex: 1;
      padding: 10px;
      overflow-y: auto;
    }

    .right-section {
      .stat-item {
        width: 119px;
        height: 43px;
        border-radius: 27px 27px 27px 27px;
        border: 2px solid #ffffff;
        display: flex;
        align-items: center;
        color: #fff;
        font-size: 22px;
        font-weight: 500;
        padding-left: 22px;

        &:not(:last-child) {
          margin-bottom: 20px;
        }
        &:last-child {
          width: 80px;
          margin-left: auto;
        }

        .iconfont {
          margin-right: 10px;
          font-size: 28px;
        }
      }
    }
  }
}

.van-popup.van-popup--round.van-popup--bottom {
  border-radius: 30px 30px 0 0;
}

// 礼物榜弹窗样式
.gift-rank-popup {
  display: flex;
  flex-direction: column;
  height: 100%;
  .popup-header {
    text-align: center;
    height: 104px;
    padding-top: 34px;
    font-weight: 500;
    font-size: 30px;
  }

  .gift-rank-list {
    padding-left: 35px;
    color: #000000;
    font-size: 22px;
    flex: 1;
    overflow-y: auto;
    .gift-rank-item {
      display: flex;
      align-items: center;
      margin-bottom: 32px;
      .avatar-wrap {
        width: 73px;
        height: 73px;
        position: relative;

        .avatar {
          width: 100%;
          height: 100%;
          border-radius: 50%;
        }

        .num {
          display: block;
          width: 26px;
          height: 26px;
          background: #5998ff;
          border: 2px solid #ffffff;
          position: absolute;
          bottom: -13px;
          left: 0;
          right: 0;
          margin: auto;
          font-size: 18px;
          color: #fff;
          border-radius: 50%;
          text-align: center;
          line-height: 26px;
        }
      }
      .relative {
        margin-left: 26px;
        width: 91px;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
      }
      .nickname {
        margin-left: 41px;
        width: 132px;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
      }
      .consume-wrap {
        margin-left: 41px;
        .value {
          margin-left: 41px;
          color: #5998ff;
        }
      }
    }
  }
}
</style>
</file>

<file path="src/views/v2/modules/home/MessageItem.vue">
<template>
  <div class="message-item">
    <div class="top">
      <img :src="message.avatar" class="avatar" />
      <div class="nickname">{{ message.nickname }}</div>
      <i class="iconfont icon-close" @click="handleBlockUser"></i>
    </div>
    <div class="content">
      <!-- 礼物信息展示区域 -->
      <div class="gift-info" v-if="message.giftTypeInfo">
        <div class="send-text">
          <span class="gift-action-text">送来了</span>
          <span class="gift-name">{{ message.giftTypeInfo.label }}</span>
        </div>
        <div class="send-img">
          <!-- 礼物图标 -->
          <img
            v-if="message.giftImage"
            :src="message.giftImage"
            class="gift-icon"
          />
        </div>
      </div>
      <!-- 普通文本消息 -->
      <div class="message-content" v-if="message.content">
        {{ message.content }}
      </div>
      <!-- 照片 -->
      <div class="photo-wrap" v-if="message.photo">
        <img :src="message.photo" class="photo-img" />
      </div>
    </div>
    <div class="footer">
      <div class="send-time">{{ message.sendDateTime }}</div>
     <div class="resend-btn" v-if="shouldShowResendButton(message)" @click="handleResendGift">
        重发一次
      </div>
    </div>
  </div>
</template>

<script>
import { addBlackList, resendGiftMsgToWs } from '@/api/indexV2';

export default {
  name: 'MessageItem',
  props: {
    message: {
      type: Object,
      required: true,
    },
  },
  methods: {
    handleBlockUser() {
      this.$dialog
        .confirm({
          message: '是否将该用户加入本场活动的黑名单？',
          confirmButtonText: '确认',
          cancelButtonText: '取消',
          className: 'custom-blacklist-dialog',
          confirmButtonColor: '#ee0a24',
          cancelButtonColor: '#666',
        })
        .then(async () => {
          // 点击确认后的逻辑
          try {
            await addBlackList({ userId: this.message.userId, type: '1' });
            this.$toast.success('用户已加入黑名单');
            this.$emit('block-user', this.message);
          } catch (e) {
            this.$toast.fail('拉黑失败');
          }
        })
        .catch(async () => {
          // 点击取消后的逻辑，执行取消拉黑
          try {
            await addBlackList({ userId: this.message.userId, type: '0' });
            this.$toast.success('已取消拉黑');
          } catch (e) {
            this.$toast.fail('取消拉黑失败');
          }
        });
    },
    async handleResendGift() {
      try {
        await this.resendGiftCommon();
        this.$toast.success('重发成功');
      } catch (e) {
        this.$toast.fail('重发失败');
      }
    },
    resendGiftCommon() {
      // 直接调用新版重发礼物接口
      return resendGiftMsgToWs({
        userId: this.message.userId,
        giftid: this.message.giftId,
        miaoContent: this.message.rawContent,
      });
    },
    shouldShowResendButton(message) {
      return message.giftId && message.giftTypeInfo && message.giftTypeInfo.value !== 'hbkd';
    },
  },
};
</script>

<style lang="less" scoped>
.message-item {
  margin-bottom: 19px;
  width: 397px;
  min-height: 203px;
  background: linear-gradient(180deg, #ffffff 0%, #c1daff 100%);
  box-shadow: inset 0px 7 19px 0px rgba(255, 255, 255, 0.3);
  border-radius: 19px 19px 19px 19px;
  border: 2px solid #ffffff;
  padding: 21px 19px 17px 22px;

  &:last-child {
    margin-bottom: 0;
  }

  .top {
    display: flex;
    align-items: center;
    position: relative;

    .avatar {
      width: 49px;
      height: 49px;
      border-radius: 50%;
    }

    .nickname {
      width: 257px;
      text-overflow: ellipsis;
      overflow: hidden;
      white-space: nowrap;
      color: #497fe1;
      font-size: 22px;
      margin-left: 13px;
    }

    .icon-close {
      color: #3a81f5;
      font-size: 24px;
      font-weight: 600;
      position: absolute;
      top: 0;
      right: 0;
      cursor: pointer;

      &:hover {
        color: #ee0a24;
      }
    }
  }

  .content {
    display: flex;
    position: relative;
    margin-top: 19px;
    flex-direction: column;
    .gift-info {
      width: 100%;
      .send-text {
        color: #ff80a0;
        font-size: 28px;
        margin-bottom: 10px;
        .gift-action-text {
          margin-right: 4px;
        }
      }

      .send-img {
        text-align: right;
        .gift-icon {
          // 礼物图标样式
          width: 200px;
          height: 200px;
          object-fit: contain;
        }
      }
    }

    .message-content {
      color: #ff80a0;
      font-size: 28px;
      white-space: pre-line;
    }

    .photo-wrap {
      width: 100%;
      text-align: right;
      .photo-img {
        width: 200px;
        height: 200px;
        object-fit: contain;
      }
    }
  }

  .footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 11px;
    font-size: 17px;

    .send-time {
      color: #3a81f5;
    }

    .resend-btn {
      color: #fff;
      background: #3a81f5;
      border-radius: 10px;
      width: 101px;
      height: 35px;
      font-size: 17px;
      text-align: center;
      line-height: 35px;
    }
  }
}
</style>
</file>

<file path="src/views/v2/modules/home/MusicLibPlay.vue">
<template>
  <div class="music-lib-play">
    <!-- 音乐列表 -->
    <div class="music-list-wrapper">
      <div
        v-for="(song, index) in songs"
        :key="song.id"
        class="music-item"
        :class="{ active: currentSongIndex === index }"
        @click="playSong(index)"
      >
        <span class="song-name">{{ song.name }}</span>
        <div
          class="play-pause-btn"
          @click.stop="playPauseItem(index)"
        >
          <i :class="getIconClassForItem(index)"></i>
        </div>
      </div>
    </div>

    <!-- 控制按钮区域 -->
    <div class="control-area">
      <div class="main-controls">
        <button class="control-btn" @click="playPrev">上一首</button>
        <button class="control-btn play-pause-main" @click="togglePlayPause">
          <i :class="playPauseIconClass"></i>
        </button>
        <button class="control-btn" @click="playNext">下一首</button>
      </div>
      <div class="volume-controls">
        <button class="control-btn" @click="increaseVolume">音量增</button>
        <button class="control-btn" @click="decreaseVolume">音量减</button>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'MusicLibPlay',
  data() {
    return {
      // 模拟音乐列表数据
      // songs: [
      //   { id: 1, name: '音乐1 - 晴天' },
      //   { id: 2, name: '音乐2 - 七里香' },
      //   { id: 3, name: '音乐3 - 夜曲' },
      //   { id: 4, name: '音乐4 - 稻香' },
      //   { id: 5, name: '音乐5 - 青花瓷' },
      //   { id: 6, name: '音乐6 - 告白气球' },
      //   { id: 7, name: '音乐7 - 等你下课' },
      //   { id: 8, name: '音乐8 - 最伟大的作品' },
      //   { id: 9, name: '音乐9 - 红尘客栈' },
      //   { id: 10, name: '音乐10 - 不能说的秘密' },
      //   { id: 11, name: '音乐11 - 彩虹' },
      //   { id: 12, name: '音乐12 - 说好的幸福呢' },
      //   { id: 13, name: '音乐13 - 退后' },
      //   { id: 14, name: '音乐14 - 黑色毛衣' },
      //   { id: 15, name: '音乐15 - 轨迹' },
      // ],
      currentSongIndex: null, // 当前播放歌曲的索引
      isPlaying: false, // 全局播放状态
      volume: 10, // 音量 (0-20)
    };
  },
  computed: {
    // 主控制区播放/暂停按钮的图标class
    playPauseIconClass() {
      // 遵循图片提示: <div class="iconfont bofang或者zanting"/>
      return this.isPlaying ? 'iconfont icon-zanting' : 'iconfont icon-bofang';
    },
    songs() {
      // 从store中获取音乐播放器数据
      return this.$store.state.musicPlayerData ? this.$store.state.musicPlayerData.map((item) => ({
        id: item.musicId,
        name: item.name,
      })) : [];
    },
  },
  methods: {
    // 点击列表项播放歌曲
    playSong(index) {
      this.currentSongIndex = index;
      this.isPlaying = true;
      this.sendInstruction('playMusic', this.songs[index].id);
    },
    // 点击列表项中的播放/暂停按钮
    playPauseItem(index) {
      if (this.currentSongIndex === index) {
        // 如果点击的是当前播放的歌曲，则切换播放/暂停状态
        this.isPlaying = !this.isPlaying;
        // Send instruction based on the new state
        this.sendInstruction('playMusic', this.isPlaying ? this.songs[index].id : '');
      } else {
        // 如果点击的是其他歌曲，则切换到该歌曲并播放
        this.currentSongIndex = index;
        this.isPlaying = true;
        this.sendInstruction('playMusic', this.songs[index].id);
      }
    },
    // 主控制区切换播放/暂停
    togglePlayPause() {
      if (this.currentSongIndex === null && this.songs.length > 0) {
        // 如果从未播放过，默认播放第一首
        this.currentSongIndex = 0;
        this.isPlaying = true;
        this.sendInstruction('playMusic', this.songs[0].id);
      } else if (this.currentSongIndex !== null) {
        this.isPlaying = !this.isPlaying;
        // Send instruction based on the new state
        this.sendInstruction('playMusic', this.isPlaying ? this.songs[this.currentSongIndex].id : '');
      }
    },
    // 播放下一首
    playNext() {
      if (this.songs.length === 0) return;
      if (this.currentSongIndex === null) {
        this.currentSongIndex = 0;
      } else {
        this.currentSongIndex = (this.currentSongIndex + 1) % this.songs.length;
      }
      this.isPlaying = true;
      this.sendInstruction('songControl', 'next');
    },
    // 播放上一首
    playPrev() {
      if (this.songs.length === 0) return;
      if (this.currentSongIndex === null) {
        this.currentSongIndex = 0;
      } else {
        this.currentSongIndex = (this.currentSongIndex - 1 + this.songs.length) % this.songs.length;
      }
      this.isPlaying = true;
      this.sendInstruction('songControl', 'prev');
    },
    // 增加音量
    increaseVolume() {
      this.volume = Math.min(20, this.volume + 1); // 音量范围 0-20，每次增加1
      // 可在此处添加实际的音量控制逻辑
      // console.log('Current Volume:', this.volume);
      this.sendInstruction('volume', 'add');
    },
    // 减少音量
    decreaseVolume() {
      this.volume = Math.max(0, this.volume - 1); // 音量范围 0-20，每次减少1
      // 可在此处添加实际的音量控制逻辑
      // console.log('Current Volume:', this.volume);
      this.sendInstruction('volume', 'sub');
    },
    // 获取列表项中按钮的图标class
    getIconClassForItem(index) {
      if (this.currentSongIndex === index && this.isPlaying) {
        return 'iconfont icon-zanting';
      }
      return 'iconfont icon-bofang';
    },
    async sendInstruction(action, param) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
        param,
      });
      this.$toast.clear();
    },
  },
};
</script>

<style lang="less" scoped>
.music-lib-play {
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: #fff;
  padding: 20px 15px;
  box-sizing: border-box;
  color: #333;
}

// 音乐列表
.music-list-wrapper {
  flex: 1;
  overflow-y: auto;
  border: 1px solid #eee;
  border-radius: 12px;
  margin-bottom: 15px;
  padding: 8px 0;
  // 滚动条样式优化
  &::-webkit-scrollbar {
    width: 4px;
  }
  &::-webkit-scrollbar-thumb {
    border-radius: 2px;
    background: #ccc;
  }
}

.music-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 15px;
  cursor: pointer;
  border-bottom: 1px solid #f5f5f5;
  transition: background-color 0.2s;
  font-size: 35px;
  line-height: 50px;
  &:last-child {
    border-bottom: none;
  }

  &:hover {
    background-color: #f8f8f8;
  }

  &.active {
    color: #c21f30; // 选中时的颜色
    font-weight: 500;
  }

  .song-name {
    flex: 1;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    margin-right: 15px;
  }

  .play-pause-btn {

    .iconfont {
      margin-right: 3px;
      font-size: 45px;
    }
  }
}

// 控制区域
.control-area {
  flex-shrink: 0;
  padding: 10px;
  border: 1px solid #eee;
  border-radius: 12px;
}

.main-controls,
.volume-controls {
  display: flex;
  align-items: center;
}

.main-controls {
  justify-content: space-around;
}

.volume-controls {
  justify-content: center;
  margin-top: 10px;
  gap: 25px; // 按钮间距
}

.control-btn {
  border: none;
  background: none;
  font-size: 14px;
  cursor: pointer;
  padding: 8px 10px;
  color: #333;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 8px;
  transition: background-color 0.2s;
  font-size: 35px;
  &:hover {
    background-color: #f0f0f0;
  }

  &.play-pause-main {
    font-size: 16px;
    font-weight: 500;

    .iconfont {
      font-size: 52px;
    }
  }
}
</style>
</file>

<file path="src/views/v2/modules/kbx/index.vue">
<template>
  <div class="kbx-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div class="step" v-if="kbxStep === 0">
      <FuncButton v-for="item in kbxTypeList" :key="item.type + '-' + item.text" @click="chooseType(item.type)"
        class="func-button">
        {{ item.text }}
      </FuncButton>
    </div>
    <!-- 步骤1：开始游戏按钮 -->
    <div class="func-button-container" v-if="kbxStep === 1">
      <FuncButton class="func-button" @click="gameControl('start')">
        开始游戏
      </FuncButton>
    </div>
    <!-- 步骤2：开宝箱流程 -->
    <div class="func-button-container" v-if="kbxStep === 2">
      <div class="boxList publicVCenter">
        <div class="boxItem publicHvCenter" :class="{
          boxOutline: activeIndex === index,
          buyed: openedBox.indexOf(index) > -1
        }" @click="selectBox(index)" v-for="(item, index) in boxList" :key="item">
          <div class="num">{{ item }}</div>
        </div>
      </div>
      <div class="func-button-container">
        <FuncButton class="func-button" @click="gameControl('openBox')">
          确认开宝箱
        </FuncButton>
        <FuncButton class="func-button" @click="gameControl('openBoxAll')">
          一键开宝箱
        </FuncButton>
      </div>
      <div class="func-button-container">
        <FuncButton @click="gameControl('end')">结束游戏</FuncButton>
      </div>
    </div>
    <!-- 步骤3：再玩一次 -->
    <div class="func-button-container" v-if="kbxStep === 3">
      <FuncButton @click="gameControl('replay')">再玩一次</FuncButton>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  name: 'kbx',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  data() {
    return {
      boxList: [],
      activeIndex: -1,
      openedBox: [],
    };
  },
  computed: {
    ...mapState({
      kbxStep: (state) => state.kbxStep,
      ...mapState('menu', ['selectedLeafMenu']),
    }),
    ...mapState('game', ['kbxTypeList']),
    pageTitle() {
      return this.selectedLeafMenu && this.selectedLeafMenu.name
        ? this.selectedLeafMenu.name
        : '';
    },
  },
  created() {
    this.initBoxList();
  },
  methods: {
    async chooseType(type) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0,
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'chooseType',
        param: type,
      });
      this.$toast.clear();
    },
    initBoxList() {
      // 生成18个宝箱编号，和OpenTreasureBox.vue一致
      for (let i = 0; i < 18; i += 1) {
        if (i < 3) {
          this.boxList.push(`0${i + 1}`);
        } else if (i >= 3 && i < 8) {
          this.boxList.push(`0${i + 2}`);
        } else if (i >= 8 && i < 12) {
          this.boxList.push(`${i + 2}`);
        } else if (i >= 12 && i < 18) {
          this.boxList.push(`${i + 3}`);
        }
      }
    },
    selectBox(index) {
      this.activeIndex = index;
    },
    async gameControl(action) {
      if (action === 'openBox') {
        if (this.activeIndex === -1) {
          this.$toast('请选择一个宝箱!');
          return;
        }
        if (this.openedBox.indexOf(this.activeIndex) > -1) {
          this.$toast('宝箱已经开启!');
          return;
        }
        console.log(this.activeIndex);
        await this.$store.dispatch('instructions/sendInstruction', {
          type: 'game_control',
          action: 'openBox',
          param: this.activeIndex,
        });
        this.openedBox.push(this.activeIndex);
      } else if (action === 'openBoxAll') {
        await this.$store.dispatch('instructions/sendInstruction', {
          type: 'game_control',
          action: 'openBoxAll',
        });
      } else if (action === 'start') {
        await this.$store.dispatch('instructions/sendInstruction', {
          type: 'game_control',
          action: 'start',
        });
      } else if (action === 'end') {
        await this.$store.dispatch('instructions/sendInstruction', {
          type: 'game_control',
          action: 'end',
        });
      } else if (action === 'replay') {
        await this.$store.dispatch('instructions/sendInstruction', {
          type: 'game_control',
          action: 'replay',
        });
      }
    },
  },
};
</script>

<style scoped>
.kbx-wrap {
  height: 100%;
}

.func-button-container {
  display: flex;
  justify-content: center;
  margin-top: 5.2vw;
  flex-direction: column;
  align-items: center;
  row-gap: 4vw;
}

.boxList {
  width: 100%;
  position: relative;
  flex-wrap: wrap;
  z-index: 1;
  display: flex;
  flex-wrap: wrap;
  column-gap: 2px;
  row-gap: 5px;
  justify-content: center;
}

.boxItem {
  display: flex;
  width: 18vw;
  height: 18vw;
  position: relative;
  flex-direction: column;
  background-color: #fff;
  border-radius: 10px;
}

.boxItem .num {
  color: #333;
  font-size: 32px;
}

.boxItem.boxOutline {
  border: 5px solid #FFD700;
  background-color: #F0F8FF;
}
.boxItem.boxOutline > .num {
  color: #000000;
  text-shadow: 0 0 2px rgba(255,215,0,0.3);
}
.boxItem.buyed {
  background-color: #E6E6E6;
  border: 1px solid #CCCCCC;
}
.boxItem.buyed > .num {
  color: #999999;
}
.step {
  display: flex;
  justify-content: center;
  margin-top: 39px;
  justify-content: center;
  margin-top: 5.2vw;
  flex-direction: column;
  align-items: center;
  row-gap: 4vw;
}
</style>
</file>

<file path="src/views/v2/modules/lottery/card/index.vue">
<template>
    <div class="sign-wrap">
        <PageTitleWrap :pageTitle="pageTitle" />
        <div class="func-button-container">
            <div class="btn-group">
                <div class="label">抽奖控制：</div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('startLottery')" class="func-button">开始抽奖</FuncButton>
                    <FuncButton @click="lotteryControl('replay')" class="func-button">再玩一次</FuncButton>
                </div>
            </div>
        </div>
        <div
        class="card_box"
      >
        <div
          v-for="(item, index) in cardAnswer"
          :key="index"
          @click="getCardanswer(index)"
        >
          {{ item.text }}
        </div>
      </div>
    </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  data() {
    return {
      pickNum: 1,
    };
  },
  methods: {
    async lotteryControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
    async getCardanswer(index) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'getAnswer',
        param: String(index),
      });
      this.$toast.clear();
    },
  },
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    ...mapState({
      cardAnswer: (state) => state.cardAnswer,
    }),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
};
</script>

<style scoped>
.sign-wrap {
    height: 100%;
}

.func-button-container {
    display: flex;
    justify-content: center;
    margin-top: 39px;
    flex-direction: column;
    align-items: center;
    row-gap: 4vw;
}
.btn-group {
    width: 80%;
    margin-bottom: 20px;
    color: #fff;
    .label {
        margin-bottom: 10px;
        color: #000;
    }
    .value-wrap {
        display: flex;
        justify-content: center;
        column-gap: 20px;
        color: #000;
    }
    .value-wrap:not(:last-child) {
        margin-bottom: 20px;
    }
}

.card_box {
      padding-left: 2vw;
      padding-right: 2vw;
      gap: 2vw;
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      grid-template-rows: 10vw;
      grid-auto-rows: 10vw;

      div {
        background-color: #fff;
        border-radius: 4vw;
        display: flex;
        justify-content: center;
        align-items: center;
      }
    }

</style>
</file>

<file path="src/views/v2/modules/lottery/picture/index.vue">
<template>
    <div class="sign-wrap">
        <PageTitleWrap :pageTitle="pageTitle" />
        <div class="func-button-container">
            <div class="btn-group">
                <div class="label">奖项切换：</div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('prevPrize')" class="func-button">上一个奖项</FuncButton>
                    <FuncButton @click="lotteryControl('nextPrize')" class="func-button">下一个奖项</FuncButton>
                </div>
            </div>
            <div class="btn-group">
                <div class="label">抽奖控制：</div>
                <div class="value-wrap">
                    一次抽取: <input type="number" class="pickInput" v-model="pickNum" @change="onPickNumChange" />
                </div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('startOrStopLottery')" class="func-button">开始/停止抽奖</FuncButton>
                </div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('reset')" class="func-button">重置抽奖</FuncButton>
                    <FuncButton @click="lotteryControl('closeResult')" class="func-button">关闭中奖结果</FuncButton>
                </div>
            </div>
            <div class="btn-group">
                <div class="label">中奖名单：</div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('openOrCloseSheet')" class="func-button">打开/关闭中奖名单</FuncButton>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';
import keyboardDetectionMixin from '@/mixins/keyboardDetection';

export default {
  mixins: [keyboardDetectionMixin],
  data() {
    return {
      pickNum: 1,
    };
  },
  methods: {
    async lotteryControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
    async onPickNumChange() {
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'setLotteryNum',
        param: this.pickNum,
      });
    },
  },
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
};
</script>

<style scoped>
.sign-wrap {
    height: 100%;
}

.func-button-container {
    display: flex;
    justify-content: center;
    margin-top: 39px;
    flex-direction: column;
    align-items: center;
    row-gap: 4vw;
}
.btn-group {
    width: 80%;
    margin-bottom: 20px;
    color: #fff;
    .label {
        margin-bottom: 10px;
        color: #000;
    }
    .value-wrap {
        display: flex;
        justify-content: center;
        column-gap: 20px;
        color: #000;
    }
    .value-wrap:not(:last-child) {
        margin-bottom: 20px;
    }
}
</style>
</file>

<file path="src/views/v2/modules/lottery/sheet/index.vue">
<template>
    <div class="sign-wrap">
        <PageTitleWrap :pageTitle="pageTitle" />
        <div class="func-button-container">
            <div class="btn-group">
                <div class="label">奖项切换：</div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('prevPrize')" class="func-button">上一个奖项</FuncButton>
                    <FuncButton @click="lotteryControl('nextPrize')" class="func-button">下一个奖项</FuncButton>
                </div>
            </div>
            <div class="btn-group">
                <div class="label">抽奖控制：</div>
                <div class="value-wrap">
                    一次抽取: <input type="number" class="pickInput" v-model="pickNum" @change="onPickNumChange" />
                </div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('startOrStopLottery')" class="func-button">开始/停止抽奖</FuncButton>
                </div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('reset')" class="func-button">重置抽奖</FuncButton>
                    <FuncButton @click="lotteryControl('closeResult')" class="func-button">关闭中奖结果</FuncButton>
                </div>
            </div>
            <div class="btn-group">
                <div class="label">中奖名单：</div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('openOrCloseSheet')" class="func-button">打开/关闭中奖名单</FuncButton>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';
import keyboardDetectionMixin from '@/mixins/keyboardDetection';

export default {
  data() {
    return {
      pickNum: 1,
    };
  },
  mixins: [keyboardDetectionMixin],
  methods: {
    async lotteryControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
    async onPickNumChange() {
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'setLotteryNum',
        param: this.pickNum,
      });
    },
  },
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
};
</script>

<style scoped>
.sign-wrap {
    height: 100%;
}

.func-button-container {
    display: flex;
    justify-content: center;
    margin-top: 39px;
    flex-direction: column;
    align-items: center;
    row-gap: 4vw;
}
.btn-group {
    width: 80%;
    margin-bottom: 20px;
    color: #fff;
    .label {
        margin-bottom: 10px;
        color: #000;
    }
    .value-wrap {
        display: flex;
        justify-content: center;
        column-gap: 20px;
        color: #000;
    }
    .value-wrap:not(:last-child) {
        margin-bottom: 20px;
    }
}
</style>
</file>

<file path="src/views/v2/modules/lottery/sign/index.vue">
<template>
    <div class="sign-wrap">
        <PageTitleWrap :pageTitle="pageTitle" />
        <div class="func-button-container">
            <div class="btn-group">
                <div class="label">奖项切换：</div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('prevPrize')" class="func-button">上一个奖项</FuncButton>
                    <FuncButton @click="lotteryControl('nextPrize')" class="func-button">下一个奖项</FuncButton>
                </div>
            </div>
            <div class="btn-group">
                <div class="label">抽奖控制：</div>
                <div class="value-wrap">
                    一次抽取: <input type="number" class="pickInput" v-model="pickNum" @change="onPickNumChange" />
                </div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('startOrStopLottery')" class="func-button">开始/停止抽奖</FuncButton>
                </div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('reset')" class="func-button">重置抽奖</FuncButton>
                    <FuncButton @click="lotteryControl('openOrCloseManualStopLottery')" class="func-button" v-if="selectedLeafMenu.id === '3dDraw'">开启/关闭手动停止抽奖</FuncButton>
                    <FuncButton @click="lotteryControl('closeResult')" class="func-button" v-if="selectedLeafMenu.id !== '3dDraw'">关闭中奖结果</FuncButton>
                </div>
            </div>
            <!-- 3D抽奖和地球抽奖没有弹出形式的中奖名单 -->
            <div class="btn-group" v-if="selectedLeafMenu.id !== '3dDraw' && selectedLeafMenu.id !== 'earthDraw'">
                <div class="label">中奖名单：</div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('openOrCloseSheet')" class="func-button">打开/关闭中奖名单</FuncButton>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import FuncButton from '@/views/v2/components/FuncButton.vue';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import { mapState } from 'vuex';
import keyboardDetectionMixin from '@/mixins/keyboardDetection';

export default {
  data() {
    return {
      pickNum: 1,
    };
  },
  mixins: [keyboardDetectionMixin],
  methods: {
    async lotteryControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
    async onPickNumChange() {
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'setLotteryNum',
        param: this.pickNum,
      });
    },
  },
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
};
</script>

<style scoped>
.sign-wrap {
    height: 100%;
}

.func-button-container {
    display: flex;
    justify-content: center;
    margin-top: 39px;
    flex-direction: column;
    align-items: center;
    row-gap: 4vw;
}
.btn-group {
    width: 80%;
    margin-bottom: 20px;
    color: #fff;
    .label {
        margin-bottom: 10px;
        color: #000;
    }
    .value-wrap {
        display: flex;
        justify-content: center;
        column-gap: 20px;
        color: #000;
    }
    .value-wrap:not(:last-child) {
        margin-bottom: 20px;
    }
}
</style>
</file>

<file path="src/views/v2/modules/lottery/wheel/index.vue">
<template>
    <div class="sign-wrap">
        <PageTitleWrap :pageTitle="pageTitle" />
        <div class="func-button-container">
            <div class="btn-group">
                <div class="label">抽奖控制：</div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('startLottery')" class="func-button">开始抽奖</FuncButton>
                </div>
                <div class="value-wrap">
                    <FuncButton @click="lotteryControl('reset')" class="func-button">重置</FuncButton>
                    <FuncButton @click="lotteryControl('closeResult')" class="func-button">关闭中奖结果</FuncButton>
                </div>
            </div>
        </div>
    </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  data() {
    return {
      pickNum: 1,
    };
  },
  methods: {
    async lotteryControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
  },
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
};
</script>

<style scoped>
.sign-wrap {
    height: 100%;
}

.func-button-container {
    display: flex;
    justify-content: center;
    margin-top: 39px;
    flex-direction: column;
    align-items: center;
    row-gap: 4vw;
}
.btn-group {
    width: 80%;
    margin-bottom: 20px;
    color: #fff;
    .label {
        margin-bottom: 10px;
        color: #000;
    }
    .value-wrap {
        display: flex;
        justify-content: center;
        column-gap: 20px;
        color: #000;
    }
    .value-wrap:not(:last-child) {
        margin-bottom: 20px;
    }
}
</style>
</file>

<file path="src/views/v2/modules/orderSong/index.vue">
<template>
    <div class="sign-wrap">
      <PageTitleWrap :pageTitle="pageTitle" />
      <div class="songList" :class="{ 'songList-empty': songOrderList.length === 0 }">
        <template v-if="songOrderList.length > 0">
        <div
          class="songItem"
          @click="chooseTargetSongOrder(item)"
          @touchstart="startPress(item)"
          @touchend="stopPress"
          v-for="item in songOrderList"
          :key="item.heart_wall_id"
          :class="{
            wait: item.sort === 0 && currentSongOrderId !== item.heart_wall_id,
            end: item.sort === 1 && currentSongOrderId !== item.heart_wall_id,
            in: currentSongOrderId === item.heart_wall_id,
          }"
        >
          <div class="songName">{{ item.title }}</div>
          <div class="songStatus">{{ statusFilter(item.sort, item.heart_wall_id) }}</div>
        </div>
        </template>
        <template v-else>
          <div class="no-song">暂无歌曲</div>
        </template>
      </div>
      <div class="func-button-container">
        <FuncButton @click="prevSongOrder" class="func-button">上一首</FuncButton>
        <FuncButton @click="nextSongOrder" class="func-button">下一首</FuncButton>
      </div>
    </div>
  </template>
<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';
import { editMusicStatus, getMusicList } from '@/api/index';

export default {
  data() {
    return {
      pressTimer: null,
      songOrderList: [],
      currentSongOrderId: undefined,
    };
  },
  methods: {
    prevSongOrder() {
      if (this.currentSongOrderIndex === -1) {
        this.$toast('当前没有歌曲在唱!');
        return;
      }
      if (this.currentSongOrderIndex === 0) {
        this.$toast('已经是第一首了!');
        return;
      }
      const tmpPrevSongSort = this.songOrderList[this.currentSongOrderIndex - 1].sort;
      if (tmpPrevSongSort === 1) {
        this.$dialog
          .confirm({
            title: '提示',
            message: '该歌曲已唱过,是否需要再唱一遍?',
          })
          .then(() => {
            editMusicStatus({
              heart_wall_id: this.songOrderList[this.currentSongOrderIndex].heart_wall_id,
              sort: 1,
            })
              .then(() => {
                this.requestMusicList(this.currentSongOrderIndex - 1);
              })
              .catch((err) => {
                console.log(err);
              });
          })
          .catch(() => {});
      } else {
        editMusicStatus({
          heart_wall_id: this.songOrderList[this.currentSongOrderIndex].heart_wall_id,
          sort: 1,
        })
          .then(() => {
            this.requestMusicList(this.currentSongOrderIndex - 1);
          })
          .catch((err) => {
            console.log(err);
          });
      }
    },
    chooseTargetSongOrder(targetSongOrder) {
      if (targetSongOrder.heart_wall_id === this.currentSongOrderId) {
        return;
      }
      const targetSongOrderIndex = this.songOrderList.findIndex((item) => item.heart_wall_id === targetSongOrder.heart_wall_id);
      if (targetSongOrder.sort === 1) {
        this.$dialog
          .confirm({
            title: '提示',
            message: '该歌曲已唱过,是否需要再唱一遍?',
          })
          .then(() => {
            editMusicStatus({
              // heart_wall_id: targetSongOrder.heart_wall_id,
              heart_wall_id: this.currentSongOrderId,
              sort: 1,
            })
              .then((res) => {
                console.log('修改状态:', res);
                this.requestMusicList(targetSongOrderIndex);
              })
              .catch((err) => {
                console.log(err);
              });
          })
          .catch(() => {});
      } else {
        editMusicStatus({
          // heart_wall_id: targetSongOrder.heart_wall_id,
          heart_wall_id: this.currentSongOrderId,
          sort: 1,
        })
          .then((res) => {
            console.log('修改状态:', res);
            this.requestMusicList(targetSongOrderIndex);
          })
          .catch((err) => {
            console.log(err);
          });
      }
    },
    nextSongOrder() {
      if (this.currentSongOrderIndex === -1) {
        this.$toast('当前没有歌曲在唱!');
        return;
      }
      if (this.currentSongOrderIndex === this.songOrderListLength - 1) {
        this.$toast('已经是最后一首了!');
        return;
      }
      const tmpNextSongSort = this.songOrderList[this.currentSongOrderIndex + 1].sort;
      if (tmpNextSongSort === 1) {
        this.$dialog
          .confirm({
            title: '提示',
            message: '该歌曲已唱过,是否需要再唱一遍?',
          })
          .then(() => {
            editMusicStatus({
              heart_wall_id: this.songOrderList[this.currentSongOrderIndex].heart_wall_id,
              sort: 1,
            })
              .then(() => {
                this.requestMusicList(this.currentSongOrderIndex + 1);
              })
              .catch((err) => {
                console.log(err);
              });
          })
          .catch(() => {});
      } else {
        editMusicStatus({
          heart_wall_id: this.songOrderList[this.currentSongOrderIndex].heart_wall_id,
          sort: 1,
        })
          .then(() => {
            this.requestMusicList(this.currentSongOrderIndex + 1);
          })
          .catch((err) => {
            console.log(err);
          });
      }
    },
    statusFilter(status, id) {
      if (id === this.currentSongOrderId) {
        return '进行中';
      } if (status === 0) {
        return '待唱';
      } if (status === 1) {
        return '已唱';
      }
      return '其他状态';
    },
    requestMusicList(targetIndex) {
      getMusicList()
        .then((res) => {
          this.songOrderList = res.data.list;
          if (targetIndex > -1) {
            this.currentSongOrderId = this.songOrderList[targetIndex].heart_wall_id;
            this.updateData(this.currentSongOrderId);
          } else if (targetIndex === -1) {
            this.updateData('noneId');
          } else {
            const tmpIndex = this.songOrderList.findIndex((item) => item.sort === 0);
            if (tmpIndex > -1) {
              this.currentSongOrderId = this.songOrderList[tmpIndex].heart_wall_id;
            }
          }
        })
        .catch((err) => {
          console.log(err);
        });
    },
    startPress(targetSongOrder) {
      if (this.pressTimer) {
        return;
      }
      this.pressTimer = setTimeout(() => {
        this.resetTargetSongOrder(targetSongOrder);
      }, 1000);
    },
    resetTargetSongOrder(targetSongOrder) {
      if (targetSongOrder.heart_wall_id === this.currentSongOrderId) {
        return;
      }
      if (targetSongOrder.sort === 0) {
        return;
      }
      this.$dialog
        .confirm({
          title: '提示',
          message: '是否重置该歌曲状态为待唱?',
        })
        .then(() => {
          editMusicStatus({
            heart_wall_id: targetSongOrder.heart_wall_id,
            sort: 0,
          })
            .then((res) => {
              console.log('修改状态:', res);
              this.requestMusicList(-1);
            })
            .catch((err) => {
              console.log(err);
            });
        })
        .catch(() => {});
    },
    stopPress() {
      if (this.pressTimer) {
        clearTimeout(this.pressTimer);
        this.pressTimer = null;
      }
    },
    async updateData(param) {
      if (this.$toast && this.$toast.loading) {
        this.$toast.loading({
          message: '加载中...',
          duration: 0,
        });
      }
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'orderSongUpdate',
        param,
      });
      if (this.$toast && this.$toast.clear) {
        this.$toast.clear();
      }
    },
  },
  name: 'pageWithTitle',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  created() {
    this.requestMusicList();
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    ...mapState({
      currentSongId: (state) => state.currentSongId,
    }),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
    currentSongOrderIndex() {
      return this.songOrderList.findIndex((item) => item.heart_wall_id === this.currentSongOrderId);
    },
    songOrderListLength() {
      return this.songOrderList.length;
    },
  },
  watch: {
    selectedLeafMenu(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.$store.commit('updateCurrentMiniGameAnswer', '');
      }
    },
    currentSongId: {
      handler(newVal) {
        if (newVal) {
          this.currentSongOrderId = newVal;
          const targetIndex = this.songOrderList.findIndex((item) => item.heart_wall_id === this.currentSongOrderId);
          // editMusicStatus 需引入
          editMusicStatus({
            heart_wall_id: this.currentSongOrderId,
            sort: 1,
          })
            .then(() => {
              this.requestMusicList(targetIndex);
            })
            .catch((err) => {
              console.log(err);
            });
        }
      },
      setter(newVal) {
        return newVal;
      },
      immediate: true,
    },
  },
};
</script>
  <style scoped>
  .sign-wrap {
    height: 100%;
  }
  .func-button-container {
    display: flex;
    margin-top: 39px;
    justify-content: center;
    margin-top: 5.2vw;
    flex-wrap: wrap;
    align-items: center;
    row-gap: 4vw;
    column-gap: 4vw;
    padding: 0 4vw;
  }
  .songList {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    height: 400px;
    overflow-y: scroll;
  }
  .songList-empty {
    height: 100px;
    justify-content: center;
  }
  .no-song {
    font-size: 36px;
    color: #333333;
  }
  .songItem {
    flex-shrink: 0;
    border-radius: 20px;
    display: flex;
    justify-content: space-between;
    width: 686px;
    height: 100px;
    padding: 0 32px;
    align-items: center;
  }
  .songName {
    font-size: 32px;
  }
  .songStatus {
    font-size: 32px;
  }
  .songItem.wait {
    background: linear-gradient(180deg, #544ba8, #544ba8 100%);
  }
  .songItem.wait .songName {
    color: #ece9ff;
  }
  .songItem.wait .songStatus {
    color: #ffffff;
  }
  .songItem.in {
    background-color: #ffffff;
  }
  .songItem.in .songName {
    color: #333333;
  }
  .songItem.in .songStatus {
    color: #fb5aa7;
  }
  .songItem.end {
    background-color: #2b243f;
  }
  .songItem.end .songName {
    color: #ece9ff;
  }
  .songItem.end .songStatus {
    color: #ffffff;
  }
  </style>
</file>

<file path="src/views/v2/modules/qaGame/index.vue">
<template>
    <div class="sign-wrap">
      <PageTitleWrap :pageTitle="pageTitle" />
      <div class="func-button-container">
        <template v-if="selectedLeafMenu.id !== 'hanzi'">
          <FuncButton @click="gameControl('start')" class="func-button">开始游戏</FuncButton>
          <FuncButton @click="gameControl('end')" class="func-button">结束游戏</FuncButton>
          <FuncButton @click="gameControl('replay')" class="func-button">再玩一次</FuncButton>
        </template>
        <FuncButton @click="gameControl('exposeAnswer')" class="func-button" v-if="selectedLeafMenu.id !== 'interactiveGodCompetition'">揭晓答案</FuncButton>
        <FuncButton @click="gameControl('next')" class="func-button">下一题</FuncButton>
      </div>
      <div class="answer-wrap">
        <label>答案：</label>
        <div v-html="currentMiniGameAnswer"></div>
      </div>
    </div>
  </template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  methods: {
    async gameControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
  },
  name: 'pageWithTitle',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    // 从 store 的 menu 模块映射 selectedLeafMenu 状态
    ...mapState('menu', ['selectedLeafMenu']),
    ...mapState(['currentMiniGameAnswer']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
  watch: {
    selectedLeafMenu(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.$store.commit('updateCurrentMiniGameAnswer', '');
      }
    },
  },
};
</script>

  <style scoped>
  .sign-wrap {
    height: 100%;
  }

  .func-button-container {
    display: flex;
    justify-content: center;
    margin-top: 39px;
    justify-content: center;
    margin-top: 5.2vw;
    flex-wrap: wrap;
    align-items: center;
    row-gap: 4vw;
    column-gap: 4vw;
    padding: 0 4vw;
  }
  .answer-wrap {
    position: relative;
    font-weight: 600;
    font-size: 4.8vw;
    margin-top: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-wrap: wrap;
    padding: 0 4vw;
  }
  .answer-wrap label {
    font-size: 3.8vw;
    color: #000;
    font-weight: 400;
    margin-right: 12px;
  }
  </style>
</file>

<file path="src/views/v2/modules/qaMahjong/index.vue">
<template>
  <div class="mahjong-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div class="func-button-container">
      <FuncButton
        @click="gameControl('controlHupaiNum', option.value)"
        class="func-button"
        :class="{ active: qsNum === option.value }"
        v-for="option in qsNumOptions"
        :key="option.value"
      >
        {{ option.label }}
      </FuncButton>
    </div>
    <div class="func-button-container">
      <FuncButton @click="handleHupaiOrContinue()" class="func-button"
        >胡牌/继续</FuncButton
      >
    </div>
    <div class="answer-wrap">
      <label>答案：</label>
      <div v-html="currentMiniGameAnswer"></div>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';
import { getFromScreen, setFromScreen, getQuestioner } from '@/utils/multipleScreenResolve';

export default {
  data() {
    return {
      qsNum: 0,
      qsNumOptions: [
        { label: '1张', value: 1 },
        { label: '2张', value: 2 },
        { label: '3张', value: 3 },
        { label: '4张', value: 4 },
        { label: '5张', value: 5 },
        { label: '6张', value: 6 },
      ],
      showMahjongAnswer: true,
      questioner: getQuestioner(),
    };
  },
  methods: {
    async initMahjongPage() {
      // 如果来自于大屏主动控制的跳转则不发送题目
      if (getFromScreen()) {
        setFromScreen(false);
        return;
      }
      this.sendNextQuestion();
    },
    async gameControl(action, param) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      const payload = {
        type: 'game_control',
        action,
      };
      if (param !== undefined) {
        payload.param = param;
      }
      await this.$store.dispatch('instructions/sendInstruction', payload);
      this.$toast.clear();
      if (action === 'controlHupaiNum') {
        this.qsNum = param;
      }
    },
    async handleHupaiOrContinue() {
      /**
       * 如果由遥控器控制，大屏此时不可以主动翻牌
       * 那么一开始是答案未揭晓，答案揭晓……如此循环往复
       */
      if (this.showMahjongAnswer) {
        /**
         * 如果揭晓答案
         */
        await this.gameControl('expose');

        this.showMahjongAnswer = false;
        return;
      }
      this.showMahjongAnswer = true;

      // 否则，就发送下一道题目的内容
      await this.sendNextQuestion();
    },
    /**
     * 发送下一道题目的内容
     */
    async sendNextQuestion() {
      const question = this.qsNum !== 0
        ? this.questioner.next(this.qsNum)
        : this.questioner.next();
      if (question) {
        let answerStr = '';
        question.answerList
          .map((i) => i.value)
          .forEach((number) => {
            if (number < 10) {
              answerStr += `${number}万`;
            } else if (number < 20) {
              answerStr += `${number - 10}筒`;
            } else {
              answerStr += `${number - 20}条`;
            }
          });
        // 将遥控器自己生成的题目的答案回显到页面上去
        this.$store.commit('updateCurrentMiniGameAnswer', answerStr);
        await this.gameControl(
          'sendQuestion',
          question ? JSON.stringify(question) : '',
        );
      } else {
        await this.gameControl('sendQuestion', '');
      }
    },
  },
  name: 'pageWithTitle',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    // 从 store 的 menu 模块映射 selectedLeafMenu 状态
    ...mapState('menu', ['selectedLeafMenu']),
    ...mapState(['currentMiniGameAnswer']),
    ...mapState('game', ['triggerInitMahjongPage']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
  watch: {
    triggerInitMahjongPage(newVal) {
      if (newVal) {
        this.initMahjongPage();
        this.$store.commit('game/SET_TRIGGER_INIT_MAHJONG_PAGE', false);
      }
    },
    selectedLeafMenu(newVal, oldVal) {
      if (newVal !== oldVal) {
        this.$store.commit('updateCurrentMiniGameAnswer', '');
      }
    },
  },
};
</script>

<style scoped>
.mahjong-wrap {
  height: 100%;
}

.func-button-container {
  display: flex;
  justify-content: center;
  margin-top: 39px;
  justify-content: center;
  margin-top: 5.2vw;
  flex-wrap: wrap;
  align-items: center;
  row-gap: 4vw;
  column-gap: 4vw;
  padding: 0 4vw;
}
.answer-wrap {
  position: relative;
  font-weight: 600;
  font-size: 4.8vw;
  margin-top: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  padding: 0 4vw;
}
.answer-wrap label {
  font-size: 3.8vw;
  color: #000;
  font-weight: 400;
  margin-right: 12px;
}
.func-button.active {
  font-weight: bold;
  color: black;
  border: 2px solid black;
}
</style>
</file>

<file path="src/views/v2/modules/sendBless/index.vue">
<template>
    <div class="kbxMod">
        <PageTitleWrap :pageTitle="pageTitle" />
        <div class="func-button-container">
            <FuncButton class="func-button" @click="chooseType(item)" v-for="item in timeList" :key="item.id">
                {{ item.name }}秒
            </FuncButton>
        </div>
        <div class="func-button-container">
            <FuncButton @click="gameControl('end')" class="func-button">结束游戏</FuncButton>
            <FuncButton @click="gameControl('replay')" class="func-button">再玩一次</FuncButton>
        </div>
    </div>
</template>
<script>
import { mapState } from 'vuex';
import { CODE } from '@/assets/constant/index';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

const TIMES = [
  {
    id: 0,
    name: '120',
  },
  {
    id: 1,
    name: '150',
  },
  {
    id: 2,
    name: '180',
  },
];

export default {
  name: 'sendBlessing',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
  data() {
    return {
      timeList: TIMES,
      CODE,
    };
  },
  beforeDestroy() {
    this.$store.commit('clearOpenedBox');
  },
  methods: {
    async chooseType(pObj) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      const tParam = {
        time: pObj.name,
      };
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'szfChooseTime',
        param: JSON.stringify(tParam),
      });
      this.$toast.clear();
    },
    async gameControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
  },
};
</script>

<style lang="less" scoped>
.kbxMod {
    width: 100%;
    height: 100%;
    position: relative;
}

.func-button-container {
    display: flex;
    justify-content: center;
    margin-top: 39px;
    justify-content: center;
    margin-top: 5.2vw;
    align-items: center;
    gap: 4vw;
  }
</style>
</file>

<file path="src/views/v2/modules/sign/index.vue">
<template>
  <div class="sign-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div class="func-button-container">
      <FuncButton @click="goHome" class="func-button">回到首页</FuncButton>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  methods: {
    async goHome() {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'router_jump',
        action: '/',
      });
      this.$toast.clear();
      this.$store.commit('menu/setSelectedLeafMenu', null);
    },
  },
  name: 'pageWithTitle',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    // 从 store 的 menu 模块映射 selectedLeafMenu 状态
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
};
</script>

<style scoped>
.sign-wrap {
  height: 100%;
}

.func-button-container {
  display: flex;
  justify-content: center;
  margin-top: 39px;
}
</style>
</file>

<file path="src/views/v2/modules/sign/signWeddingBook.vue">
<template>
  <div class="sign-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div class="func-button-container">
      <FuncButton class="func-button" @click="gameControl('show_bridegroom_name')">新郎签名</FuncButton>
      <FuncButton class="func-button" @click="gameControl('show_bride_name')">新娘签名</FuncButton>
      <FuncButton class="func-button" @click="gameControl('clear_sign')">清空签名</FuncButton>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  name: 'SignWeddingBook',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
  methods: {
    async gameControl(type) {
      if (type === 'clear_sign') {
        // 清空签名需要确认
        try {
          await this.$dialog.confirm({
            title: '确认清空签名？',
          });
        } catch (e) {
          if (e === 'cancel') return;
          console.error(e);
          return;
        }
      }
      this.$toast.loading({
        message: '操作中...',
        duration: 0,
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: type,
      });
      this.$toast.clear();
    },
  },
};
</script>

<style scoped>
.sign-wrap {
  height: 100%;
}

.func-button-container {
  display: flex;
  justify-content: center;
  margin-top: 39px;
  justify-content: center;
  margin-top: 5.2vw;
  flex-wrap: wrap;
  align-items: center;
  row-gap: 4vw;
  column-gap: 4vw;
  padding: 0 4vw;
}
</style>
</file>

<file path="src/views/v2/modules/vote/index.vue">
<template>
  <div class="sign-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div class="func-button-container">
      <FuncButton @click="voteControl('clearPrev')" class="func-button">清空上一轮</FuncButton>
      <FuncButton @click="voteControl('savePrev')" class="func-button">保留上一轮</FuncButton>
      <FuncButton @click="voteControl('end')" class="func-button">结束投票</FuncButton>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  methods: {
    async voteControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0, // 持续显示
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
  },
  name: 'Vote',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    ...mapState('menu', ['selectedLeafMenu']),
    pageTitle() {
      return this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
};
</script>

<style scoped>
.sign-wrap {
  height: 100%;
}

.func-button-container {
  display: flex;
  justify-content: center;
  margin-top: 39px;
  flex-direction: column;
  align-items: center;
  row-gap: 4vw;
}
</style>
</file>

<file path="src/views/v2/modules/zfdm/index.vue">
<template>
  <div class="sign-wrap">
    <PageTitleWrap :pageTitle="pageTitle" />
    <div class="func-button-container">
      <FuncButton
        @click="chooseType(item)"
        class="func-button"
        v-for="item in zfdmList"
        :key="item.race_type"
      >
        开启{{ item.raceTime }}秒挑战{{ item.lotteryMoney }}元红包
      </FuncButton>
    </div>
    <div class="func-button-container">
      <FuncButton @click="gameControl('start')" class="func-button">开始游戏</FuncButton>
      <FuncButton @click="gameControl('end')" class="func-button">结束游戏</FuncButton>
      <FuncButton @click="gameControl('replay')" class="func-button">再玩一次</FuncButton>
    </div>
  </div>
</template>

<script>
import { mapState } from 'vuex';
import PageTitleWrap from '@/views/v2/components/PageTitle.vue';
import FuncButton from '@/views/v2/components/FuncButton.vue';

export default {
  name: 'zfdm',
  components: {
    PageTitleWrap,
    FuncButton,
  },
  computed: {
    ...mapState({
      zfdmList: (state) => state.zfdmList,
      ...mapState('menu', ['selectedLeafMenu']),
    }),
    pageTitle() {
      return this.selectedLeafMenu && this.selectedLeafMenu.name ? this.selectedLeafMenu.name : '';
    },
  },
  methods: {
    async gameControl(action) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0,
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action,
      });
      this.$toast.clear();
    },
    async chooseType(type) {
      this.$toast.loading({
        message: '加载中...',
        duration: 0,
      });
      await this.$store.dispatch('instructions/sendInstruction', {
        type: 'game_control',
        action: 'chooseType',
        param: JSON.stringify(type),
      });
      this.$toast.clear();
    },
  },
};
</script>

<style scoped>
.sign-wrap {
  height: 100%;
}

.func-button-container {
  display: flex;
  justify-content: center;
  margin-top: 39px;
  justify-content: center;
  margin-top: 5.2vw;
  flex-direction: column;
  align-items: center;
  row-gap: 4vw;
}
</style>
</file>

</files>
